!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDR	testdocs/sqlite3.c	/^#define ADDR(/;"	d	file:
AGGREGATE	testdocs/sqlite3.c	/^#define AGGREGATE(/;"	d	file:
AGGREGATE2	testdocs/sqlite3.c	/^#define AGGREGATE2(/;"	d	file:
ALLBITS	testdocs/sqlite3.c	/^#define ALLBITS /;"	d	file:
ALWAYS	testdocs/sqlite3.c	/^# define ALWAYS(/;"	d	file:
ALWAYS	testdocs/sqlite3.c	/^#define ALWAYS(/;"	d	file:
ASSERT_SZLEAF_OK	testdocs/sqlite3.c	/^#define ASSERT_SZLEAF_OK(/;"	d	file:
ATF_H	atf.h	/^#define ATF_H$/;"	d
AdjustTree	testdocs/sqlite3.c	/^static int AdjustTree($/;"	f	file:
AggInfo	testdocs/sqlite3.c	/^struct AggInfo {$/;"	s	file:
AggInfo	testdocs/sqlite3.c	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo	file:
AggInfo_col	testdocs/sqlite3.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:
AggInfo_func	testdocs/sqlite3.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:
ApplyCostMultiplier	testdocs/sqlite3.c	/^# define ApplyCostMultiplier(/;"	d	file:
ArraySize	testdocs/sqlite3.c	/^# define ArraySize(/;"	d	file:
ArraySize	testdocs/sqlite3.c	/^#define ArraySize(/;"	d	file:
AsciiTokenizer	testdocs/sqlite3.c	/^struct AsciiTokenizer {$/;"	s	file:
AsciiTokenizer	testdocs/sqlite3.c	/^typedef struct AsciiTokenizer AsciiTokenizer;$/;"	t	typeref:struct:AsciiTokenizer	file:
AuthContext	testdocs/sqlite3.c	/^struct AuthContext {$/;"	s	file:
AuthContext	testdocs/sqlite3.c	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext	file:
AutoincInfo	testdocs/sqlite3.c	/^struct AutoincInfo {$/;"	s	file:
AutoincInfo	testdocs/sqlite3.c	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo	file:
AuxData	testdocs/sqlite3.c	/^struct AuxData {$/;"	s	file:
AuxData	testdocs/sqlite3.c	/^typedef struct AuxData AuxData;$/;"	t	typeref:struct:AuxData	file:
BITVEC_HASH	testdocs/sqlite3.c	/^#define BITVEC_HASH(/;"	d	file:
BITVEC_MXHASH	testdocs/sqlite3.c	/^#define BITVEC_MXHASH /;"	d	file:
BITVEC_NBIT	testdocs/sqlite3.c	/^#define BITVEC_NBIT /;"	d	file:
BITVEC_NELEM	testdocs/sqlite3.c	/^#define BITVEC_NELEM /;"	d	file:
BITVEC_NINT	testdocs/sqlite3.c	/^#define BITVEC_NINT /;"	d	file:
BITVEC_NPTR	testdocs/sqlite3.c	/^#define BITVEC_NPTR /;"	d	file:
BITVEC_SZ	testdocs/sqlite3.c	/^#define BITVEC_SZ /;"	d	file:
BITVEC_SZELEM	testdocs/sqlite3.c	/^#define BITVEC_SZELEM /;"	d	file:
BITVEC_TELEM	testdocs/sqlite3.c	/^#define BITVEC_TELEM /;"	d	file:
BITVEC_USIZE	testdocs/sqlite3.c	/^#define BITVEC_USIZE /;"	d	file:
BMS	testdocs/sqlite3.c	/^#define BMS /;"	d	file:
BTALLOC_ANY	testdocs/sqlite3.c	/^#define BTALLOC_ANY /;"	d	file:
BTALLOC_EXACT	testdocs/sqlite3.c	/^#define BTALLOC_EXACT /;"	d	file:
BTALLOC_LE	testdocs/sqlite3.c	/^#define BTALLOC_LE /;"	d	file:
BTCF_AtLast	testdocs/sqlite3.c	/^#define BTCF_AtLast /;"	d	file:
BTCF_Incrblob	testdocs/sqlite3.c	/^#define BTCF_Incrblob /;"	d	file:
BTCF_Multiple	testdocs/sqlite3.c	/^#define BTCF_Multiple /;"	d	file:
BTCF_ValidNKey	testdocs/sqlite3.c	/^#define BTCF_ValidNKey /;"	d	file:
BTCF_ValidOvfl	testdocs/sqlite3.c	/^#define BTCF_ValidOvfl /;"	d	file:
BTCF_WriteFlag	testdocs/sqlite3.c	/^#define BTCF_WriteFlag /;"	d	file:
BTCURSOR_MAX_DEPTH	testdocs/sqlite3.c	/^#define BTCURSOR_MAX_DEPTH /;"	d	file:
BTREE_APPEND	testdocs/sqlite3.c	/^#define BTREE_APPEND /;"	d	file:
BTREE_APPLICATION_ID	testdocs/sqlite3.c	/^#define BTREE_APPLICATION_ID /;"	d	file:
BTREE_AUTOVACUUM_FULL	testdocs/sqlite3.c	/^#define BTREE_AUTOVACUUM_FULL /;"	d	file:
BTREE_AUTOVACUUM_INCR	testdocs/sqlite3.c	/^#define BTREE_AUTOVACUUM_INCR /;"	d	file:
BTREE_AUTOVACUUM_NONE	testdocs/sqlite3.c	/^#define BTREE_AUTOVACUUM_NONE /;"	d	file:
BTREE_AUXDELETE	testdocs/sqlite3.c	/^#define BTREE_AUXDELETE /;"	d	file:
BTREE_BLOBKEY	testdocs/sqlite3.c	/^#define BTREE_BLOBKEY /;"	d	file:
BTREE_BULKLOAD	testdocs/sqlite3.c	/^#define BTREE_BULKLOAD /;"	d	file:
BTREE_DATA_VERSION	testdocs/sqlite3.c	/^#define BTREE_DATA_VERSION /;"	d	file:
BTREE_DEFAULT_CACHE_SIZE	testdocs/sqlite3.c	/^#define BTREE_DEFAULT_CACHE_SIZE /;"	d	file:
BTREE_FILE_FORMAT	testdocs/sqlite3.c	/^#define BTREE_FILE_FORMAT /;"	d	file:
BTREE_FORDELETE	testdocs/sqlite3.c	/^#define BTREE_FORDELETE /;"	d	file:
BTREE_FREE_PAGE_COUNT	testdocs/sqlite3.c	/^#define BTREE_FREE_PAGE_COUNT /;"	d	file:
BTREE_HINT_RANGE	testdocs/sqlite3.c	/^#define BTREE_HINT_RANGE /;"	d	file:
BTREE_INCR_VACUUM	testdocs/sqlite3.c	/^#define BTREE_INCR_VACUUM /;"	d	file:
BTREE_INTKEY	testdocs/sqlite3.c	/^#define BTREE_INTKEY /;"	d	file:
BTREE_LARGEST_ROOT_PAGE	testdocs/sqlite3.c	/^#define BTREE_LARGEST_ROOT_PAGE /;"	d	file:
BTREE_MEMORY	testdocs/sqlite3.c	/^#define BTREE_MEMORY /;"	d	file:
BTREE_OMIT_JOURNAL	testdocs/sqlite3.c	/^#define BTREE_OMIT_JOURNAL /;"	d	file:
BTREE_SAVEPOSITION	testdocs/sqlite3.c	/^#define BTREE_SAVEPOSITION /;"	d	file:
BTREE_SCHEMA_VERSION	testdocs/sqlite3.c	/^#define BTREE_SCHEMA_VERSION /;"	d	file:
BTREE_SEEK_EQ	testdocs/sqlite3.c	/^#define BTREE_SEEK_EQ /;"	d	file:
BTREE_SINGLE	testdocs/sqlite3.c	/^#define BTREE_SINGLE /;"	d	file:
BTREE_TEXT_ENCODING	testdocs/sqlite3.c	/^#define BTREE_TEXT_ENCODING /;"	d	file:
BTREE_UNORDERED	testdocs/sqlite3.c	/^#define BTREE_UNORDERED /;"	d	file:
BTREE_USER_VERSION	testdocs/sqlite3.c	/^#define BTREE_USER_VERSION /;"	d	file:
BTREE_WRCSR	testdocs/sqlite3.c	/^#define BTREE_WRCSR /;"	d	file:
BTS_EXCLUSIVE	testdocs/sqlite3.c	/^#define BTS_EXCLUSIVE /;"	d	file:
BTS_INITIALLY_EMPTY	testdocs/sqlite3.c	/^#define BTS_INITIALLY_EMPTY /;"	d	file:
BTS_NO_WAL	testdocs/sqlite3.c	/^#define BTS_NO_WAL /;"	d	file:
BTS_PAGESIZE_FIXED	testdocs/sqlite3.c	/^#define BTS_PAGESIZE_FIXED /;"	d	file:
BTS_PENDING	testdocs/sqlite3.c	/^#define BTS_PENDING /;"	d	file:
BTS_READ_ONLY	testdocs/sqlite3.c	/^#define BTS_READ_ONLY /;"	d	file:
BTS_SECURE_DELETE	testdocs/sqlite3.c	/^#define BTS_SECURE_DELETE /;"	d	file:
BYTESWAP32	testdocs/sqlite3.c	/^#define BYTESWAP32(/;"	d	file:
BenignMallocHooks	testdocs/sqlite3.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	testdocs/sqlite3.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
BitFlagAllTest	testdocs/sqlite3.c	/^#define BitFlagAllTest(/;"	d	file:
BitFlagTest	testdocs/sqlite3.c	/^#define BitFlagTest(/;"	d	file:
Bitmask	testdocs/sqlite3.c	/^  typedef SQLITE_BITMASK_TYPE Bitmask;$/;"	t	file:
Bitmask	testdocs/sqlite3.c	/^  typedef u64 Bitmask;$/;"	t	file:
Bitvec	testdocs/sqlite3.c	/^struct Bitvec {$/;"	s	file:
Bitvec	testdocs/sqlite3.c	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec	file:
Blob	testdocs/sqlite3.c	/^struct Blob {$/;"	s	file:
Blob	testdocs/sqlite3.c	/^typedef struct Blob Blob;$/;"	t	typeref:struct:Blob	file:
Bool	testdocs/sqlite3.c	/^typedef unsigned Bool;$/;"	t	file:
BtCursor	testdocs/sqlite3.c	/^struct BtCursor {$/;"	s	file:
BtCursor	testdocs/sqlite3.c	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor	file:
BtLock	testdocs/sqlite3.c	/^struct BtLock {$/;"	s	file:
BtLock	testdocs/sqlite3.c	/^typedef struct BtLock BtLock;$/;"	t	typeref:struct:BtLock	file:
BtShared	testdocs/sqlite3.c	/^struct BtShared {$/;"	s	file:
BtShared	testdocs/sqlite3.c	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared	file:
Btree	testdocs/sqlite3.c	/^struct Btree {$/;"	s	file:
Btree	testdocs/sqlite3.c	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree	file:
BtreePayload	testdocs/sqlite3.c	/^struct BtreePayload {$/;"	s	file:
BtreePayload	testdocs/sqlite3.c	/^typedef struct BtreePayload BtreePayload;$/;"	t	typeref:struct:BtreePayload	file:
Buf	edit.h	/^} Buf;$/;"	t	typeref:struct:__anon5
BusyHandler	testdocs/sqlite3.c	/^struct BusyHandler {$/;"	s	file:
BusyHandler	testdocs/sqlite3.c	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler	file:
ByteRangeLockPB2	testdocs/sqlite3.c	/^struct ByteRangeLockPB2$/;"	s	file:
C1	testdocs/waf	/^C1='#.'$/;"	v
C2	testdocs/waf	/^C2='#,'$/;"	v
C3	testdocs/waf	/^C3='#('$/;"	v
CACHE_STALE	testdocs/sqlite3.c	/^#define CACHE_STALE /;"	d	file:
CC_AND	testdocs/sqlite3.c	/^#define CC_AND /;"	d	file:
CC_BANG	testdocs/sqlite3.c	/^#define CC_BANG /;"	d	file:
CC_COMMA	testdocs/sqlite3.c	/^#define CC_COMMA /;"	d	file:
CC_DIGIT	testdocs/sqlite3.c	/^#define CC_DIGIT /;"	d	file:
CC_DOLLAR	testdocs/sqlite3.c	/^#define CC_DOLLAR /;"	d	file:
CC_DOT	testdocs/sqlite3.c	/^#define CC_DOT /;"	d	file:
CC_EQ	testdocs/sqlite3.c	/^#define CC_EQ /;"	d	file:
CC_GT	testdocs/sqlite3.c	/^#define CC_GT /;"	d	file:
CC_ID	testdocs/sqlite3.c	/^#define CC_ID /;"	d	file:
CC_ILLEGAL	testdocs/sqlite3.c	/^#define CC_ILLEGAL /;"	d	file:
CC_KYWD	testdocs/sqlite3.c	/^#define CC_KYWD /;"	d	file:
CC_LP	testdocs/sqlite3.c	/^#define CC_LP /;"	d	file:
CC_LT	testdocs/sqlite3.c	/^#define CC_LT /;"	d	file:
CC_MINUS	testdocs/sqlite3.c	/^#define CC_MINUS /;"	d	file:
CC_PERCENT	testdocs/sqlite3.c	/^#define CC_PERCENT /;"	d	file:
CC_PIPE	testdocs/sqlite3.c	/^#define CC_PIPE /;"	d	file:
CC_PLUS	testdocs/sqlite3.c	/^#define CC_PLUS /;"	d	file:
CC_QUOTE	testdocs/sqlite3.c	/^#define CC_QUOTE /;"	d	file:
CC_QUOTE2	testdocs/sqlite3.c	/^#define CC_QUOTE2 /;"	d	file:
CC_RP	testdocs/sqlite3.c	/^#define CC_RP /;"	d	file:
CC_SEMI	testdocs/sqlite3.c	/^#define CC_SEMI /;"	d	file:
CC_SLASH	testdocs/sqlite3.c	/^#define CC_SLASH /;"	d	file:
CC_SPACE	testdocs/sqlite3.c	/^#define CC_SPACE /;"	d	file:
CC_STAR	testdocs/sqlite3.c	/^#define CC_STAR /;"	d	file:
CC_TILDA	testdocs/sqlite3.c	/^#define CC_TILDA /;"	d	file:
CC_VARALPHA	testdocs/sqlite3.c	/^#define CC_VARALPHA /;"	d	file:
CC_VARNUM	testdocs/sqlite3.c	/^#define CC_VARNUM /;"	d	file:
CC_X	testdocs/sqlite3.c	/^#define CC_X /;"	d	file:
CCurHint	testdocs/sqlite3.c	/^struct CCurHint {$/;"	s	file:
CHECK	atf.h	/^#define CHECK(/;"	d
CHECK_PAGE	testdocs/sqlite3.c	/^#define CHECK_PAGE(/;"	d	file:
CInstIter	testdocs/sqlite3.c	/^struct CInstIter {$/;"	s	file:
CInstIter	testdocs/sqlite3.c	/^typedef struct CInstIter CInstIter;$/;"	t	typeref:struct:CInstIter	file:
CKCNSTRNT_COLUMN	testdocs/sqlite3.c	/^#define CKCNSTRNT_COLUMN /;"	d	file:
CKCNSTRNT_ROWID	testdocs/sqlite3.c	/^#define CKCNSTRNT_ROWID /;"	d	file:
CLEARBIT	testdocs/sqlite3.c	/^#define CLEARBIT(/;"	d	file:
CODEC1	testdocs/sqlite3.c	/^# define CODEC1(/;"	d	file:
CODEC2	testdocs/sqlite3.c	/^# define CODEC2(/;"	d	file:
COLFLAG_HASTYPE	testdocs/sqlite3.c	/^#define COLFLAG_HASTYPE /;"	d	file:
COLFLAG_HIDDEN	testdocs/sqlite3.c	/^#define COLFLAG_HIDDEN /;"	d	file:
COLFLAG_PRIMKEY	testdocs/sqlite3.c	/^#define COLFLAG_PRIMKEY /;"	d	file:
COLNAME_COLUMN	testdocs/sqlite3.c	/^#define COLNAME_COLUMN /;"	d	file:
COLNAME_DATABASE	testdocs/sqlite3.c	/^#define COLNAME_DATABASE /;"	d	file:
COLNAME_DECLTYPE	testdocs/sqlite3.c	/^#define COLNAME_DECLTYPE /;"	d	file:
COLNAME_N	testdocs/sqlite3.c	/^#   define COLNAME_N /;"	d	file:
COLNAME_N	testdocs/sqlite3.c	/^# define COLNAME_N /;"	d	file:
COLNAME_NAME	testdocs/sqlite3.c	/^#define COLNAME_NAME /;"	d	file:
COLNAME_TABLE	testdocs/sqlite3.c	/^#define COLNAME_TABLE /;"	d	file:
COLUMN_MASK	testdocs/sqlite3.c	/^#define COLUMN_MASK(/;"	d	file:
CORRUPT_DB	testdocs/sqlite3.c	/^#define CORRUPT_DB /;"	d	file:
CTIMEOPT_VAL	testdocs/sqlite3.c	/^#define CTIMEOPT_VAL(/;"	d	file:
CTIMEOPT_VAL_	testdocs/sqlite3.c	/^#define CTIMEOPT_VAL_(/;"	d	file:
CTRL_FREE	testdocs/sqlite3.c	/^#define CTRL_FREE /;"	d	file:
CTRL_LOGSIZE	testdocs/sqlite3.c	/^#define CTRL_LOGSIZE /;"	d	file:
CURSOR_FAULT	testdocs/sqlite3.c	/^#define CURSOR_FAULT /;"	d	file:
CURSOR_INVALID	testdocs/sqlite3.c	/^#define CURSOR_INVALID /;"	d	file:
CURSOR_REQUIRESEEK	testdocs/sqlite3.c	/^#define CURSOR_REQUIRESEEK /;"	d	file:
CURSOR_SKIPNEXT	testdocs/sqlite3.c	/^#define CURSOR_SKIPNEXT /;"	d	file:
CURSOR_VALID	testdocs/sqlite3.c	/^#define CURSOR_VALID /;"	d	file:
CURTYPE_BTREE	testdocs/sqlite3.c	/^#define CURTYPE_BTREE /;"	d	file:
CURTYPE_PSEUDO	testdocs/sqlite3.c	/^#define CURTYPE_PSEUDO /;"	d	file:
CURTYPE_SORTER	testdocs/sqlite3.c	/^#define CURTYPE_SORTER /;"	d	file:
CURTYPE_VTAB	testdocs/sqlite3.c	/^#define CURTYPE_VTAB /;"	d	file:
CellArray	testdocs/sqlite3.c	/^struct CellArray {$/;"	s	file:
CellArray	testdocs/sqlite3.c	/^typedef struct CellArray CellArray;$/;"	t	typeref:struct:CellArray	file:
CellInfo	testdocs/sqlite3.c	/^struct CellInfo {$/;"	s	file:
CellInfo	testdocs/sqlite3.c	/^typedef struct CellInfo CellInfo;$/;"	t	typeref:struct:CellInfo	file:
CfgExpandTabs	buf.c	/^int CfgExpandTabs = true;$/;"	v
CfgTabWidth	buf.c	/^int CfgTabWidth = 4;$/;"	v
ChooseLeaf	testdocs/sqlite3.c	/^static int ChooseLeaf($/;"	f	file:
Cleanup	testdocs/sqlite3.c	/^static void Cleanup(Vdbe *p){$/;"	f	file:
CollSeq	testdocs/sqlite3.c	/^struct CollSeq {$/;"	s	file:
CollSeq	testdocs/sqlite3.c	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq	file:
Column	testdocs/sqlite3.c	/^struct Column {$/;"	s	file:
Column	testdocs/sqlite3.c	/^typedef struct Column Column;$/;"	t	typeref:struct:Column	file:
ConstFactorOk	testdocs/sqlite3.c	/^#define ConstFactorOk(/;"	d	file:
CountCtx	testdocs/sqlite3.c	/^struct CountCtx {$/;"	s	file:
CountCtx	testdocs/sqlite3.c	/^typedef struct CountCtx CountCtx;$/;"	t	typeref:struct:CountCtx	file:
CsrFlagClear	testdocs/sqlite3.c	/^#define CsrFlagClear(/;"	d	file:
CsrFlagSet	testdocs/sqlite3.c	/^#define CsrFlagSet(/;"	d	file:
CsrFlagTest	testdocs/sqlite3.c	/^#define CsrFlagTest(/;"	d	file:
Cte	testdocs/sqlite3.c	/^  struct Cte {                    \/* For each CTE in the WITH clause.... *\/$/;"	s	struct:With	file:
Curr_File	atf.h	/^char* Curr_File = NULL;$/;"	v
Curr_Line	atf.h	/^unsigned int Curr_Line = 0;$/;"	v
Curr_Test	atf.h	/^char* Curr_Test = NULL;$/;"	v
D	testdocs/sqlite3.c	/^  int Y, M, D;        \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
DB_Empty	testdocs/sqlite3.c	/^#define DB_Empty /;"	d	file:
DB_SchemaLoaded	testdocs/sqlite3.c	/^#define DB_SchemaLoaded /;"	d	file:
DB_UnresetViews	testdocs/sqlite3.c	/^#define DB_UnresetViews /;"	d	file:
DCOORD	testdocs/sqlite3.c	/^# define DCOORD(/;"	d	file:
DFUNCTION	testdocs/sqlite3.c	/^#define DFUNCTION(/;"	d	file:
DIRECT_MODE	testdocs/sqlite3.c	/^# define DIRECT_MODE /;"	d	file:
DOCID_CMP	testdocs/sqlite3.c	/^#define DOCID_CMP(/;"	d	file:
DOTLOCK_SUFFIX	testdocs/sqlite3.c	/^#define DOTLOCK_SUFFIX /;"	d	file:
DOWN	edit.h	/^    DOWN  = +1$/;"	e	enum:__anon7
DO_OS_MALLOC_TEST	testdocs/sqlite3.c	/^  #define DO_OS_MALLOC_TEST(/;"	d	file:
DateTime	testdocs/sqlite3.c	/^struct DateTime {$/;"	s	file:
DateTime	testdocs/sqlite3.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
Db	testdocs/sqlite3.c	/^struct Db {$/;"	s	file:
Db	testdocs/sqlite3.c	/^typedef struct Db Db;$/;"	t	typeref:struct:Db	file:
DbClearProperty	testdocs/sqlite3.c	/^#define DbClearProperty(/;"	d	file:
DbFixer	testdocs/sqlite3.c	/^struct DbFixer {$/;"	s	file:
DbFixer	testdocs/sqlite3.c	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer	file:
DbHasAnyProperty	testdocs/sqlite3.c	/^#define DbHasAnyProperty(/;"	d	file:
DbHasProperty	testdocs/sqlite3.c	/^#define DbHasProperty(/;"	d	file:
DbMaskAllZero	testdocs/sqlite3.c	/^# define DbMaskAllZero(/;"	d	file:
DbMaskNonZero	testdocs/sqlite3.c	/^# define DbMaskNonZero(/;"	d	file:
DbMaskSet	testdocs/sqlite3.c	/^# define DbMaskSet(/;"	d	file:
DbMaskTest	testdocs/sqlite3.c	/^# define DbMaskTest(/;"	d	file:
DbMaskZero	testdocs/sqlite3.c	/^# define DbMaskZero(/;"	d	file:
DbPage	testdocs/sqlite3.c	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr	file:
DbSetProperty	testdocs/sqlite3.c	/^#define DbSetProperty(/;"	d	file:
Deephemeralize	testdocs/sqlite3.c	/^#define Deephemeralize(/;"	d	file:
DistinctCtx	testdocs/sqlite3.c	/^struct DistinctCtx {$/;"	s	file:
DistinctCtx	testdocs/sqlite3.c	/^typedef struct DistinctCtx DistinctCtx;$/;"	t	typeref:struct:DistinctCtx	file:
EIGHT_BYTE_ALIGNMENT	testdocs/sqlite3.c	/^# define EIGHT_BYTE_ALIGNMENT(/;"	d	file:
ENC	testdocs/sqlite3.c	/^#define ENC(/;"	d	file:
EOPTARG	stdc.h	/^#define EOPTARG(/;"	d
EP_Agg	testdocs/sqlite3.c	/^#define EP_Agg /;"	d	file:
EP_Alias	testdocs/sqlite3.c	/^#define EP_Alias /;"	d	file:
EP_CanBeNull	testdocs/sqlite3.c	/^#define EP_CanBeNull /;"	d	file:
EP_Collate	testdocs/sqlite3.c	/^#define EP_Collate /;"	d	file:
EP_ConstFunc	testdocs/sqlite3.c	/^#define EP_ConstFunc /;"	d	file:
EP_DblQuoted	testdocs/sqlite3.c	/^#define EP_DblQuoted /;"	d	file:
EP_Distinct	testdocs/sqlite3.c	/^#define EP_Distinct /;"	d	file:
EP_Error	testdocs/sqlite3.c	/^#define EP_Error /;"	d	file:
EP_FromJoin	testdocs/sqlite3.c	/^#define EP_FromJoin /;"	d	file:
EP_Generic	testdocs/sqlite3.c	/^#define EP_Generic /;"	d	file:
EP_InfixFunc	testdocs/sqlite3.c	/^#define EP_InfixFunc /;"	d	file:
EP_IntValue	testdocs/sqlite3.c	/^#define EP_IntValue /;"	d	file:
EP_Leaf	testdocs/sqlite3.c	/^#define EP_Leaf /;"	d	file:
EP_MemToken	testdocs/sqlite3.c	/^#define EP_MemToken /;"	d	file:
EP_NoReduce	testdocs/sqlite3.c	/^#define EP_NoReduce /;"	d	file:
EP_Propagate	testdocs/sqlite3.c	/^#define EP_Propagate /;"	d	file:
EP_Reduced	testdocs/sqlite3.c	/^#define EP_Reduced /;"	d	file:
EP_Resolved	testdocs/sqlite3.c	/^#define EP_Resolved /;"	d	file:
EP_Skip	testdocs/sqlite3.c	/^#define EP_Skip /;"	d	file:
EP_Static	testdocs/sqlite3.c	/^#define EP_Static /;"	d	file:
EP_Subquery	testdocs/sqlite3.c	/^#define EP_Subquery /;"	d	file:
EP_TokenOnly	testdocs/sqlite3.c	/^#define EP_TokenOnly /;"	d	file:
EP_Unlikely	testdocs/sqlite3.c	/^#define EP_Unlikely /;"	d	file:
EP_VarSelect	testdocs/sqlite3.c	/^#define EP_VarSelect /;"	d	file:
EP_xIsSelect	testdocs/sqlite3.c	/^#define EP_xIsSelect /;"	d	file:
EXCLUSIVE_LOCK	testdocs/sqlite3.c	/^#define EXCLUSIVE_LOCK /;"	d	file:
EXPRDUP_REDUCE	testdocs/sqlite3.c	/^#define EXPRDUP_REDUCE /;"	d	file:
EXPR_FULLSIZE	testdocs/sqlite3.c	/^#define EXPR_FULLSIZE /;"	d	file:
EXPR_REDUCEDSIZE	testdocs/sqlite3.c	/^#define EXPR_REDUCEDSIZE /;"	d	file:
EXPR_TOKENONLYSIZE	testdocs/sqlite3.c	/^#define EXPR_TOKENONLYSIZE /;"	d	file:
EntropyGatherer	testdocs/sqlite3.c	/^struct EntropyGatherer {$/;"	s	file:
EntropyGatherer	testdocs/sqlite3.c	/^typedef struct EntropyGatherer EntropyGatherer;$/;"	t	typeref:struct:EntropyGatherer	file:
ExpandBlob	testdocs/sqlite3.c	/^  #define ExpandBlob(/;"	d	file:
Expr	testdocs/sqlite3.c	/^struct Expr {$/;"	s	file:
Expr	testdocs/sqlite3.c	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr	file:
ExprClearProperty	testdocs/sqlite3.c	/^#define ExprClearProperty(/;"	d	file:
ExprHasAllProperty	testdocs/sqlite3.c	/^#define ExprHasAllProperty(/;"	d	file:
ExprHasProperty	testdocs/sqlite3.c	/^#define ExprHasProperty(/;"	d	file:
ExprList	testdocs/sqlite3.c	/^struct ExprList {$/;"	s	file:
ExprList	testdocs/sqlite3.c	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList	file:
ExprList_item	testdocs/sqlite3.c	/^  struct ExprList_item { \/* For each expression in the list *\/$/;"	s	struct:ExprList	file:
ExprSetProperty	testdocs/sqlite3.c	/^#define ExprSetProperty(/;"	d	file:
ExprSetVVAProperty	testdocs/sqlite3.c	/^# define ExprSetVVAProperty(/;"	d	file:
ExprSpan	testdocs/sqlite3.c	/^struct ExprSpan {$/;"	s	file:
ExprSpan	testdocs/sqlite3.c	/^typedef struct ExprSpan ExprSpan;$/;"	t	typeref:struct:ExprSpan	file:
FILEHANDLEID	testdocs/sqlite3.c	/^#define FILEHANDLEID(/;"	d	file:
FILE_ATTRIBUTE_MASK	testdocs/sqlite3.c	/^# define FILE_ATTRIBUTE_MASK /;"	d	file:
FILE_FLAG_MASK	testdocs/sqlite3.c	/^# define FILE_FLAG_MASK /;"	d	file:
FKey	testdocs/sqlite3.c	/^struct FKey {$/;"	s	file:
FKey	testdocs/sqlite3.c	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey	file:
FLAG_SIGNED	testdocs/sqlite3.c	/^#define FLAG_SIGNED /;"	d	file:
FLAG_STRING	testdocs/sqlite3.c	/^#define FLAG_STRING /;"	d	file:
FMap	edit.h	/^} FMap;$/;"	t	typeref:struct:__anon1
FOREGUARD	testdocs/sqlite3.c	/^#define FOREGUARD /;"	d	file:
FOUR_BYTE_INT	testdocs/sqlite3.c	/^#define FOUR_BYTE_INT(/;"	d	file:
FOUR_BYTE_UINT	testdocs/sqlite3.c	/^#define FOUR_BYTE_UINT(/;"	d	file:
FTS3_AUX_SCHEMA	testdocs/sqlite3.c	/^#define FTS3_AUX_SCHEMA /;"	d	file:
FTS3_DOCID_SEARCH	testdocs/sqlite3.c	/^#define FTS3_DOCID_SEARCH /;"	d	file:
FTS3_EVAL_FILTER	testdocs/sqlite3.c	/^#define FTS3_EVAL_FILTER /;"	d	file:
FTS3_EVAL_MATCHINFO	testdocs/sqlite3.c	/^#define FTS3_EVAL_MATCHINFO /;"	d	file:
FTS3_EVAL_NEXT	testdocs/sqlite3.c	/^#define FTS3_EVAL_NEXT /;"	d	file:
FTS3_FULLSCAN_SEARCH	testdocs/sqlite3.c	/^#define FTS3_FULLSCAN_SEARCH /;"	d	file:
FTS3_FULLTEXT_SEARCH	testdocs/sqlite3.c	/^#define FTS3_FULLTEXT_SEARCH /;"	d	file:
FTS3_HASH_BINARY	testdocs/sqlite3.c	/^#define FTS3_HASH_BINARY /;"	d	file:
FTS3_HASH_STRING	testdocs/sqlite3.c	/^#define FTS3_HASH_STRING /;"	d	file:
FTS3_HAVE_DOCID_GE	testdocs/sqlite3.c	/^#define FTS3_HAVE_DOCID_GE /;"	d	file:
FTS3_HAVE_DOCID_LE	testdocs/sqlite3.c	/^#define FTS3_HAVE_DOCID_LE /;"	d	file:
FTS3_HAVE_LANGID	testdocs/sqlite3.c	/^#define FTS3_HAVE_LANGID /;"	d	file:
FTS3_MATCHINFO_AVGLENGTH	testdocs/sqlite3.c	/^#define FTS3_MATCHINFO_AVGLENGTH /;"	d	file:
FTS3_MATCHINFO_DEFAULT	testdocs/sqlite3.c	/^#define FTS3_MATCHINFO_DEFAULT /;"	d	file:
FTS3_MATCHINFO_HITS	testdocs/sqlite3.c	/^#define FTS3_MATCHINFO_HITS /;"	d	file:
FTS3_MATCHINFO_LCS	testdocs/sqlite3.c	/^#define FTS3_MATCHINFO_LCS /;"	d	file:
FTS3_MATCHINFO_LENGTH	testdocs/sqlite3.c	/^#define FTS3_MATCHINFO_LENGTH /;"	d	file:
FTS3_MATCHINFO_LHITS	testdocs/sqlite3.c	/^#define FTS3_MATCHINFO_LHITS /;"	d	file:
FTS3_MATCHINFO_LHITS_BM	testdocs/sqlite3.c	/^#define FTS3_MATCHINFO_LHITS_BM /;"	d	file:
FTS3_MATCHINFO_NCOL	testdocs/sqlite3.c	/^#define FTS3_MATCHINFO_NCOL /;"	d	file:
FTS3_MATCHINFO_NDOC	testdocs/sqlite3.c	/^#define FTS3_MATCHINFO_NDOC /;"	d	file:
FTS3_MATCHINFO_NPHRASE	testdocs/sqlite3.c	/^#define FTS3_MATCHINFO_NPHRASE /;"	d	file:
FTS3_MAX_PENDING_DATA	testdocs/sqlite3.c	/^#define FTS3_MAX_PENDING_DATA /;"	d	file:
FTS3_MERGE_COUNT	testdocs/sqlite3.c	/^#define FTS3_MERGE_COUNT /;"	d	file:
FTS3_NODE_CHUNKSIZE	testdocs/sqlite3.c	/^# define FTS3_NODE_CHUNKSIZE /;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	testdocs/sqlite3.c	/^# define FTS3_NODE_CHUNK_THRESHOLD /;"	d	file:
FTS3_NODE_PADDING	testdocs/sqlite3.c	/^#define FTS3_NODE_PADDING /;"	d	file:
FTS3_SEGCURSOR_ALL	testdocs/sqlite3.c	/^#define FTS3_SEGCURSOR_ALL /;"	d	file:
FTS3_SEGCURSOR_PENDING	testdocs/sqlite3.c	/^#define FTS3_SEGCURSOR_PENDING /;"	d	file:
FTS3_SEGDIR_MAXLEVEL	testdocs/sqlite3.c	/^#define FTS3_SEGDIR_MAXLEVEL /;"	d	file:
FTS3_SEGDIR_MAXLEVEL_STR	testdocs/sqlite3.c	/^#define FTS3_SEGDIR_MAXLEVEL_STR /;"	d	file:
FTS3_SEGMENT_COLUMN_FILTER	testdocs/sqlite3.c	/^#define FTS3_SEGMENT_COLUMN_FILTER /;"	d	file:
FTS3_SEGMENT_FIRST	testdocs/sqlite3.c	/^#define FTS3_SEGMENT_FIRST /;"	d	file:
FTS3_SEGMENT_IGNORE_EMPTY	testdocs/sqlite3.c	/^#define FTS3_SEGMENT_IGNORE_EMPTY /;"	d	file:
FTS3_SEGMENT_PREFIX	testdocs/sqlite3.c	/^#define FTS3_SEGMENT_PREFIX /;"	d	file:
FTS3_SEGMENT_REQUIRE_POS	testdocs/sqlite3.c	/^#define FTS3_SEGMENT_REQUIRE_POS /;"	d	file:
FTS3_SEGMENT_SCAN	testdocs/sqlite3.c	/^#define FTS3_SEGMENT_SCAN /;"	d	file:
FTS3_TOK_SCHEMA	testdocs/sqlite3.c	/^#define FTS3_TOK_SCHEMA /;"	d	file:
FTS3_VARINT_MAX	testdocs/sqlite3.c	/^#define FTS3_VARINT_MAX /;"	d	file:
FTS4AUX_EQ_CONSTRAINT	testdocs/sqlite3.c	/^#define FTS4AUX_EQ_CONSTRAINT /;"	d	file:
FTS4AUX_GE_CONSTRAINT	testdocs/sqlite3.c	/^#define FTS4AUX_GE_CONSTRAINT /;"	d	file:
FTS4AUX_LE_CONSTRAINT	testdocs/sqlite3.c	/^#define FTS4AUX_LE_CONSTRAINT /;"	d	file:
FTS5CSR_EOF	testdocs/sqlite3.c	/^#define FTS5CSR_EOF /;"	d	file:
FTS5CSR_FREE_ZRANK	testdocs/sqlite3.c	/^#define FTS5CSR_FREE_ZRANK /;"	d	file:
FTS5CSR_REQUIRE_CONTENT	testdocs/sqlite3.c	/^#define FTS5CSR_REQUIRE_CONTENT /;"	d	file:
FTS5CSR_REQUIRE_DOCSIZE	testdocs/sqlite3.c	/^#define FTS5CSR_REQUIRE_DOCSIZE /;"	d	file:
FTS5CSR_REQUIRE_INST	testdocs/sqlite3.c	/^#define FTS5CSR_REQUIRE_INST /;"	d	file:
FTS5CSR_REQUIRE_POSLIST	testdocs/sqlite3.c	/^#define FTS5CSR_REQUIRE_POSLIST /;"	d	file:
FTS5CSR_REQUIRE_RESEEK	testdocs/sqlite3.c	/^#define FTS5CSR_REQUIRE_RESEEK /;"	d	file:
FTS5INDEX_QUERY_DESC	testdocs/sqlite3.c	/^#define FTS5INDEX_QUERY_DESC /;"	d	file:
FTS5INDEX_QUERY_NOOUTPUT	testdocs/sqlite3.c	/^#define FTS5INDEX_QUERY_NOOUTPUT /;"	d	file:
FTS5INDEX_QUERY_PREFIX	testdocs/sqlite3.c	/^#define FTS5INDEX_QUERY_PREFIX /;"	d	file:
FTS5INDEX_QUERY_SCAN	testdocs/sqlite3.c	/^#define FTS5INDEX_QUERY_SCAN /;"	d	file:
FTS5INDEX_QUERY_SKIPEMPTY	testdocs/sqlite3.c	/^#define FTS5INDEX_QUERY_SKIPEMPTY /;"	d	file:
FTS5INDEX_QUERY_TEST_NOIDX	testdocs/sqlite3.c	/^#define FTS5INDEX_QUERY_TEST_NOIDX /;"	d	file:
FTS5TOKEN	testdocs/sqlite3.c	/^#define FTS5TOKEN /;"	d	file:
FTS5_AND	testdocs/sqlite3.c	/^#define FTS5_AND /;"	d	file:
FTS5_AVERAGES_ROWID	testdocs/sqlite3.c	/^#define FTS5_AVERAGES_ROWID /;"	d	file:
FTS5_BEGIN	testdocs/sqlite3.c	/^#define FTS5_BEGIN /;"	d	file:
FTS5_BI_MATCH	testdocs/sqlite3.c	/^#define FTS5_BI_MATCH /;"	d	file:
FTS5_BI_ORDER_DESC	testdocs/sqlite3.c	/^#define FTS5_BI_ORDER_DESC /;"	d	file:
FTS5_BI_ORDER_RANK	testdocs/sqlite3.c	/^#define FTS5_BI_ORDER_RANK /;"	d	file:
FTS5_BI_ORDER_ROWID	testdocs/sqlite3.c	/^#define FTS5_BI_ORDER_ROWID /;"	d	file:
FTS5_BI_RANK	testdocs/sqlite3.c	/^#define FTS5_BI_RANK /;"	d	file:
FTS5_BI_ROWID_EQ	testdocs/sqlite3.c	/^#define FTS5_BI_ROWID_EQ /;"	d	file:
FTS5_BI_ROWID_GE	testdocs/sqlite3.c	/^#define FTS5_BI_ROWID_GE /;"	d	file:
FTS5_BI_ROWID_LE	testdocs/sqlite3.c	/^#define FTS5_BI_ROWID_LE /;"	d	file:
FTS5_COLON	testdocs/sqlite3.c	/^#define FTS5_COLON /;"	d	file:
FTS5_COMMA	testdocs/sqlite3.c	/^#define FTS5_COMMA /;"	d	file:
FTS5_COMMIT	testdocs/sqlite3.c	/^#define FTS5_COMMIT /;"	d	file:
FTS5_CONTENT_EXTERNAL	testdocs/sqlite3.c	/^#define FTS5_CONTENT_EXTERNAL /;"	d	file:
FTS5_CONTENT_NONE	testdocs/sqlite3.c	/^#define FTS5_CONTENT_NONE /;"	d	file:
FTS5_CONTENT_NORMAL	testdocs/sqlite3.c	/^#define FTS5_CONTENT_NORMAL /;"	d	file:
FTS5_CORRUPT	testdocs/sqlite3.c	/^# define FTS5_CORRUPT /;"	d	file:
FTS5_CURRENT_VERSION	testdocs/sqlite3.c	/^#define FTS5_CURRENT_VERSION /;"	d	file:
FTS5_DATA_DLI_B	testdocs/sqlite3.c	/^#define FTS5_DATA_DLI_B /;"	d	file:
FTS5_DATA_HEIGHT_B	testdocs/sqlite3.c	/^#define FTS5_DATA_HEIGHT_B /;"	d	file:
FTS5_DATA_ID_B	testdocs/sqlite3.c	/^#define FTS5_DATA_ID_B /;"	d	file:
FTS5_DATA_PADDING	testdocs/sqlite3.c	/^#define FTS5_DATA_PADDING /;"	d	file:
FTS5_DATA_PAGE_B	testdocs/sqlite3.c	/^#define FTS5_DATA_PAGE_B /;"	d	file:
FTS5_DATA_ZERO_PADDING	testdocs/sqlite3.c	/^#define FTS5_DATA_ZERO_PADDING /;"	d	file:
FTS5_DEFAULT_AUTOMERGE	testdocs/sqlite3.c	/^#define FTS5_DEFAULT_AUTOMERGE /;"	d	file:
FTS5_DEFAULT_CRISISMERGE	testdocs/sqlite3.c	/^#define FTS5_DEFAULT_CRISISMERGE /;"	d	file:
FTS5_DEFAULT_HASHSIZE	testdocs/sqlite3.c	/^#define FTS5_DEFAULT_HASHSIZE /;"	d	file:
FTS5_DEFAULT_NEARDIST	testdocs/sqlite3.c	/^#define FTS5_DEFAULT_NEARDIST /;"	d	file:
FTS5_DEFAULT_PAGE_SIZE	testdocs/sqlite3.c	/^#define FTS5_DEFAULT_PAGE_SIZE /;"	d	file:
FTS5_DEFAULT_RANK	testdocs/sqlite3.c	/^#define FTS5_DEFAULT_RANK /;"	d	file:
FTS5_DEFAULT_USERMERGE	testdocs/sqlite3.c	/^#define FTS5_DEFAULT_USERMERGE /;"	d	file:
FTS5_DETAIL_COLUMNS	testdocs/sqlite3.c	/^#define FTS5_DETAIL_COLUMNS /;"	d	file:
FTS5_DETAIL_FULL	testdocs/sqlite3.c	/^#define FTS5_DETAIL_FULL /;"	d	file:
FTS5_DETAIL_NONE	testdocs/sqlite3.c	/^#define FTS5_DETAIL_NONE /;"	d	file:
FTS5_DLIDX_ROWID	testdocs/sqlite3.c	/^#define FTS5_DLIDX_ROWID(/;"	d	file:
FTS5_EOF	testdocs/sqlite3.c	/^#define FTS5_EOF /;"	d	file:
FTS5_LARGEST_INT64	testdocs/sqlite3.c	/^#define FTS5_LARGEST_INT64 /;"	d	file:
FTS5_LCP	testdocs/sqlite3.c	/^#define FTS5_LCP /;"	d	file:
FTS5_LOOKAHEAD_EOF	testdocs/sqlite3.c	/^#define FTS5_LOOKAHEAD_EOF /;"	d	file:
FTS5_LP	testdocs/sqlite3.c	/^#define FTS5_LP /;"	d	file:
FTS5_MAIN_PREFIX	testdocs/sqlite3.c	/^#define FTS5_MAIN_PREFIX /;"	d	file:
FTS5_MAX_PAGE_SIZE	testdocs/sqlite3.c	/^#define FTS5_MAX_PAGE_SIZE /;"	d	file:
FTS5_MAX_PREFIX_INDEXES	testdocs/sqlite3.c	/^#define FTS5_MAX_PREFIX_INDEXES /;"	d	file:
FTS5_MAX_SEGMENT	testdocs/sqlite3.c	/^#define FTS5_MAX_SEGMENT /;"	d	file:
FTS5_MAX_TOKEN_SIZE	testdocs/sqlite3.c	/^#define FTS5_MAX_TOKEN_SIZE /;"	d	file:
FTS5_MINUS	testdocs/sqlite3.c	/^#define FTS5_MINUS /;"	d	file:
FTS5_MIN_DLIDX_SIZE	testdocs/sqlite3.c	/^#define FTS5_MIN_DLIDX_SIZE /;"	d	file:
FTS5_NOINLINE	testdocs/sqlite3.c	/^# define FTS5_NOINLINE /;"	d	file:
FTS5_NOINLINE	testdocs/sqlite3.c	/^# define FTS5_NOINLINE$/;"	d	file:
FTS5_NOT	testdocs/sqlite3.c	/^#define FTS5_NOT /;"	d	file:
FTS5_OPT_WORK_UNIT	testdocs/sqlite3.c	/^#define FTS5_OPT_WORK_UNIT /;"	d	file:
FTS5_OR	testdocs/sqlite3.c	/^#define FTS5_OR /;"	d	file:
FTS5_PLAN_MATCH	testdocs/sqlite3.c	/^#define FTS5_PLAN_MATCH /;"	d	file:
FTS5_PLAN_ROWID	testdocs/sqlite3.c	/^#define FTS5_PLAN_ROWID /;"	d	file:
FTS5_PLAN_SCAN	testdocs/sqlite3.c	/^#define FTS5_PLAN_SCAN /;"	d	file:
FTS5_PLAN_SORTED_MATCH	testdocs/sqlite3.c	/^#define FTS5_PLAN_SORTED_MATCH /;"	d	file:
FTS5_PLAN_SOURCE	testdocs/sqlite3.c	/^#define FTS5_PLAN_SOURCE /;"	d	file:
FTS5_PLAN_SPECIAL	testdocs/sqlite3.c	/^#define FTS5_PLAN_SPECIAL /;"	d	file:
FTS5_PLUS	testdocs/sqlite3.c	/^#define FTS5_PLUS /;"	d	file:
FTS5_PORTER_MAX_TOKEN	testdocs/sqlite3.c	/^#define FTS5_PORTER_MAX_TOKEN /;"	d	file:
FTS5_POS2COLUMN	testdocs/sqlite3.c	/^#define FTS5_POS2COLUMN(/;"	d	file:
FTS5_POS2OFFSET	testdocs/sqlite3.c	/^#define FTS5_POS2OFFSET(/;"	d	file:
FTS5_RANK_NAME	testdocs/sqlite3.c	/^#define FTS5_RANK_NAME /;"	d	file:
FTS5_RCP	testdocs/sqlite3.c	/^#define FTS5_RCP /;"	d	file:
FTS5_RELEASE	testdocs/sqlite3.c	/^#define FTS5_RELEASE /;"	d	file:
FTS5_ROLLBACK	testdocs/sqlite3.c	/^#define FTS5_ROLLBACK /;"	d	file:
FTS5_ROLLBACKTO	testdocs/sqlite3.c	/^#define FTS5_ROLLBACKTO /;"	d	file:
FTS5_ROWID_NAME	testdocs/sqlite3.c	/^#define FTS5_ROWID_NAME /;"	d	file:
FTS5_RP	testdocs/sqlite3.c	/^#define FTS5_RP /;"	d	file:
FTS5_SAVEPOINT	testdocs/sqlite3.c	/^#define FTS5_SAVEPOINT /;"	d	file:
FTS5_SEGITER_ONETERM	testdocs/sqlite3.c	/^#define FTS5_SEGITER_ONETERM /;"	d	file:
FTS5_SEGITER_REVERSE	testdocs/sqlite3.c	/^#define FTS5_SEGITER_REVERSE /;"	d	file:
FTS5_SEGMENT_ROWID	testdocs/sqlite3.c	/^#define FTS5_SEGMENT_ROWID(/;"	d	file:
FTS5_STAR	testdocs/sqlite3.c	/^#define FTS5_STAR /;"	d	file:
FTS5_STMT_DELETE_CONTENT	testdocs/sqlite3.c	/^#define FTS5_STMT_DELETE_CONTENT /;"	d	file:
FTS5_STMT_DELETE_DOCSIZE	testdocs/sqlite3.c	/^#define FTS5_STMT_DELETE_DOCSIZE /;"	d	file:
FTS5_STMT_INSERT_CONTENT	testdocs/sqlite3.c	/^#define FTS5_STMT_INSERT_CONTENT /;"	d	file:
FTS5_STMT_LOOKUP	testdocs/sqlite3.c	/^#define FTS5_STMT_LOOKUP /;"	d	file:
FTS5_STMT_LOOKUP_DOCSIZE	testdocs/sqlite3.c	/^#define FTS5_STMT_LOOKUP_DOCSIZE /;"	d	file:
FTS5_STMT_REPLACE_CONFIG	testdocs/sqlite3.c	/^#define FTS5_STMT_REPLACE_CONFIG /;"	d	file:
FTS5_STMT_REPLACE_CONTENT	testdocs/sqlite3.c	/^#define FTS5_STMT_REPLACE_CONTENT /;"	d	file:
FTS5_STMT_REPLACE_DOCSIZE	testdocs/sqlite3.c	/^#define FTS5_STMT_REPLACE_DOCSIZE /;"	d	file:
FTS5_STMT_SCAN	testdocs/sqlite3.c	/^#define FTS5_STMT_SCAN /;"	d	file:
FTS5_STMT_SCAN_ASC	testdocs/sqlite3.c	/^#define FTS5_STMT_SCAN_ASC /;"	d	file:
FTS5_STMT_SCAN_DESC	testdocs/sqlite3.c	/^#define FTS5_STMT_SCAN_DESC /;"	d	file:
FTS5_STRING	testdocs/sqlite3.c	/^#define FTS5_STRING /;"	d	file:
FTS5_STRUCTURE_ROWID	testdocs/sqlite3.c	/^#define FTS5_STRUCTURE_ROWID /;"	d	file:
FTS5_SYNC	testdocs/sqlite3.c	/^#define FTS5_SYNC /;"	d	file:
FTS5_TERM	testdocs/sqlite3.c	/^#define FTS5_TERM /;"	d	file:
FTS5_TOKENIZE_AUX	testdocs/sqlite3.c	/^#define FTS5_TOKENIZE_AUX /;"	d	file:
FTS5_TOKENIZE_DOCUMENT	testdocs/sqlite3.c	/^#define FTS5_TOKENIZE_DOCUMENT /;"	d	file:
FTS5_TOKENIZE_PREFIX	testdocs/sqlite3.c	/^#define FTS5_TOKENIZE_PREFIX /;"	d	file:
FTS5_TOKENIZE_QUERY	testdocs/sqlite3.c	/^#define FTS5_TOKENIZE_QUERY /;"	d	file:
FTS5_TOKEN_COLOCATED	testdocs/sqlite3.c	/^#define FTS5_TOKEN_COLOCATED /;"	d	file:
FTS5_VOCAB_COL	testdocs/sqlite3.c	/^#define FTS5_VOCAB_COL /;"	d	file:
FTS5_VOCAB_COL_SCHEMA	testdocs/sqlite3.c	/^#define FTS5_VOCAB_COL_SCHEMA /;"	d	file:
FTS5_VOCAB_ROW	testdocs/sqlite3.c	/^#define FTS5_VOCAB_ROW /;"	d	file:
FTS5_VOCAB_ROW_SCHEMA	testdocs/sqlite3.c	/^#define FTS5_VOCAB_ROW_SCHEMA /;"	d	file:
FTS5_VOCAB_TERM_EQ	testdocs/sqlite3.c	/^#define FTS5_VOCAB_TERM_EQ /;"	d	file:
FTS5_VOCAB_TERM_GE	testdocs/sqlite3.c	/^#define FTS5_VOCAB_TERM_GE /;"	d	file:
FTS5_VOCAB_TERM_LE	testdocs/sqlite3.c	/^#define FTS5_VOCAB_TERM_LE /;"	d	file:
FTS5_WORK_UNIT	testdocs/sqlite3.c	/^#define FTS5_WORK_UNIT /;"	d	file:
FTSQUERY_AND	testdocs/sqlite3.c	/^#define FTSQUERY_AND /;"	d	file:
FTSQUERY_NEAR	testdocs/sqlite3.c	/^#define FTSQUERY_NEAR /;"	d	file:
FTSQUERY_NOT	testdocs/sqlite3.c	/^#define FTSQUERY_NOT /;"	d	file:
FTSQUERY_OR	testdocs/sqlite3.c	/^#define FTSQUERY_OR /;"	d	file:
FTSQUERY_PHRASE	testdocs/sqlite3.c	/^#define FTSQUERY_PHRASE /;"	d	file:
FTS_CORRUPT_VTAB	testdocs/sqlite3.c	/^# define FTS_CORRUPT_VTAB /;"	d	file:
FTS_MAX_APPENDABLE_HEIGHT	testdocs/sqlite3.c	/^#define FTS_MAX_APPENDABLE_HEIGHT /;"	d	file:
FTS_STAT_AUTOINCRMERGE	testdocs/sqlite3.c	/^#define FTS_STAT_AUTOINCRMERGE /;"	d	file:
FTS_STAT_DOCTOTAL	testdocs/sqlite3.c	/^#define FTS_STAT_DOCTOTAL /;"	d	file:
FTS_STAT_INCRMERGEHINT	testdocs/sqlite3.c	/^#define FTS_STAT_INCRMERGEHINT /;"	d	file:
FULLY_WITHIN	testdocs/sqlite3.c	/^#define FULLY_WITHIN /;"	d	file:
FUNCTION	testdocs/sqlite3.c	/^#define FUNCTION(/;"	d	file:
FUNCTION2	testdocs/sqlite3.c	/^#define FUNCTION2(/;"	d	file:
FUNC_PERFECT_MATCH	testdocs/sqlite3.c	/^#define FUNC_PERFECT_MATCH /;"	d	file:
Failed	atf.h	/^static unsigned int Failed = 0;$/;"	v
FileChunk	testdocs/sqlite3.c	/^struct FileChunk {$/;"	s	file:
FileChunk	testdocs/sqlite3.c	/^typedef struct FileChunk FileChunk;$/;"	t	typeref:struct:FileChunk	file:
FilePoint	testdocs/sqlite3.c	/^struct FilePoint {$/;"	s	file:
FilePoint	testdocs/sqlite3.c	/^typedef struct FilePoint FilePoint;$/;"	t	typeref:struct:FilePoint	file:
Fts3Cursor	testdocs/sqlite3.c	/^struct Fts3Cursor {$/;"	s	file:
Fts3Cursor	testdocs/sqlite3.c	/^typedef struct Fts3Cursor Fts3Cursor;$/;"	t	typeref:struct:Fts3Cursor	file:
Fts3DeferredToken	testdocs/sqlite3.c	/^struct Fts3DeferredToken {$/;"	s	file:
Fts3DeferredToken	testdocs/sqlite3.c	/^typedef struct Fts3DeferredToken Fts3DeferredToken;$/;"	t	typeref:struct:Fts3DeferredToken	file:
Fts3Doclist	testdocs/sqlite3.c	/^struct Fts3Doclist {$/;"	s	file:
Fts3Doclist	testdocs/sqlite3.c	/^typedef struct Fts3Doclist Fts3Doclist;$/;"	t	typeref:struct:Fts3Doclist	file:
Fts3Expr	testdocs/sqlite3.c	/^struct Fts3Expr {$/;"	s	file:
Fts3Expr	testdocs/sqlite3.c	/^typedef struct Fts3Expr Fts3Expr;$/;"	t	typeref:struct:Fts3Expr	file:
Fts3Hash	testdocs/sqlite3.c	/^struct Fts3Hash {$/;"	s	file:
Fts3Hash	testdocs/sqlite3.c	/^typedef struct Fts3Hash Fts3Hash;$/;"	t	typeref:struct:Fts3Hash	file:
Fts3HashElem	testdocs/sqlite3.c	/^struct Fts3HashElem {$/;"	s	file:
Fts3HashElem	testdocs/sqlite3.c	/^typedef struct Fts3HashElem Fts3HashElem;$/;"	t	typeref:struct:Fts3HashElem	file:
Fts3Index	testdocs/sqlite3.c	/^  struct Fts3Index {$/;"	s	struct:Fts3Table	file:
Fts3MultiSegReader	testdocs/sqlite3.c	/^struct Fts3MultiSegReader {$/;"	s	file:
Fts3MultiSegReader	testdocs/sqlite3.c	/^typedef struct Fts3MultiSegReader Fts3MultiSegReader;$/;"	t	typeref:struct:Fts3MultiSegReader	file:
Fts3Phrase	testdocs/sqlite3.c	/^struct Fts3Phrase {$/;"	s	file:
Fts3Phrase	testdocs/sqlite3.c	/^typedef struct Fts3Phrase Fts3Phrase;$/;"	t	typeref:struct:Fts3Phrase	file:
Fts3PhraseToken	testdocs/sqlite3.c	/^struct Fts3PhraseToken {$/;"	s	file:
Fts3PhraseToken	testdocs/sqlite3.c	/^typedef struct Fts3PhraseToken Fts3PhraseToken;$/;"	t	typeref:struct:Fts3PhraseToken	file:
Fts3SegFilter	testdocs/sqlite3.c	/^struct Fts3SegFilter {$/;"	s	file:
Fts3SegFilter	testdocs/sqlite3.c	/^typedef struct Fts3SegFilter Fts3SegFilter;$/;"	t	typeref:struct:Fts3SegFilter	file:
Fts3SegReader	testdocs/sqlite3.c	/^struct Fts3SegReader {$/;"	s	file:
Fts3SegReader	testdocs/sqlite3.c	/^typedef struct Fts3SegReader Fts3SegReader;$/;"	t	typeref:struct:Fts3SegReader	file:
Fts3Table	testdocs/sqlite3.c	/^struct Fts3Table {$/;"	s	file:
Fts3Table	testdocs/sqlite3.c	/^typedef struct Fts3Table Fts3Table;$/;"	t	typeref:struct:Fts3Table	file:
Fts3TokenAndCost	testdocs/sqlite3.c	/^struct Fts3TokenAndCost {$/;"	s	file:
Fts3TokenAndCost	testdocs/sqlite3.c	/^typedef struct Fts3TokenAndCost Fts3TokenAndCost;$/;"	t	typeref:struct:Fts3TokenAndCost	file:
Fts3auxColstats	testdocs/sqlite3.c	/^  struct Fts3auxColstats {$/;"	s	struct:Fts3auxCursor	file:
Fts3auxCursor	testdocs/sqlite3.c	/^struct Fts3auxCursor {$/;"	s	file:
Fts3auxCursor	testdocs/sqlite3.c	/^typedef struct Fts3auxCursor Fts3auxCursor;$/;"	t	typeref:struct:Fts3auxCursor	file:
Fts3auxTable	testdocs/sqlite3.c	/^struct Fts3auxTable {$/;"	s	file:
Fts3auxTable	testdocs/sqlite3.c	/^typedef struct Fts3auxTable Fts3auxTable;$/;"	t	typeref:struct:Fts3auxTable	file:
Fts3tokCursor	testdocs/sqlite3.c	/^struct Fts3tokCursor {$/;"	s	file:
Fts3tokCursor	testdocs/sqlite3.c	/^typedef struct Fts3tokCursor Fts3tokCursor;$/;"	t	typeref:struct:Fts3tokCursor	file:
Fts3tokTable	testdocs/sqlite3.c	/^struct Fts3tokTable {$/;"	s	file:
Fts3tokTable	testdocs/sqlite3.c	/^typedef struct Fts3tokTable Fts3tokTable;$/;"	t	typeref:struct:Fts3tokTable	file:
Fts5Auxdata	testdocs/sqlite3.c	/^struct Fts5Auxdata {$/;"	s	file:
Fts5Auxdata	testdocs/sqlite3.c	/^typedef struct Fts5Auxdata Fts5Auxdata;$/;"	t	typeref:struct:Fts5Auxdata	file:
Fts5Auxiliary	testdocs/sqlite3.c	/^struct Fts5Auxiliary {$/;"	s	file:
Fts5Auxiliary	testdocs/sqlite3.c	/^typedef struct Fts5Auxiliary Fts5Auxiliary;$/;"	t	typeref:struct:Fts5Auxiliary	file:
Fts5Bm25Data	testdocs/sqlite3.c	/^struct Fts5Bm25Data {$/;"	s	file:
Fts5Bm25Data	testdocs/sqlite3.c	/^typedef struct Fts5Bm25Data Fts5Bm25Data;$/;"	t	typeref:struct:Fts5Bm25Data	file:
Fts5Buffer	testdocs/sqlite3.c	/^struct Fts5Buffer {$/;"	s	file:
Fts5Buffer	testdocs/sqlite3.c	/^typedef struct Fts5Buffer Fts5Buffer;$/;"	t	typeref:struct:Fts5Buffer	file:
Fts5CResult	testdocs/sqlite3.c	/^struct Fts5CResult {$/;"	s	file:
Fts5CResult	testdocs/sqlite3.c	/^typedef struct Fts5CResult Fts5CResult;$/;"	t	typeref:struct:Fts5CResult	file:
Fts5Colset	testdocs/sqlite3.c	/^struct Fts5Colset {$/;"	s	file:
Fts5Colset	testdocs/sqlite3.c	/^typedef struct Fts5Colset Fts5Colset;$/;"	t	typeref:struct:Fts5Colset	file:
Fts5Config	testdocs/sqlite3.c	/^struct Fts5Config {$/;"	s	file:
Fts5Config	testdocs/sqlite3.c	/^typedef struct Fts5Config Fts5Config;$/;"	t	typeref:struct:Fts5Config	file:
Fts5Context	testdocs/sqlite3.c	/^typedef struct Fts5Context Fts5Context;$/;"	t	typeref:struct:Fts5Context	file:
Fts5Cursor	testdocs/sqlite3.c	/^struct Fts5Cursor {$/;"	s	file:
Fts5Cursor	testdocs/sqlite3.c	/^typedef struct Fts5Cursor Fts5Cursor;$/;"	t	typeref:struct:Fts5Cursor	file:
Fts5Data	testdocs/sqlite3.c	/^struct Fts5Data {$/;"	s	file:
Fts5Data	testdocs/sqlite3.c	/^typedef struct Fts5Data Fts5Data;$/;"	t	typeref:struct:Fts5Data	file:
Fts5DlidxIter	testdocs/sqlite3.c	/^struct Fts5DlidxIter {$/;"	s	file:
Fts5DlidxIter	testdocs/sqlite3.c	/^typedef struct Fts5DlidxIter Fts5DlidxIter;$/;"	t	typeref:struct:Fts5DlidxIter	file:
Fts5DlidxLvl	testdocs/sqlite3.c	/^struct Fts5DlidxLvl {$/;"	s	file:
Fts5DlidxLvl	testdocs/sqlite3.c	/^typedef struct Fts5DlidxLvl Fts5DlidxLvl;$/;"	t	typeref:struct:Fts5DlidxLvl	file:
Fts5DlidxWriter	testdocs/sqlite3.c	/^struct Fts5DlidxWriter {$/;"	s	file:
Fts5DlidxWriter	testdocs/sqlite3.c	/^typedef struct Fts5DlidxWriter Fts5DlidxWriter;$/;"	t	typeref:struct:Fts5DlidxWriter	file:
Fts5DoclistIter	testdocs/sqlite3.c	/^struct Fts5DoclistIter {$/;"	s	file:
Fts5DoclistIter	testdocs/sqlite3.c	/^typedef struct Fts5DoclistIter Fts5DoclistIter;$/;"	t	typeref:struct:Fts5DoclistIter	file:
Fts5Enum	testdocs/sqlite3.c	/^struct Fts5Enum {$/;"	s	file:
Fts5Enum	testdocs/sqlite3.c	/^typedef struct Fts5Enum Fts5Enum;$/;"	t	typeref:struct:Fts5Enum	file:
Fts5Expr	testdocs/sqlite3.c	/^struct Fts5Expr {$/;"	s	file:
Fts5Expr	testdocs/sqlite3.c	/^typedef struct Fts5Expr Fts5Expr;$/;"	t	typeref:struct:Fts5Expr	file:
Fts5ExprCtx	testdocs/sqlite3.c	/^struct Fts5ExprCtx {$/;"	s	file:
Fts5ExprCtx	testdocs/sqlite3.c	/^typedef struct Fts5ExprCtx Fts5ExprCtx;$/;"	t	typeref:struct:Fts5ExprCtx	file:
Fts5ExprNearset	testdocs/sqlite3.c	/^struct Fts5ExprNearset {$/;"	s	file:
Fts5ExprNearset	testdocs/sqlite3.c	/^typedef struct Fts5ExprNearset Fts5ExprNearset;$/;"	t	typeref:struct:Fts5ExprNearset	file:
Fts5ExprNode	testdocs/sqlite3.c	/^struct Fts5ExprNode {$/;"	s	file:
Fts5ExprNode	testdocs/sqlite3.c	/^typedef struct Fts5ExprNode Fts5ExprNode;$/;"	t	typeref:struct:Fts5ExprNode	file:
Fts5ExprPhrase	testdocs/sqlite3.c	/^struct Fts5ExprPhrase {$/;"	s	file:
Fts5ExprPhrase	testdocs/sqlite3.c	/^typedef struct Fts5ExprPhrase Fts5ExprPhrase;$/;"	t	typeref:struct:Fts5ExprPhrase	file:
Fts5ExprTerm	testdocs/sqlite3.c	/^struct Fts5ExprTerm {$/;"	s	file:
Fts5ExprTerm	testdocs/sqlite3.c	/^typedef struct Fts5ExprTerm Fts5ExprTerm;$/;"	t	typeref:struct:Fts5ExprTerm	file:
Fts5ExtensionApi	testdocs/sqlite3.c	/^struct Fts5ExtensionApi {$/;"	s	file:
Fts5ExtensionApi	testdocs/sqlite3.c	/^typedef struct Fts5ExtensionApi Fts5ExtensionApi;$/;"	t	typeref:struct:Fts5ExtensionApi	file:
Fts5FlushCtx	testdocs/sqlite3.c	/^struct Fts5FlushCtx {$/;"	s	file:
Fts5FlushCtx	testdocs/sqlite3.c	/^typedef struct Fts5FlushCtx Fts5FlushCtx;$/;"	t	typeref:struct:Fts5FlushCtx	file:
Fts5Global	testdocs/sqlite3.c	/^struct Fts5Global {$/;"	s	file:
Fts5Global	testdocs/sqlite3.c	/^typedef struct Fts5Global Fts5Global;$/;"	t	typeref:struct:Fts5Global	file:
Fts5Hash	testdocs/sqlite3.c	/^struct Fts5Hash {$/;"	s	file:
Fts5Hash	testdocs/sqlite3.c	/^typedef struct Fts5Hash Fts5Hash;$/;"	t	typeref:struct:Fts5Hash	file:
Fts5HashEntry	testdocs/sqlite3.c	/^struct Fts5HashEntry {$/;"	s	file:
Fts5HashEntry	testdocs/sqlite3.c	/^typedef struct Fts5HashEntry Fts5HashEntry;$/;"	t	typeref:struct:Fts5HashEntry	file:
Fts5Index	testdocs/sqlite3.c	/^struct Fts5Index {$/;"	s	file:
Fts5Index	testdocs/sqlite3.c	/^typedef struct Fts5Index Fts5Index;$/;"	t	typeref:struct:Fts5Index	file:
Fts5IndexIter	testdocs/sqlite3.c	/^struct Fts5IndexIter {$/;"	s	file:
Fts5IndexIter	testdocs/sqlite3.c	/^typedef struct Fts5IndexIter Fts5IndexIter;$/;"	t	typeref:struct:Fts5IndexIter	file:
Fts5InsertCtx	testdocs/sqlite3.c	/^struct Fts5InsertCtx {$/;"	s	file:
Fts5InsertCtx	testdocs/sqlite3.c	/^typedef struct Fts5InsertCtx Fts5InsertCtx;$/;"	t	typeref:struct:Fts5InsertCtx	file:
Fts5IntegrityCtx	testdocs/sqlite3.c	/^struct Fts5IntegrityCtx {$/;"	s	file:
Fts5IntegrityCtx	testdocs/sqlite3.c	/^typedef struct Fts5IntegrityCtx Fts5IntegrityCtx;$/;"	t	typeref:struct:Fts5IntegrityCtx	file:
Fts5Iter	testdocs/sqlite3.c	/^struct Fts5Iter {$/;"	s	file:
Fts5Iter	testdocs/sqlite3.c	/^typedef struct Fts5Iter Fts5Iter;$/;"	t	typeref:struct:Fts5Iter	file:
Fts5LookaheadReader	testdocs/sqlite3.c	/^struct Fts5LookaheadReader {$/;"	s	file:
Fts5LookaheadReader	testdocs/sqlite3.c	/^typedef struct Fts5LookaheadReader Fts5LookaheadReader;$/;"	t	typeref:struct:Fts5LookaheadReader	file:
Fts5MatchPhrase	testdocs/sqlite3.c	/^struct Fts5MatchPhrase {$/;"	s	file:
Fts5NearTrimmer	testdocs/sqlite3.c	/^struct Fts5NearTrimmer {$/;"	s	file:
Fts5NearTrimmer	testdocs/sqlite3.c	/^typedef struct Fts5NearTrimmer Fts5NearTrimmer;$/;"	t	typeref:struct:Fts5NearTrimmer	file:
Fts5NodeIsString	testdocs/sqlite3.c	/^#define Fts5NodeIsString(/;"	d	file:
Fts5PageWriter	testdocs/sqlite3.c	/^struct Fts5PageWriter {$/;"	s	file:
Fts5PageWriter	testdocs/sqlite3.c	/^typedef struct Fts5PageWriter Fts5PageWriter;$/;"	t	typeref:struct:Fts5PageWriter	file:
Fts5Parse	testdocs/sqlite3.c	/^struct Fts5Parse {$/;"	s	file:
Fts5Parse	testdocs/sqlite3.c	/^typedef struct Fts5Parse Fts5Parse;$/;"	t	typeref:struct:Fts5Parse	file:
Fts5PhraseIter	testdocs/sqlite3.c	/^struct Fts5PhraseIter {$/;"	s	file:
Fts5PhraseIter	testdocs/sqlite3.c	/^typedef struct Fts5PhraseIter Fts5PhraseIter;$/;"	t	typeref:struct:Fts5PhraseIter	file:
Fts5PoslistPopulator	testdocs/sqlite3.c	/^struct Fts5PoslistPopulator {$/;"	s	file:
Fts5PoslistPopulator	testdocs/sqlite3.c	/^typedef struct Fts5PoslistPopulator Fts5PoslistPopulator;$/;"	t	typeref:struct:Fts5PoslistPopulator	file:
Fts5PoslistReader	testdocs/sqlite3.c	/^struct Fts5PoslistReader {$/;"	s	file:
Fts5PoslistReader	testdocs/sqlite3.c	/^typedef struct Fts5PoslistReader Fts5PoslistReader;$/;"	t	typeref:struct:Fts5PoslistReader	file:
Fts5PoslistWriter	testdocs/sqlite3.c	/^struct Fts5PoslistWriter {$/;"	s	file:
Fts5PoslistWriter	testdocs/sqlite3.c	/^typedef struct Fts5PoslistWriter Fts5PoslistWriter;$/;"	t	typeref:struct:Fts5PoslistWriter	file:
Fts5SFinder	testdocs/sqlite3.c	/^struct Fts5SFinder {$/;"	s	file:
Fts5SFinder	testdocs/sqlite3.c	/^typedef struct Fts5SFinder Fts5SFinder;$/;"	t	typeref:struct:Fts5SFinder	file:
Fts5SegIter	testdocs/sqlite3.c	/^struct Fts5SegIter {$/;"	s	file:
Fts5SegIter	testdocs/sqlite3.c	/^typedef struct Fts5SegIter Fts5SegIter;$/;"	t	typeref:struct:Fts5SegIter	file:
Fts5SegWriter	testdocs/sqlite3.c	/^struct Fts5SegWriter {$/;"	s	file:
Fts5SegWriter	testdocs/sqlite3.c	/^typedef struct Fts5SegWriter Fts5SegWriter;$/;"	t	typeref:struct:Fts5SegWriter	file:
Fts5Sorter	testdocs/sqlite3.c	/^struct Fts5Sorter {$/;"	s	file:
Fts5Sorter	testdocs/sqlite3.c	/^typedef struct Fts5Sorter Fts5Sorter;$/;"	t	typeref:struct:Fts5Sorter	file:
Fts5Storage	testdocs/sqlite3.c	/^struct Fts5Storage {$/;"	s	file:
Fts5Storage	testdocs/sqlite3.c	/^typedef struct Fts5Storage Fts5Storage;$/;"	t	typeref:struct:Fts5Storage	file:
Fts5Structure	testdocs/sqlite3.c	/^struct Fts5Structure {$/;"	s	file:
Fts5Structure	testdocs/sqlite3.c	/^typedef struct Fts5Structure Fts5Structure;$/;"	t	typeref:struct:Fts5Structure	file:
Fts5StructureLevel	testdocs/sqlite3.c	/^struct Fts5StructureLevel {$/;"	s	file:
Fts5StructureLevel	testdocs/sqlite3.c	/^typedef struct Fts5StructureLevel Fts5StructureLevel;$/;"	t	typeref:struct:Fts5StructureLevel	file:
Fts5StructureSegment	testdocs/sqlite3.c	/^struct Fts5StructureSegment {$/;"	s	file:
Fts5StructureSegment	testdocs/sqlite3.c	/^typedef struct Fts5StructureSegment Fts5StructureSegment;$/;"	t	typeref:struct:Fts5StructureSegment	file:
Fts5Table	testdocs/sqlite3.c	/^struct Fts5Table {$/;"	s	file:
Fts5Table	testdocs/sqlite3.c	/^typedef struct Fts5Table Fts5Table;$/;"	t	typeref:struct:Fts5Table	file:
Fts5Termset	testdocs/sqlite3.c	/^struct Fts5Termset {$/;"	s	file:
Fts5Termset	testdocs/sqlite3.c	/^typedef struct Fts5Termset Fts5Termset;$/;"	t	typeref:struct:Fts5Termset	file:
Fts5TermsetEntry	testdocs/sqlite3.c	/^struct Fts5TermsetEntry {$/;"	s	file:
Fts5TermsetEntry	testdocs/sqlite3.c	/^typedef struct Fts5TermsetEntry Fts5TermsetEntry;$/;"	t	typeref:struct:Fts5TermsetEntry	file:
Fts5Token	testdocs/sqlite3.c	/^struct Fts5Token {$/;"	s	file:
Fts5Token	testdocs/sqlite3.c	/^typedef struct Fts5Token Fts5Token;$/;"	t	typeref:struct:Fts5Token	file:
Fts5Tokenizer	testdocs/sqlite3.c	/^typedef struct Fts5Tokenizer Fts5Tokenizer;$/;"	t	typeref:struct:Fts5Tokenizer	file:
Fts5TokenizerModule	testdocs/sqlite3.c	/^struct Fts5TokenizerModule {$/;"	s	file:
Fts5TokenizerModule	testdocs/sqlite3.c	/^typedef struct Fts5TokenizerModule Fts5TokenizerModule;$/;"	t	typeref:struct:Fts5TokenizerModule	file:
Fts5TransactionState	testdocs/sqlite3.c	/^struct Fts5TransactionState {$/;"	s	file:
Fts5VocabCursor	testdocs/sqlite3.c	/^struct Fts5VocabCursor {$/;"	s	file:
Fts5VocabCursor	testdocs/sqlite3.c	/^typedef struct Fts5VocabCursor Fts5VocabCursor;$/;"	t	typeref:struct:Fts5VocabCursor	file:
Fts5VocabTable	testdocs/sqlite3.c	/^struct Fts5VocabTable {$/;"	s	file:
Fts5VocabTable	testdocs/sqlite3.c	/^typedef struct Fts5VocabTable Fts5VocabTable;$/;"	t	typeref:struct:Fts5VocabTable	file:
FuncDef	testdocs/sqlite3.c	/^struct FuncDef {$/;"	s	file:
FuncDef	testdocs/sqlite3.c	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef	file:
FuncDefHash	testdocs/sqlite3.c	/^struct FuncDefHash {$/;"	s	file:
FuncDefHash	testdocs/sqlite3.c	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash	file:
FuncDestructor	testdocs/sqlite3.c	/^struct FuncDestructor {$/;"	s	file:
FuncDestructor	testdocs/sqlite3.c	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	typeref:struct:FuncDestructor	file:
GCC_VERSION	testdocs/sqlite3.c	/^# define GCC_VERSION /;"	d	file:
GETVARINT_INIT	testdocs/sqlite3.c	/^#define GETVARINT_INIT(/;"	d	file:
GETVARINT_STEP	testdocs/sqlite3.c	/^#define GETVARINT_STEP(/;"	d	file:
GIT	testdocs/waf	/^GIT="1fa2e6f7e1420e3fc64b29bf7abef531220da538"$/;"	v
GLOBAL	testdocs/sqlite3.c	/^  #define GLOBAL(/;"	d	file:
HANDLE_TO_WINFILE	testdocs/sqlite3.c	/^#define HANDLE_TO_WINFILE(/;"	d	file:
HASHSIZE	testdocs/sqlite3.c	/^#define HASHSIZE /;"	d	file:
HASHTABLE_HASH_1	testdocs/sqlite3.c	/^#define HASHTABLE_HASH_1 /;"	d	file:
HASHTABLE_NPAGE	testdocs/sqlite3.c	/^#define HASHTABLE_NPAGE /;"	d	file:
HASHTABLE_NPAGE_ONE	testdocs/sqlite3.c	/^#define HASHTABLE_NPAGE_ONE /;"	d	file:
HASHTABLE_NSLOT	testdocs/sqlite3.c	/^#define HASHTABLE_NSLOT /;"	d	file:
HASH_APPEND	testdocs/sqlite3.c	/^#define HASH_APPEND(/;"	d	file:
HAS_UPDATE_HOOK	testdocs/sqlite3.c	/^# define HAS_UPDATE_HOOK(/;"	d	file:
HAVE_FCHOWN	testdocs/sqlite3.c	/^#define HAVE_FCHOWN /;"	d	file:
HAVE_FULLFSYNC	testdocs/sqlite3.c	/^# define HAVE_FULLFSYNC /;"	d	file:
HAVE_GETHOSTUUID	testdocs/sqlite3.c	/^#    define HAVE_GETHOSTUUID /;"	d	file:
HAVE_LOCALTIME_S	testdocs/sqlite3.c	/^#define HAVE_LOCALTIME_S /;"	d	file:
HAVE_LOCALTIME_S	testdocs/sqlite3.c	/^#undef  HAVE_LOCALTIME_S$/;"	d	file:
HAVE_LSTAT	testdocs/sqlite3.c	/^#define HAVE_LSTAT /;"	d	file:
HAVE_MREMAP	testdocs/sqlite3.c	/^#  define HAVE_MREMAP /;"	d	file:
HAVE_PREAD	testdocs/sqlite3.c	/^# define HAVE_PREAD /;"	d	file:
HAVE_PWRITE	testdocs/sqlite3.c	/^# define HAVE_PWRITE /;"	d	file:
HAVE_READLINK	testdocs/sqlite3.c	/^#define HAVE_READLINK /;"	d	file:
HAVE_UTIME	testdocs/sqlite3.c	/^#define HAVE_UTIME /;"	d	file:
HasRowid	testdocs/sqlite3.c	/^#define HasRowid(/;"	d	file:
Hash	testdocs/sqlite3.c	/^struct Hash {$/;"	s	file:
Hash	testdocs/sqlite3.c	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash	file:
HashElem	testdocs/sqlite3.c	/^struct HashElem {$/;"	s	file:
HashElem	testdocs/sqlite3.c	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem	file:
HavingToWhereCtx	testdocs/sqlite3.c	/^struct HavingToWhereCtx {$/;"	s	file:
HighlightContext	testdocs/sqlite3.c	/^struct HighlightContext {$/;"	s	file:
HighlightContext	testdocs/sqlite3.c	/^typedef struct HighlightContext HighlightContext;$/;"	t	typeref:struct:HighlightContext	file:
IGNORE	atf.h	/^#define IGNORE(/;"	d
INCLUDE_DEFS	atf.h	/^#undef INCLUDE_DEFS$/;"	d
INCLUDE_DEFS	testbuf.c	/^#define INCLUDE_DEFS$/;"	d	file:
INCRINIT_NORMAL	testdocs/sqlite3.c	/^#define INCRINIT_NORMAL /;"	d	file:
INCRINIT_ROOT	testdocs/sqlite3.c	/^#define INCRINIT_ROOT /;"	d	file:
INCRINIT_TASK	testdocs/sqlite3.c	/^#define INCRINIT_TASK /;"	d	file:
INSTALL	testdocs/waf	/^INSTALL=''$/;"	v
INT16_TYPE	testdocs/sqlite3.c	/^#  define INT16_TYPE /;"	d	file:
INT8_TYPE	testdocs/sqlite3.c	/^#  define INT8_TYPE /;"	d	file:
INTERFACE	testdocs/sqlite3.c	/^# define INTERFACE /;"	d	file:
INT_464269060799999	testdocs/sqlite3.c	/^#define INT_464269060799999 /;"	d	file:
INVALID_FILE_ATTRIBUTES	testdocs/sqlite3.c	/^# define INVALID_FILE_ATTRIBUTES /;"	d	file:
INVALID_SET_FILE_POINTER	testdocs/sqlite3.c	/^# define INVALID_SET_FILE_POINTER /;"	d	file:
IN_DECLARE_VTAB	testdocs/sqlite3.c	/^  #define IN_DECLARE_VTAB /;"	d	file:
IN_INDEX_EPH	testdocs/sqlite3.c	/^#define IN_INDEX_EPH /;"	d	file:
IN_INDEX_INDEX_ASC	testdocs/sqlite3.c	/^#define IN_INDEX_INDEX_ASC /;"	d	file:
IN_INDEX_INDEX_DESC	testdocs/sqlite3.c	/^#define IN_INDEX_INDEX_DESC /;"	d	file:
IN_INDEX_LOOP	testdocs/sqlite3.c	/^#define IN_INDEX_LOOP /;"	d	file:
IN_INDEX_MEMBERSHIP	testdocs/sqlite3.c	/^#define IN_INDEX_MEMBERSHIP /;"	d	file:
IN_INDEX_NOOP	testdocs/sqlite3.c	/^#define IN_INDEX_NOOP /;"	d	file:
IN_INDEX_NOOP_OK	testdocs/sqlite3.c	/^#define IN_INDEX_NOOP_OK /;"	d	file:
IN_INDEX_ROWID	testdocs/sqlite3.c	/^#define IN_INDEX_ROWID /;"	d	file:
IOMETHODS	testdocs/sqlite3.c	/^#define IOMETHODS(/;"	d	file:
IOTRACE	testdocs/sqlite3.c	/^# define IOTRACE(/;"	d	file:
ISAUTOVACUUM	testdocs/sqlite3.c	/^#define ISAUTOVACUUM /;"	d	file:
IS_BIG_INT	testdocs/sqlite3.c	/^#define IS_BIG_INT(/;"	d	file:
IS_LOCK_ERROR	testdocs/sqlite3.c	/^#define IS_LOCK_ERROR(/;"	d	file:
IcuCursor	testdocs/sqlite3.c	/^struct IcuCursor {$/;"	s	file:
IcuCursor	testdocs/sqlite3.c	/^typedef struct IcuCursor IcuCursor;$/;"	t	typeref:struct:IcuCursor	file:
IcuTokenizer	testdocs/sqlite3.c	/^struct IcuTokenizer {$/;"	s	file:
IcuTokenizer	testdocs/sqlite3.c	/^typedef struct IcuTokenizer IcuTokenizer;$/;"	t	typeref:struct:IcuTokenizer	file:
IdChar	testdocs/sqlite3.c	/^#define IdChar(/;"	d	file:
IdList	testdocs/sqlite3.c	/^struct IdList {$/;"	s	file:
IdList	testdocs/sqlite3.c	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList	file:
IdList_item	testdocs/sqlite3.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:
IdxCover	testdocs/sqlite3.c	/^struct IdxCover {$/;"	s	file:
IdxExprTrans	testdocs/sqlite3.c	/^typedef struct IdxExprTrans {$/;"	s	file:
IdxExprTrans	testdocs/sqlite3.c	/^} IdxExprTrans;$/;"	t	typeref:struct:IdxExprTrans	file:
IfNotOmitAV	testdocs/sqlite3.c	/^#define IfNotOmitAV(/;"	d	file:
IgnorableOrderby	testdocs/sqlite3.c	/^#define IgnorableOrderby(/;"	d	file:
InLoop	testdocs/sqlite3.c	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon27::__anon28	file:
IncrMerger	testdocs/sqlite3.c	/^struct IncrMerger {$/;"	s	file:
IncrMerger	testdocs/sqlite3.c	/^typedef struct IncrMerger IncrMerger;       \/* Read & merge multiple PMAs *\/$/;"	t	typeref:struct:IncrMerger	file:
Incrblob	testdocs/sqlite3.c	/^struct Incrblob {$/;"	s	file:
Incrblob	testdocs/sqlite3.c	/^typedef struct Incrblob Incrblob;$/;"	t	typeref:struct:Incrblob	file:
IncrmergeWriter	testdocs/sqlite3.c	/^struct IncrmergeWriter {$/;"	s	file:
IncrmergeWriter	testdocs/sqlite3.c	/^typedef struct IncrmergeWriter IncrmergeWriter;$/;"	t	typeref:struct:IncrmergeWriter	file:
Index	testdocs/sqlite3.c	/^struct Index {$/;"	s	file:
Index	testdocs/sqlite3.c	/^typedef struct Index Index;$/;"	t	typeref:struct:Index	file:
IndexSample	testdocs/sqlite3.c	/^struct IndexSample {$/;"	s	file:
IndexSample	testdocs/sqlite3.c	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample	file:
InitData	testdocs/sqlite3.c	/^} InitData;$/;"	t	typeref:struct:__anon16	file:
IntegrityCk	testdocs/sqlite3.c	/^struct IntegrityCk {$/;"	s	file:
IntegrityCk	testdocs/sqlite3.c	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	typeref:struct:IntegrityCk	file:
IsHiddenColumn	testdocs/sqlite3.c	/^#  define IsHiddenColumn(/;"	d	file:
IsOrdinaryHiddenColumn	testdocs/sqlite3.c	/^#  define IsOrdinaryHiddenColumn(/;"	d	file:
IsPowerOfTwo	testdocs/sqlite3.c	/^#define IsPowerOfTwo(/;"	d	file:
IsPrimaryKeyIndex	testdocs/sqlite3.c	/^#define IsPrimaryKeyIndex(/;"	d	file:
IsStat3	testdocs/sqlite3.c	/^# define IsStat3 /;"	d	file:
IsStat34	testdocs/sqlite3.c	/^#define IsStat34 /;"	d	file:
IsStat4	testdocs/sqlite3.c	/^# define IsStat4 /;"	d	file:
IsUniqueIndex	testdocs/sqlite3.c	/^#define IsUniqueIndex(/;"	d	file:
IsVirtual	testdocs/sqlite3.c	/^#  define IsVirtual(/;"	d	file:
JEACH_ATOM	testdocs/sqlite3.c	/^#define JEACH_ATOM /;"	d	file:
JEACH_FULLKEY	testdocs/sqlite3.c	/^#define JEACH_FULLKEY /;"	d	file:
JEACH_ID	testdocs/sqlite3.c	/^#define JEACH_ID /;"	d	file:
JEACH_JSON	testdocs/sqlite3.c	/^#define JEACH_JSON /;"	d	file:
JEACH_KEY	testdocs/sqlite3.c	/^#define JEACH_KEY /;"	d	file:
JEACH_PARENT	testdocs/sqlite3.c	/^#define JEACH_PARENT /;"	d	file:
JEACH_PATH	testdocs/sqlite3.c	/^#define JEACH_PATH /;"	d	file:
JEACH_ROOT	testdocs/sqlite3.c	/^#define JEACH_ROOT /;"	d	file:
JEACH_TYPE	testdocs/sqlite3.c	/^#define JEACH_TYPE /;"	d	file:
JEACH_VALUE	testdocs/sqlite3.c	/^#define JEACH_VALUE /;"	d	file:
JNODE_APPEND	testdocs/sqlite3.c	/^#define JNODE_APPEND /;"	d	file:
JNODE_ESCAPE	testdocs/sqlite3.c	/^#define JNODE_ESCAPE /;"	d	file:
JNODE_LABEL	testdocs/sqlite3.c	/^#define JNODE_LABEL /;"	d	file:
JNODE_PATCH	testdocs/sqlite3.c	/^#define JNODE_PATCH /;"	d	file:
JNODE_RAW	testdocs/sqlite3.c	/^#define JNODE_RAW /;"	d	file:
JNODE_REMOVE	testdocs/sqlite3.c	/^#define JNODE_REMOVE /;"	d	file:
JNODE_REPLACE	testdocs/sqlite3.c	/^#define JNODE_REPLACE /;"	d	file:
JOURNAL_HDR_SZ	testdocs/sqlite3.c	/^#define JOURNAL_HDR_SZ(/;"	d	file:
JOURNAL_PG_SZ	testdocs/sqlite3.c	/^#define JOURNAL_PG_SZ(/;"	d	file:
JSON_ARRAY	testdocs/sqlite3.c	/^#define JSON_ARRAY /;"	d	file:
JSON_CACHE_ID	testdocs/sqlite3.c	/^#define JSON_CACHE_ID /;"	d	file:
JSON_FALSE	testdocs/sqlite3.c	/^#define JSON_FALSE /;"	d	file:
JSON_INT	testdocs/sqlite3.c	/^#define JSON_INT /;"	d	file:
JSON_MAX_DEPTH	testdocs/sqlite3.c	/^#define JSON_MAX_DEPTH /;"	d	file:
JSON_NOINLINE	testdocs/sqlite3.c	/^#  define JSON_NOINLINE /;"	d	file:
JSON_NOINLINE	testdocs/sqlite3.c	/^#  define JSON_NOINLINE$/;"	d	file:
JSON_NULL	testdocs/sqlite3.c	/^#define JSON_NULL /;"	d	file:
JSON_OBJECT	testdocs/sqlite3.c	/^#define JSON_OBJECT /;"	d	file:
JSON_REAL	testdocs/sqlite3.c	/^#define JSON_REAL /;"	d	file:
JSON_STRING	testdocs/sqlite3.c	/^#define JSON_STRING /;"	d	file:
JSON_SUBTYPE	testdocs/sqlite3.c	/^#define JSON_SUBTYPE /;"	d	file:
JSON_TRUE	testdocs/sqlite3.c	/^#define JSON_TRUE /;"	d	file:
JT_CROSS	testdocs/sqlite3.c	/^#define JT_CROSS /;"	d	file:
JT_ERROR	testdocs/sqlite3.c	/^#define JT_ERROR /;"	d	file:
JT_INNER	testdocs/sqlite3.c	/^#define JT_INNER /;"	d	file:
JT_LEFT	testdocs/sqlite3.c	/^#define JT_LEFT /;"	d	file:
JT_NATURAL	testdocs/sqlite3.c	/^#define JT_NATURAL /;"	d	file:
JT_OUTER	testdocs/sqlite3.c	/^#define JT_OUTER /;"	d	file:
JT_RIGHT	testdocs/sqlite3.c	/^#define JT_RIGHT /;"	d	file:
JsonEachCursor	testdocs/sqlite3.c	/^struct JsonEachCursor {$/;"	s	file:
JsonEachCursor	testdocs/sqlite3.c	/^typedef struct JsonEachCursor JsonEachCursor;$/;"	t	typeref:struct:JsonEachCursor	file:
JsonNode	testdocs/sqlite3.c	/^struct JsonNode {$/;"	s	file:
JsonNode	testdocs/sqlite3.c	/^typedef struct JsonNode JsonNode;$/;"	t	typeref:struct:JsonNode	file:
JsonParse	testdocs/sqlite3.c	/^struct JsonParse {$/;"	s	file:
JsonParse	testdocs/sqlite3.c	/^typedef struct JsonParse JsonParse;$/;"	t	typeref:struct:JsonParse	file:
JsonString	testdocs/sqlite3.c	/^struct JsonString {$/;"	s	file:
JsonString	testdocs/sqlite3.c	/^typedef struct JsonString JsonString;$/;"	t	typeref:struct:JsonString	file:
KeyClass	testdocs/sqlite3.c	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass	file:
KeyInfo	testdocs/sqlite3.c	/^struct KeyInfo {$/;"	s	file:
KeyInfo	testdocs/sqlite3.c	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo	file:
LARGEST_INT64	testdocs/sqlite3.c	/^# define LARGEST_INT64 /;"	d	file:
LARGEST_INT64	testdocs/sqlite3.c	/^#define LARGEST_INT64 /;"	d	file:
LCS_ITERATOR_FINISHED	testdocs/sqlite3.c	/^#define LCS_ITERATOR_FINISHED /;"	d	file:
LEFT	edit.h	/^    LEFT  = -1,$/;"	e	enum:__anon7
LIKEFUNC	testdocs/sqlite3.c	/^#define LIKEFUNC(/;"	d	file:
LOCATE_NOERR	testdocs/sqlite3.c	/^#define LOCATE_NOERR /;"	d	file:
LOCATE_VIEW	testdocs/sqlite3.c	/^#define LOCATE_VIEW /;"	d	file:
LOCKFILE_EXCLUSIVE_LOCK	testdocs/sqlite3.c	/^# define LOCKFILE_EXCLUSIVE_LOCK /;"	d	file:
LOCKFILE_FAIL_IMMEDIATELY	testdocs/sqlite3.c	/^# define LOCKFILE_FAIL_IMMEDIATELY /;"	d	file:
LOGMAX	testdocs/sqlite3.c	/^#define LOGMAX /;"	d	file:
LONGDOUBLE_TYPE	testdocs/sqlite3.c	/^# define LONGDOUBLE_TYPE /;"	d	file:
LcsIterator	testdocs/sqlite3.c	/^struct LcsIterator {$/;"	s	file:
LcsIterator	testdocs/sqlite3.c	/^typedef struct LcsIterator LcsIterator;$/;"	t	typeref:struct:LcsIterator	file:
LimitVal	testdocs/sqlite3.c	/^struct LimitVal {$/;"	s	file:
LoadDoclistCtx	testdocs/sqlite3.c	/^struct LoadDoclistCtx {$/;"	s	file:
LoadDoclistCtx	testdocs/sqlite3.c	/^typedef struct LoadDoclistCtx LoadDoclistCtx;$/;"	t	typeref:struct:LoadDoclistCtx	file:
Log	edit.h	/^typedef struct Log {$/;"	s
Log	edit.h	/^} Log;$/;"	t	typeref:struct:Log
LogEst	testdocs/sqlite3.c	/^typedef INT16_TYPE LogEst;$/;"	t	file:
Lookaside	testdocs/sqlite3.c	/^struct Lookaside {$/;"	s	file:
Lookaside	testdocs/sqlite3.c	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside	file:
LookasideSlot	testdocs/sqlite3.c	/^struct LookasideSlot {$/;"	s	file:
LookasideSlot	testdocs/sqlite3.c	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot	file:
M	testdocs/sqlite3.c	/^  int Y, M, D;        \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
MASKBIT	testdocs/sqlite3.c	/^#define MASKBIT(/;"	d	file:
MASKBIT32	testdocs/sqlite3.c	/^#define MASKBIT32(/;"	d	file:
MASTER_NAME	testdocs/sqlite3.c	/^#define MASTER_NAME /;"	d	file:
MASTER_ROOT	testdocs/sqlite3.c	/^#define MASTER_ROOT /;"	d	file:
MAX	testdocs/sqlite3.c	/^# define MAX(/;"	d	file:
MAX	testdocs/sqlite3.c	/^#define MAX(/;"	d	file:
MAX_6BYTE	testdocs/sqlite3.c	/^#   define MAX_6BYTE /;"	d	file:
MAX_INCR_PHRASE_TOKENS	testdocs/sqlite3.c	/^#define MAX_INCR_PHRASE_TOKENS /;"	d	file:
MAX_PATH	testdocs/sqlite3.c	/^#  define MAX_PATH /;"	d	file:
MAX_PATHNAME	testdocs/sqlite3.c	/^#define MAX_PATHNAME /;"	d	file:
MAX_ROWID	testdocs/sqlite3.c	/^#   define MAX_ROWID /;"	d	file:
MAX_SECTOR_SIZE	testdocs/sqlite3.c	/^#define MAX_SECTOR_SIZE /;"	d	file:
MEM5LINK	testdocs/sqlite3.c	/^#define MEM5LINK(/;"	d	file:
MEMCELLSIZE	testdocs/sqlite3.c	/^#define MEMCELLSIZE /;"	d	file:
MEMDB	testdocs/sqlite3.c	/^# define MEMDB /;"	d	file:
MEMJOURNAL_DFLT_FILECHUNKSIZE	testdocs/sqlite3.c	/^#define MEMJOURNAL_DFLT_FILECHUNKSIZE /;"	d	file:
MEMTYPE_HEAP	testdocs/sqlite3.c	/^#define MEMTYPE_HEAP /;"	d	file:
MEMTYPE_LOOKASIDE	testdocs/sqlite3.c	/^#define MEMTYPE_LOOKASIDE /;"	d	file:
MEMTYPE_PCACHE	testdocs/sqlite3.c	/^#define MEMTYPE_PCACHE /;"	d	file:
MEMTYPE_SCRATCH	testdocs/sqlite3.c	/^#define MEMTYPE_SCRATCH /;"	d	file:
MEM_AffMask	testdocs/sqlite3.c	/^#define MEM_AffMask /;"	d	file:
MEM_Agg	testdocs/sqlite3.c	/^#define MEM_Agg /;"	d	file:
MEM_Blob	testdocs/sqlite3.c	/^#define MEM_Blob /;"	d	file:
MEM_Cleared	testdocs/sqlite3.c	/^#define MEM_Cleared /;"	d	file:
MEM_Dyn	testdocs/sqlite3.c	/^#define MEM_Dyn /;"	d	file:
MEM_Ephem	testdocs/sqlite3.c	/^#define MEM_Ephem /;"	d	file:
MEM_Frame	testdocs/sqlite3.c	/^#define MEM_Frame /;"	d	file:
MEM_Int	testdocs/sqlite3.c	/^#define MEM_Int /;"	d	file:
MEM_Null	testdocs/sqlite3.c	/^#define MEM_Null /;"	d	file:
MEM_Real	testdocs/sqlite3.c	/^#define MEM_Real /;"	d	file:
MEM_RowSet	testdocs/sqlite3.c	/^#define MEM_RowSet /;"	d	file:
MEM_Static	testdocs/sqlite3.c	/^#define MEM_Static /;"	d	file:
MEM_Str	testdocs/sqlite3.c	/^#define MEM_Str /;"	d	file:
MEM_Subtype	testdocs/sqlite3.c	/^#define MEM_Subtype /;"	d	file:
MEM_Term	testdocs/sqlite3.c	/^#define MEM_Term /;"	d	file:
MEM_TypeMask	testdocs/sqlite3.c	/^#define MEM_TypeMask /;"	d	file:
MEM_Undefined	testdocs/sqlite3.c	/^#define MEM_Undefined /;"	d	file:
MEM_Zero	testdocs/sqlite3.c	/^  #define MEM_Zero /;"	d	file:
MEM_Zero	testdocs/sqlite3.c	/^  #undef MEM_Zero$/;"	d	file:
MEM_Zero	testdocs/sqlite3.c	/^#define MEM_Zero /;"	d	file:
MIN	testdocs/sqlite3.c	/^# define MIN(/;"	d	file:
MIN	testdocs/sqlite3.c	/^#define MIN(/;"	d	file:
MSVC_VERSION	testdocs/sqlite3.c	/^# define MSVC_VERSION /;"	d	file:
MUTEX_LOGIC	testdocs/sqlite3.c	/^#define MUTEX_LOGIC(/;"	d	file:
MX_CELL	testdocs/sqlite3.c	/^#define MX_CELL(/;"	d	file:
MX_CELL_SIZE	testdocs/sqlite3.c	/^#define MX_CELL_SIZE(/;"	d	file:
MX_CLOSE_ATTEMPT	testdocs/sqlite3.c	/^#define MX_CLOSE_ATTEMPT /;"	d	file:
MX_SMALL	testdocs/sqlite3.c	/^#define MX_SMALL /;"	d	file:
MatchInfo	testdocs/sqlite3.c	/^struct MatchInfo {$/;"	s	file:
MatchInfo	testdocs/sqlite3.c	/^typedef struct MatchInfo MatchInfo;$/;"	t	typeref:struct:MatchInfo	file:
MatchinfoBuffer	testdocs/sqlite3.c	/^struct MatchinfoBuffer {$/;"	s	file:
MatchinfoBuffer	testdocs/sqlite3.c	/^typedef struct MatchinfoBuffer MatchinfoBuffer;$/;"	t	typeref:struct:MatchinfoBuffer	file:
Mem	testdocs/sqlite3.c	/^typedef struct sqlite3_value Mem;$/;"	t	typeref:struct:sqlite3_value	file:
Mem0Global	testdocs/sqlite3.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem3Block	testdocs/sqlite3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	testdocs/sqlite3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Global	testdocs/sqlite3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	testdocs/sqlite3.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	testdocs/sqlite3.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	testdocs/sqlite3.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
MemBlockHdr	testdocs/sqlite3.c	/^struct MemBlockHdr {$/;"	s	file:
MemJournal	testdocs/sqlite3.c	/^struct MemJournal {$/;"	s	file:
MemJournal	testdocs/sqlite3.c	/^typedef struct MemJournal MemJournal;$/;"	t	typeref:struct:MemJournal	file:
MemJournalMethods	testdocs/sqlite3.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
MemPage	testdocs/sqlite3.c	/^struct MemPage {$/;"	s	file:
MemPage	testdocs/sqlite3.c	/^typedef struct MemPage MemPage;$/;"	t	typeref:struct:MemPage	file:
MemSetTypeFlag	testdocs/sqlite3.c	/^#define MemSetTypeFlag(/;"	d	file:
MemValue	testdocs/sqlite3.c	/^  union MemValue {$/;"	u	struct:sqlite3_value	file:
MergeEngine	testdocs/sqlite3.c	/^struct MergeEngine {$/;"	s	file:
MergeEngine	testdocs/sqlite3.c	/^typedef struct MergeEngine MergeEngine;     \/* Merge PMAs together *\/$/;"	t	typeref:struct:MergeEngine	file:
Module	testdocs/sqlite3.c	/^struct Module {$/;"	s	file:
Module	testdocs/sqlite3.c	/^typedef struct Module Module;$/;"	t	typeref:struct:Module	file:
NB	testdocs/sqlite3.c	/^#define NB /;"	d	file:
NCELL	testdocs/sqlite3.c	/^#define NCELL(/;"	d	file:
NCSIZE	testdocs/sqlite3.c	/^#define NCSIZE /;"	d	file:
NC_AllowAgg	testdocs/sqlite3.c	/^#define NC_AllowAgg /;"	d	file:
NC_HasAgg	testdocs/sqlite3.c	/^#define NC_HasAgg /;"	d	file:
NC_IdxExpr	testdocs/sqlite3.c	/^#define NC_IdxExpr /;"	d	file:
NC_InAggFunc	testdocs/sqlite3.c	/^#define NC_InAggFunc /;"	d	file:
NC_IsCheck	testdocs/sqlite3.c	/^#define NC_IsCheck /;"	d	file:
NC_MinMaxAgg	testdocs/sqlite3.c	/^#define NC_MinMaxAgg /;"	d	file:
NC_PartIdx	testdocs/sqlite3.c	/^#define NC_PartIdx /;"	d	file:
NC_VarSelect	testdocs/sqlite3.c	/^#define NC_VarSelect /;"	d	file:
NDEBUG	testdocs/sqlite3.c	/^# define NDEBUG /;"	d	file:
NDEBUG	testdocs/sqlite3.c	/^# undef NDEBUG$/;"	d	file:
NDELAY	testdocs/sqlite3.c	/^# define NDELAY /;"	d	file:
NEVER	testdocs/sqlite3.c	/^# define NEVER(/;"	d	file:
NEVER	testdocs/sqlite3.c	/^#define NEVER(/;"	d	file:
NN	testdocs/sqlite3.c	/^#define NN /;"	d	file:
NOT_WITHIN	testdocs/sqlite3.c	/^#define NOT_WITHIN /;"	d	file:
NO_LOCK	testdocs/sqlite3.c	/^#define NO_LOCK /;"	d	file:
NTDDI_WIN8	testdocs/sqlite3.c	/^#  define NTDDI_WIN8 /;"	d	file:
NTDDI_WINBLUE	testdocs/sqlite3.c	/^#  define NTDDI_WINBLUE /;"	d	file:
NTDDI_WINTHRESHOLD	testdocs/sqlite3.c	/^#  define NTDDI_WINTHRESHOLD /;"	d	file:
N_HASH	testdocs/sqlite3.c	/^#define N_HASH /;"	d	file:
N_OR_COST	testdocs/sqlite3.c	/^#define N_OR_COST /;"	d	file:
N_SORT_BUCKET	testdocs/sqlite3.c	/^#define N_SORT_BUCKET /;"	d	file:
N_STATEMENT	testdocs/sqlite3.c	/^  #define N_STATEMENT /;"	d	file:
NameContext	testdocs/sqlite3.c	/^struct NameContext {$/;"	s	file:
NameContext	testdocs/sqlite3.c	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext	file:
NodeReader	testdocs/sqlite3.c	/^struct NodeReader {$/;"	s	file:
NodeReader	testdocs/sqlite3.c	/^typedef struct NodeReader NodeReader;$/;"	t	typeref:struct:NodeReader	file:
NodeWriter	testdocs/sqlite3.c	/^struct NodeWriter {$/;"	s	file:
NodeWriter	testdocs/sqlite3.c	/^typedef struct NodeWriter NodeWriter;$/;"	t	typeref:struct:NodeWriter	file:
OE_Abort	testdocs/sqlite3.c	/^#define OE_Abort /;"	d	file:
OE_Cascade	testdocs/sqlite3.c	/^#define OE_Cascade /;"	d	file:
OE_Default	testdocs/sqlite3.c	/^#define OE_Default /;"	d	file:
OE_Fail	testdocs/sqlite3.c	/^#define OE_Fail /;"	d	file:
OE_Ignore	testdocs/sqlite3.c	/^#define OE_Ignore /;"	d	file:
OE_None	testdocs/sqlite3.c	/^#define OE_None /;"	d	file:
OE_Replace	testdocs/sqlite3.c	/^#define OE_Replace /;"	d	file:
OE_Restrict	testdocs/sqlite3.c	/^#define OE_Restrict /;"	d	file:
OE_Rollback	testdocs/sqlite3.c	/^#define OE_Rollback /;"	d	file:
OE_SetDflt	testdocs/sqlite3.c	/^#define OE_SetDflt /;"	d	file:
OE_SetNull	testdocs/sqlite3.c	/^#define OE_SetNull /;"	d	file:
OMIT_TEMPDB	testdocs/sqlite3.c	/^#define OMIT_TEMPDB /;"	d	file:
ONEPASS_MULTI	testdocs/sqlite3.c	/^#define ONEPASS_MULTI /;"	d	file:
ONEPASS_OFF	testdocs/sqlite3.c	/^#define ONEPASS_OFF /;"	d	file:
ONEPASS_SINGLE	testdocs/sqlite3.c	/^#define ONEPASS_SINGLE /;"	d	file:
ONE_BYTE_INT	testdocs/sqlite3.c	/^#define ONE_BYTE_INT(/;"	d	file:
ONLY_IF_REALLOC_STRESS	testdocs/sqlite3.c	/^# define ONLY_IF_REALLOC_STRESS(/;"	d	file:
OPFLAG_APPEND	testdocs/sqlite3.c	/^#define OPFLAG_APPEND /;"	d	file:
OPFLAG_AUXDELETE	testdocs/sqlite3.c	/^#define OPFLAG_AUXDELETE /;"	d	file:
OPFLAG_BULKCSR	testdocs/sqlite3.c	/^#define OPFLAG_BULKCSR /;"	d	file:
OPFLAG_EPHEM	testdocs/sqlite3.c	/^#define OPFLAG_EPHEM /;"	d	file:
OPFLAG_FORDELETE	testdocs/sqlite3.c	/^#define OPFLAG_FORDELETE /;"	d	file:
OPFLAG_ISNOOP	testdocs/sqlite3.c	/^#define OPFLAG_ISNOOP /;"	d	file:
OPFLAG_ISUPDATE	testdocs/sqlite3.c	/^#define OPFLAG_ISUPDATE /;"	d	file:
OPFLAG_LASTROWID	testdocs/sqlite3.c	/^#define OPFLAG_LASTROWID /;"	d	file:
OPFLAG_LENGTHARG	testdocs/sqlite3.c	/^#define OPFLAG_LENGTHARG /;"	d	file:
OPFLAG_NCHANGE	testdocs/sqlite3.c	/^#define OPFLAG_NCHANGE /;"	d	file:
OPFLAG_P2ISREG	testdocs/sqlite3.c	/^#define OPFLAG_P2ISREG /;"	d	file:
OPFLAG_PERMUTE	testdocs/sqlite3.c	/^#define OPFLAG_PERMUTE /;"	d	file:
OPFLAG_SAVEPOSITION	testdocs/sqlite3.c	/^#define OPFLAG_SAVEPOSITION /;"	d	file:
OPFLAG_SEEKEQ	testdocs/sqlite3.c	/^#define OPFLAG_SEEKEQ /;"	d	file:
OPFLAG_TYPEOFARG	testdocs/sqlite3.c	/^#define OPFLAG_TYPEOFARG /;"	d	file:
OPFLAG_USESEEKRESULT	testdocs/sqlite3.c	/^#define OPFLAG_USESEEKRESULT /;"	d	file:
OPFLG_IN1	testdocs/sqlite3.c	/^#define OPFLG_IN1 /;"	d	file:
OPFLG_IN2	testdocs/sqlite3.c	/^#define OPFLG_IN2 /;"	d	file:
OPFLG_IN3	testdocs/sqlite3.c	/^#define OPFLG_IN3 /;"	d	file:
OPFLG_INITIALIZER	testdocs/sqlite3.c	/^#define OPFLG_INITIALIZER /;"	d	file:
OPFLG_JUMP	testdocs/sqlite3.c	/^#define OPFLG_JUMP /;"	d	file:
OPFLG_OUT2	testdocs/sqlite3.c	/^#define OPFLG_OUT2 /;"	d	file:
OPFLG_OUT3	testdocs/sqlite3.c	/^#define OPFLG_OUT3 /;"	d	file:
OPTARG	stdc.h	/^#define OPTARG(/;"	d
OPTBEGIN	stdc.h	/^#define OPTBEGIN /;"	d
OPTC	stdc.h	/^#define OPTC(/;"	d
OPTEND	stdc.h	/^#define OPTEND /;"	d
OPTLONG	stdc.h	/^#define OPTLONG /;"	d
OPTNUM	stdc.h	/^#define OPTNUM /;"	d
OP_Add	testdocs/sqlite3.c	/^#define OP_Add /;"	d	file:
OP_AddImm	testdocs/sqlite3.c	/^#define OP_AddImm /;"	d	file:
OP_Affinity	testdocs/sqlite3.c	/^#define OP_Affinity /;"	d	file:
OP_AggFinal	testdocs/sqlite3.c	/^#define OP_AggFinal /;"	d	file:
OP_AggStep	testdocs/sqlite3.c	/^#define OP_AggStep /;"	d	file:
OP_AggStep0	testdocs/sqlite3.c	/^#define OP_AggStep0 /;"	d	file:
OP_And	testdocs/sqlite3.c	/^#define OP_And /;"	d	file:
OP_AutoCommit	testdocs/sqlite3.c	/^#define OP_AutoCommit /;"	d	file:
OP_BitAnd	testdocs/sqlite3.c	/^#define OP_BitAnd /;"	d	file:
OP_BitNot	testdocs/sqlite3.c	/^#define OP_BitNot /;"	d	file:
OP_BitOr	testdocs/sqlite3.c	/^#define OP_BitOr /;"	d	file:
OP_Blob	testdocs/sqlite3.c	/^#define OP_Blob /;"	d	file:
OP_Cast	testdocs/sqlite3.c	/^#define OP_Cast /;"	d	file:
OP_Checkpoint	testdocs/sqlite3.c	/^#define OP_Checkpoint /;"	d	file:
OP_Clear	testdocs/sqlite3.c	/^#define OP_Clear /;"	d	file:
OP_Close	testdocs/sqlite3.c	/^#define OP_Close /;"	d	file:
OP_CollSeq	testdocs/sqlite3.c	/^#define OP_CollSeq /;"	d	file:
OP_Column	testdocs/sqlite3.c	/^#define OP_Column /;"	d	file:
OP_ColumnsUsed	testdocs/sqlite3.c	/^#define OP_ColumnsUsed /;"	d	file:
OP_Compare	testdocs/sqlite3.c	/^#define OP_Compare /;"	d	file:
OP_Concat	testdocs/sqlite3.c	/^#define OP_Concat /;"	d	file:
OP_Copy	testdocs/sqlite3.c	/^#define OP_Copy /;"	d	file:
OP_Count	testdocs/sqlite3.c	/^#define OP_Count /;"	d	file:
OP_CreateIndex	testdocs/sqlite3.c	/^#define OP_CreateIndex /;"	d	file:
OP_CreateTable	testdocs/sqlite3.c	/^#define OP_CreateTable /;"	d	file:
OP_CursorHint	testdocs/sqlite3.c	/^#define OP_CursorHint /;"	d	file:
OP_DecrJumpZero	testdocs/sqlite3.c	/^#define OP_DecrJumpZero /;"	d	file:
OP_Delete	testdocs/sqlite3.c	/^#define OP_Delete /;"	d	file:
OP_Destroy	testdocs/sqlite3.c	/^#define OP_Destroy /;"	d	file:
OP_Divide	testdocs/sqlite3.c	/^#define OP_Divide /;"	d	file:
OP_DropIndex	testdocs/sqlite3.c	/^#define OP_DropIndex /;"	d	file:
OP_DropTable	testdocs/sqlite3.c	/^#define OP_DropTable /;"	d	file:
OP_DropTrigger	testdocs/sqlite3.c	/^#define OP_DropTrigger /;"	d	file:
OP_ElseNotEq	testdocs/sqlite3.c	/^#define OP_ElseNotEq /;"	d	file:
OP_EndCoroutine	testdocs/sqlite3.c	/^#define OP_EndCoroutine /;"	d	file:
OP_Eq	testdocs/sqlite3.c	/^#define OP_Eq /;"	d	file:
OP_Expire	testdocs/sqlite3.c	/^#define OP_Expire /;"	d	file:
OP_Explain	testdocs/sqlite3.c	/^#define OP_Explain /;"	d	file:
OP_FkCounter	testdocs/sqlite3.c	/^#define OP_FkCounter /;"	d	file:
OP_FkIfZero	testdocs/sqlite3.c	/^#define OP_FkIfZero /;"	d	file:
OP_Found	testdocs/sqlite3.c	/^#define OP_Found /;"	d	file:
OP_Function	testdocs/sqlite3.c	/^#define OP_Function /;"	d	file:
OP_Function0	testdocs/sqlite3.c	/^#define OP_Function0 /;"	d	file:
OP_Ge	testdocs/sqlite3.c	/^#define OP_Ge /;"	d	file:
OP_Gosub	testdocs/sqlite3.c	/^#define OP_Gosub /;"	d	file:
OP_Goto	testdocs/sqlite3.c	/^#define OP_Goto /;"	d	file:
OP_Gt	testdocs/sqlite3.c	/^#define OP_Gt /;"	d	file:
OP_Halt	testdocs/sqlite3.c	/^#define OP_Halt /;"	d	file:
OP_HaltIfNull	testdocs/sqlite3.c	/^#define OP_HaltIfNull /;"	d	file:
OP_IdxDelete	testdocs/sqlite3.c	/^#define OP_IdxDelete /;"	d	file:
OP_IdxGE	testdocs/sqlite3.c	/^#define OP_IdxGE /;"	d	file:
OP_IdxGT	testdocs/sqlite3.c	/^#define OP_IdxGT /;"	d	file:
OP_IdxInsert	testdocs/sqlite3.c	/^#define OP_IdxInsert /;"	d	file:
OP_IdxLE	testdocs/sqlite3.c	/^#define OP_IdxLE /;"	d	file:
OP_IdxLT	testdocs/sqlite3.c	/^#define OP_IdxLT /;"	d	file:
OP_IdxRowid	testdocs/sqlite3.c	/^#define OP_IdxRowid /;"	d	file:
OP_If	testdocs/sqlite3.c	/^#define OP_If /;"	d	file:
OP_IfNot	testdocs/sqlite3.c	/^#define OP_IfNot /;"	d	file:
OP_IfNotZero	testdocs/sqlite3.c	/^#define OP_IfNotZero /;"	d	file:
OP_IfNullRow	testdocs/sqlite3.c	/^#define OP_IfNullRow /;"	d	file:
OP_IfPos	testdocs/sqlite3.c	/^#define OP_IfPos /;"	d	file:
OP_IfSmaller	testdocs/sqlite3.c	/^#define OP_IfSmaller /;"	d	file:
OP_IncrVacuum	testdocs/sqlite3.c	/^#define OP_IncrVacuum /;"	d	file:
OP_Init	testdocs/sqlite3.c	/^#define OP_Init /;"	d	file:
OP_InitCoroutine	testdocs/sqlite3.c	/^#define OP_InitCoroutine /;"	d	file:
OP_Insert	testdocs/sqlite3.c	/^#define OP_Insert /;"	d	file:
OP_InsertInt	testdocs/sqlite3.c	/^#define OP_InsertInt /;"	d	file:
OP_Int64	testdocs/sqlite3.c	/^#define OP_Int64 /;"	d	file:
OP_IntCopy	testdocs/sqlite3.c	/^#define OP_IntCopy /;"	d	file:
OP_Integer	testdocs/sqlite3.c	/^#define OP_Integer /;"	d	file:
OP_IntegrityCk	testdocs/sqlite3.c	/^#define OP_IntegrityCk /;"	d	file:
OP_IsNull	testdocs/sqlite3.c	/^#define OP_IsNull /;"	d	file:
OP_JournalMode	testdocs/sqlite3.c	/^#define OP_JournalMode /;"	d	file:
OP_Jump	testdocs/sqlite3.c	/^#define OP_Jump /;"	d	file:
OP_Last	testdocs/sqlite3.c	/^#define OP_Last /;"	d	file:
OP_Le	testdocs/sqlite3.c	/^#define OP_Le /;"	d	file:
OP_LoadAnalysis	testdocs/sqlite3.c	/^#define OP_LoadAnalysis /;"	d	file:
OP_Lt	testdocs/sqlite3.c	/^#define OP_Lt /;"	d	file:
OP_MakeRecord	testdocs/sqlite3.c	/^#define OP_MakeRecord /;"	d	file:
OP_MaxPgcnt	testdocs/sqlite3.c	/^#define OP_MaxPgcnt /;"	d	file:
OP_MemMax	testdocs/sqlite3.c	/^#define OP_MemMax /;"	d	file:
OP_Move	testdocs/sqlite3.c	/^#define OP_Move /;"	d	file:
OP_Multiply	testdocs/sqlite3.c	/^#define OP_Multiply /;"	d	file:
OP_MustBeInt	testdocs/sqlite3.c	/^#define OP_MustBeInt /;"	d	file:
OP_Ne	testdocs/sqlite3.c	/^#define OP_Ne /;"	d	file:
OP_NewRowid	testdocs/sqlite3.c	/^#define OP_NewRowid /;"	d	file:
OP_Next	testdocs/sqlite3.c	/^#define OP_Next /;"	d	file:
OP_NextIfOpen	testdocs/sqlite3.c	/^#define OP_NextIfOpen /;"	d	file:
OP_NoConflict	testdocs/sqlite3.c	/^#define OP_NoConflict /;"	d	file:
OP_Noop	testdocs/sqlite3.c	/^#define OP_Noop /;"	d	file:
OP_Not	testdocs/sqlite3.c	/^#define OP_Not /;"	d	file:
OP_NotExists	testdocs/sqlite3.c	/^#define OP_NotExists /;"	d	file:
OP_NotFound	testdocs/sqlite3.c	/^#define OP_NotFound /;"	d	file:
OP_NotNull	testdocs/sqlite3.c	/^#define OP_NotNull /;"	d	file:
OP_Null	testdocs/sqlite3.c	/^#define OP_Null /;"	d	file:
OP_NullRow	testdocs/sqlite3.c	/^#define OP_NullRow /;"	d	file:
OP_OffsetLimit	testdocs/sqlite3.c	/^#define OP_OffsetLimit /;"	d	file:
OP_Once	testdocs/sqlite3.c	/^#define OP_Once /;"	d	file:
OP_OpenAutoindex	testdocs/sqlite3.c	/^#define OP_OpenAutoindex /;"	d	file:
OP_OpenDup	testdocs/sqlite3.c	/^#define OP_OpenDup /;"	d	file:
OP_OpenEphemeral	testdocs/sqlite3.c	/^#define OP_OpenEphemeral /;"	d	file:
OP_OpenPseudo	testdocs/sqlite3.c	/^#define OP_OpenPseudo /;"	d	file:
OP_OpenRead	testdocs/sqlite3.c	/^#define OP_OpenRead /;"	d	file:
OP_OpenWrite	testdocs/sqlite3.c	/^#define OP_OpenWrite /;"	d	file:
OP_Or	testdocs/sqlite3.c	/^#define OP_Or /;"	d	file:
OP_Pagecount	testdocs/sqlite3.c	/^#define OP_Pagecount /;"	d	file:
OP_Param	testdocs/sqlite3.c	/^#define OP_Param /;"	d	file:
OP_ParseSchema	testdocs/sqlite3.c	/^#define OP_ParseSchema /;"	d	file:
OP_Permutation	testdocs/sqlite3.c	/^#define OP_Permutation /;"	d	file:
OP_Prev	testdocs/sqlite3.c	/^#define OP_Prev /;"	d	file:
OP_PrevIfOpen	testdocs/sqlite3.c	/^#define OP_PrevIfOpen /;"	d	file:
OP_Program	testdocs/sqlite3.c	/^#define OP_Program /;"	d	file:
OP_ReadCookie	testdocs/sqlite3.c	/^#define OP_ReadCookie /;"	d	file:
OP_Real	testdocs/sqlite3.c	/^#define OP_Real /;"	d	file:
OP_RealAffinity	testdocs/sqlite3.c	/^#define OP_RealAffinity /;"	d	file:
OP_Remainder	testdocs/sqlite3.c	/^#define OP_Remainder /;"	d	file:
OP_ReopenIdx	testdocs/sqlite3.c	/^#define OP_ReopenIdx /;"	d	file:
OP_ResetCount	testdocs/sqlite3.c	/^#define OP_ResetCount /;"	d	file:
OP_ResetSorter	testdocs/sqlite3.c	/^#define OP_ResetSorter /;"	d	file:
OP_ResultRow	testdocs/sqlite3.c	/^#define OP_ResultRow /;"	d	file:
OP_Return	testdocs/sqlite3.c	/^#define OP_Return /;"	d	file:
OP_Rewind	testdocs/sqlite3.c	/^#define OP_Rewind /;"	d	file:
OP_RowData	testdocs/sqlite3.c	/^#define OP_RowData /;"	d	file:
OP_RowSetAdd	testdocs/sqlite3.c	/^#define OP_RowSetAdd /;"	d	file:
OP_RowSetRead	testdocs/sqlite3.c	/^#define OP_RowSetRead /;"	d	file:
OP_RowSetTest	testdocs/sqlite3.c	/^#define OP_RowSetTest /;"	d	file:
OP_Rowid	testdocs/sqlite3.c	/^#define OP_Rowid /;"	d	file:
OP_SCopy	testdocs/sqlite3.c	/^#define OP_SCopy /;"	d	file:
OP_Savepoint	testdocs/sqlite3.c	/^#define OP_Savepoint /;"	d	file:
OP_Seek	testdocs/sqlite3.c	/^#define OP_Seek /;"	d	file:
OP_SeekGE	testdocs/sqlite3.c	/^#define OP_SeekGE /;"	d	file:
OP_SeekGT	testdocs/sqlite3.c	/^#define OP_SeekGT /;"	d	file:
OP_SeekLE	testdocs/sqlite3.c	/^#define OP_SeekLE /;"	d	file:
OP_SeekLT	testdocs/sqlite3.c	/^#define OP_SeekLT /;"	d	file:
OP_SeekRowid	testdocs/sqlite3.c	/^#define OP_SeekRowid /;"	d	file:
OP_Sequence	testdocs/sqlite3.c	/^#define OP_Sequence /;"	d	file:
OP_SequenceTest	testdocs/sqlite3.c	/^#define OP_SequenceTest /;"	d	file:
OP_SetCookie	testdocs/sqlite3.c	/^#define OP_SetCookie /;"	d	file:
OP_ShiftLeft	testdocs/sqlite3.c	/^#define OP_ShiftLeft /;"	d	file:
OP_ShiftRight	testdocs/sqlite3.c	/^#define OP_ShiftRight /;"	d	file:
OP_SoftNull	testdocs/sqlite3.c	/^#define OP_SoftNull /;"	d	file:
OP_Sort	testdocs/sqlite3.c	/^#define OP_Sort /;"	d	file:
OP_SorterCompare	testdocs/sqlite3.c	/^#define OP_SorterCompare /;"	d	file:
OP_SorterData	testdocs/sqlite3.c	/^#define OP_SorterData /;"	d	file:
OP_SorterInsert	testdocs/sqlite3.c	/^#define OP_SorterInsert /;"	d	file:
OP_SorterNext	testdocs/sqlite3.c	/^#define OP_SorterNext /;"	d	file:
OP_SorterOpen	testdocs/sqlite3.c	/^#define OP_SorterOpen /;"	d	file:
OP_SorterSort	testdocs/sqlite3.c	/^#define OP_SorterSort /;"	d	file:
OP_SqlExec	testdocs/sqlite3.c	/^#define OP_SqlExec /;"	d	file:
OP_String	testdocs/sqlite3.c	/^#define OP_String /;"	d	file:
OP_String8	testdocs/sqlite3.c	/^#define OP_String8 /;"	d	file:
OP_Subtract	testdocs/sqlite3.c	/^#define OP_Subtract /;"	d	file:
OP_TableLock	testdocs/sqlite3.c	/^#define OP_TableLock /;"	d	file:
OP_Transaction	testdocs/sqlite3.c	/^#define OP_Transaction /;"	d	file:
OP_VBegin	testdocs/sqlite3.c	/^#define OP_VBegin /;"	d	file:
OP_VColumn	testdocs/sqlite3.c	/^#define OP_VColumn /;"	d	file:
OP_VCreate	testdocs/sqlite3.c	/^#define OP_VCreate /;"	d	file:
OP_VDestroy	testdocs/sqlite3.c	/^#define OP_VDestroy /;"	d	file:
OP_VFilter	testdocs/sqlite3.c	/^#define OP_VFilter /;"	d	file:
OP_VNext	testdocs/sqlite3.c	/^#define OP_VNext /;"	d	file:
OP_VOpen	testdocs/sqlite3.c	/^#define OP_VOpen /;"	d	file:
OP_VRename	testdocs/sqlite3.c	/^#define OP_VRename /;"	d	file:
OP_VUpdate	testdocs/sqlite3.c	/^#define OP_VUpdate /;"	d	file:
OP_Vacuum	testdocs/sqlite3.c	/^#define OP_Vacuum /;"	d	file:
OP_Variable	testdocs/sqlite3.c	/^#define OP_Variable /;"	d	file:
OP_Yield	testdocs/sqlite3.c	/^#define OP_Yield /;"	d	file:
OSTRACE	testdocs/sqlite3.c	/^# define OSTRACE(/;"	d	file:
OS_VXWORKS	testdocs/sqlite3.c	/^#define OS_VXWORKS /;"	d	file:
O_BINARY	testdocs/sqlite3.c	/^# define O_BINARY /;"	d	file:
O_LARGEFILE	testdocs/sqlite3.c	/^# define O_LARGEFILE /;"	d	file:
O_LARGEFILE	testdocs/sqlite3.c	/^# undef O_LARGEFILE$/;"	d	file:
O_NOFOLLOW	testdocs/sqlite3.c	/^# define O_NOFOLLOW /;"	d	file:
Op	testdocs/sqlite3.c	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp	file:
OpHelp	testdocs/sqlite3.c	/^# define OpHelp(/;"	d	file:
OpenCounter	testdocs/sqlite3.c	/^#define OpenCounter(/;"	d	file:
OptimizationDisabled	testdocs/sqlite3.c	/^#define OptimizationDisabled(/;"	d	file:
OptimizationEnabled	testdocs/sqlite3.c	/^#define OptimizationEnabled(/;"	d	file:
P4_ADVANCE	testdocs/sqlite3.c	/^#define P4_ADVANCE /;"	d	file:
P4_COLLSEQ	testdocs/sqlite3.c	/^#define P4_COLLSEQ /;"	d	file:
P4_DYNAMIC	testdocs/sqlite3.c	/^#define P4_DYNAMIC /;"	d	file:
P4_EXPR	testdocs/sqlite3.c	/^#define P4_EXPR /;"	d	file:
P4_FUNCCTX	testdocs/sqlite3.c	/^#define P4_FUNCCTX /;"	d	file:
P4_FUNCDEF	testdocs/sqlite3.c	/^#define P4_FUNCDEF /;"	d	file:
P4_INT32	testdocs/sqlite3.c	/^#define P4_INT32 /;"	d	file:
P4_INT64	testdocs/sqlite3.c	/^#define P4_INT64 /;"	d	file:
P4_INTARRAY	testdocs/sqlite3.c	/^#define P4_INTARRAY /;"	d	file:
P4_KEYINFO	testdocs/sqlite3.c	/^#define P4_KEYINFO /;"	d	file:
P4_MEM	testdocs/sqlite3.c	/^#define P4_MEM /;"	d	file:
P4_NOTUSED	testdocs/sqlite3.c	/^#define P4_NOTUSED /;"	d	file:
P4_REAL	testdocs/sqlite3.c	/^#define P4_REAL /;"	d	file:
P4_STATIC	testdocs/sqlite3.c	/^#define P4_STATIC /;"	d	file:
P4_SUBPROGRAM	testdocs/sqlite3.c	/^#define P4_SUBPROGRAM /;"	d	file:
P4_TABLE	testdocs/sqlite3.c	/^#define P4_TABLE /;"	d	file:
P4_TRANSIENT	testdocs/sqlite3.c	/^#define P4_TRANSIENT /;"	d	file:
P4_VTAB	testdocs/sqlite3.c	/^#define P4_VTAB /;"	d	file:
P5_ConstraintCheck	testdocs/sqlite3.c	/^#define P5_ConstraintCheck /;"	d	file:
P5_ConstraintFK	testdocs/sqlite3.c	/^#define P5_ConstraintFK /;"	d	file:
P5_ConstraintNotNull	testdocs/sqlite3.c	/^#define P5_ConstraintNotNull /;"	d	file:
P5_ConstraintUnique	testdocs/sqlite3.c	/^#define P5_ConstraintUnique /;"	d	file:
PAGERID	testdocs/sqlite3.c	/^#define PAGERID(/;"	d	file:
PAGERTRACE	testdocs/sqlite3.c	/^#define PAGERTRACE(/;"	d	file:
PAGER_CACHESPILL	testdocs/sqlite3.c	/^#define PAGER_CACHESPILL /;"	d	file:
PAGER_CKPT_FULLFSYNC	testdocs/sqlite3.c	/^#define PAGER_CKPT_FULLFSYNC /;"	d	file:
PAGER_ERROR	testdocs/sqlite3.c	/^#define PAGER_ERROR /;"	d	file:
PAGER_FLAGS_MASK	testdocs/sqlite3.c	/^#define PAGER_FLAGS_MASK /;"	d	file:
PAGER_FULLFSYNC	testdocs/sqlite3.c	/^#define PAGER_FULLFSYNC /;"	d	file:
PAGER_GET_NOCONTENT	testdocs/sqlite3.c	/^#define PAGER_GET_NOCONTENT /;"	d	file:
PAGER_GET_READONLY	testdocs/sqlite3.c	/^#define PAGER_GET_READONLY /;"	d	file:
PAGER_INCR	testdocs/sqlite3.c	/^# define PAGER_INCR(/;"	d	file:
PAGER_JOURNALMODE_DELETE	testdocs/sqlite3.c	/^#define PAGER_JOURNALMODE_DELETE /;"	d	file:
PAGER_JOURNALMODE_MEMORY	testdocs/sqlite3.c	/^#define PAGER_JOURNALMODE_MEMORY /;"	d	file:
PAGER_JOURNALMODE_OFF	testdocs/sqlite3.c	/^#define PAGER_JOURNALMODE_OFF /;"	d	file:
PAGER_JOURNALMODE_PERSIST	testdocs/sqlite3.c	/^#define PAGER_JOURNALMODE_PERSIST /;"	d	file:
PAGER_JOURNALMODE_QUERY	testdocs/sqlite3.c	/^#define PAGER_JOURNALMODE_QUERY /;"	d	file:
PAGER_JOURNALMODE_TRUNCATE	testdocs/sqlite3.c	/^#define PAGER_JOURNALMODE_TRUNCATE /;"	d	file:
PAGER_JOURNALMODE_WAL	testdocs/sqlite3.c	/^#define PAGER_JOURNALMODE_WAL /;"	d	file:
PAGER_LOCKINGMODE_EXCLUSIVE	testdocs/sqlite3.c	/^#define PAGER_LOCKINGMODE_EXCLUSIVE /;"	d	file:
PAGER_LOCKINGMODE_NORMAL	testdocs/sqlite3.c	/^#define PAGER_LOCKINGMODE_NORMAL /;"	d	file:
PAGER_LOCKINGMODE_QUERY	testdocs/sqlite3.c	/^#define PAGER_LOCKINGMODE_QUERY /;"	d	file:
PAGER_MAX_PGNO	testdocs/sqlite3.c	/^#define PAGER_MAX_PGNO /;"	d	file:
PAGER_MEMORY	testdocs/sqlite3.c	/^#define PAGER_MEMORY /;"	d	file:
PAGER_MJ_PGNO	testdocs/sqlite3.c	/^#define PAGER_MJ_PGNO(/;"	d	file:
PAGER_OMIT_JOURNAL	testdocs/sqlite3.c	/^#define PAGER_OMIT_JOURNAL /;"	d	file:
PAGER_OPEN	testdocs/sqlite3.c	/^#define PAGER_OPEN /;"	d	file:
PAGER_READER	testdocs/sqlite3.c	/^#define PAGER_READER /;"	d	file:
PAGER_STAT_HIT	testdocs/sqlite3.c	/^#define PAGER_STAT_HIT /;"	d	file:
PAGER_STAT_MISS	testdocs/sqlite3.c	/^#define PAGER_STAT_MISS /;"	d	file:
PAGER_STAT_WRITE	testdocs/sqlite3.c	/^#define PAGER_STAT_WRITE /;"	d	file:
PAGER_SYNCHRONOUS_EXTRA	testdocs/sqlite3.c	/^#define PAGER_SYNCHRONOUS_EXTRA /;"	d	file:
PAGER_SYNCHRONOUS_FULL	testdocs/sqlite3.c	/^#define PAGER_SYNCHRONOUS_FULL /;"	d	file:
PAGER_SYNCHRONOUS_MASK	testdocs/sqlite3.c	/^#define PAGER_SYNCHRONOUS_MASK /;"	d	file:
PAGER_SYNCHRONOUS_NORMAL	testdocs/sqlite3.c	/^#define PAGER_SYNCHRONOUS_NORMAL /;"	d	file:
PAGER_SYNCHRONOUS_OFF	testdocs/sqlite3.c	/^#define PAGER_SYNCHRONOUS_OFF /;"	d	file:
PAGER_WRITER_CACHEMOD	testdocs/sqlite3.c	/^#define PAGER_WRITER_CACHEMOD /;"	d	file:
PAGER_WRITER_DBMOD	testdocs/sqlite3.c	/^#define PAGER_WRITER_DBMOD /;"	d	file:
PAGER_WRITER_FINISHED	testdocs/sqlite3.c	/^#define PAGER_WRITER_FINISHED /;"	d	file:
PAGER_WRITER_LOCKED	testdocs/sqlite3.c	/^#define PAGER_WRITER_LOCKED /;"	d	file:
PARSE_HDR_SZ	testdocs/sqlite3.c	/^#define PARSE_HDR_SZ /;"	d	file:
PARSE_RECURSE_SZ	testdocs/sqlite3.c	/^#define PARSE_RECURSE_SZ /;"	d	file:
PARSE_TAIL	testdocs/sqlite3.c	/^#define PARSE_TAIL(/;"	d	file:
PARSE_TAIL_SZ	testdocs/sqlite3.c	/^#define PARSE_TAIL_SZ /;"	d	file:
PARTLY_WITHIN	testdocs/sqlite3.c	/^#define PARTLY_WITHIN /;"	d	file:
PCACHE1_MIGHT_USE_GROUP_MUTEX	testdocs/sqlite3.c	/^# define PCACHE1_MIGHT_USE_GROUP_MUTEX /;"	d	file:
PCACHE_DIRTYLIST_ADD	testdocs/sqlite3.c	/^#define PCACHE_DIRTYLIST_ADD /;"	d	file:
PCACHE_DIRTYLIST_FRONT	testdocs/sqlite3.c	/^#define PCACHE_DIRTYLIST_FRONT /;"	d	file:
PCACHE_DIRTYLIST_REMOVE	testdocs/sqlite3.c	/^#define PCACHE_DIRTYLIST_REMOVE /;"	d	file:
PCache	testdocs/sqlite3.c	/^struct PCache {$/;"	s	file:
PCache	testdocs/sqlite3.c	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache	file:
PCache1	testdocs/sqlite3.c	/^struct PCache1 {$/;"	s	file:
PCache1	testdocs/sqlite3.c	/^typedef struct PCache1 PCache1;$/;"	t	typeref:struct:PCache1	file:
PCacheGlobal	testdocs/sqlite3.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PENDING_BYTE	testdocs/sqlite3.c	/^# define PENDING_BYTE /;"	d	file:
PENDING_BYTE_PAGE	testdocs/sqlite3.c	/^# define PENDING_BYTE_PAGE(/;"	d	file:
PENDING_LOCK	testdocs/sqlite3.c	/^#define PENDING_LOCK /;"	d	file:
PGHDR_CLEAN	testdocs/sqlite3.c	/^#define PGHDR_CLEAN /;"	d	file:
PGHDR_DIRTY	testdocs/sqlite3.c	/^#define PGHDR_DIRTY /;"	d	file:
PGHDR_DONT_WRITE	testdocs/sqlite3.c	/^#define PGHDR_DONT_WRITE /;"	d	file:
PGHDR_MMAP	testdocs/sqlite3.c	/^#define PGHDR_MMAP /;"	d	file:
PGHDR_NEED_SYNC	testdocs/sqlite3.c	/^#define PGHDR_NEED_SYNC /;"	d	file:
PGHDR_WAL_APPEND	testdocs/sqlite3.c	/^#define PGHDR_WAL_APPEND /;"	d	file:
PGHDR_WRITEABLE	testdocs/sqlite3.c	/^#define PGHDR_WRITEABLE /;"	d	file:
PGroup	testdocs/sqlite3.c	/^struct PGroup {$/;"	s	file:
PGroup	testdocs/sqlite3.c	/^typedef struct PGroup PGroup;$/;"	t	typeref:struct:PGroup	file:
POSITION_LIST_END	testdocs/sqlite3.c	/^#define POSITION_LIST_END /;"	d	file:
POS_COLUMN	testdocs/sqlite3.c	/^#define POS_COLUMN /;"	d	file:
POS_END	testdocs/sqlite3.c	/^#define POS_END /;"	d	file:
PRINT_TEST_RESULTS	atf.h	/^#define PRINT_TEST_RESULTS /;"	d
PROXY_CONCHVERSION	testdocs/sqlite3.c	/^#define PROXY_CONCHVERSION /;"	d	file:
PROXY_HEADERLEN	testdocs/sqlite3.c	/^#define PROXY_HEADERLEN /;"	d	file:
PROXY_HOSTIDLEN	testdocs/sqlite3.c	/^#define PROXY_HOSTIDLEN /;"	d	file:
PROXY_MAXCONCHLEN	testdocs/sqlite3.c	/^#define PROXY_MAXCONCHLEN /;"	d	file:
PROXY_PATHINDEX	testdocs/sqlite3.c	/^#define PROXY_PATHINDEX /;"	d	file:
PTF_INTKEY	testdocs/sqlite3.c	/^#define PTF_INTKEY /;"	d	file:
PTF_LEAF	testdocs/sqlite3.c	/^#define PTF_LEAF /;"	d	file:
PTF_LEAFDATA	testdocs/sqlite3.c	/^#define PTF_LEAFDATA /;"	d	file:
PTF_ZERODATA	testdocs/sqlite3.c	/^#define PTF_ZERODATA /;"	d	file:
PTRMAP_BTREE	testdocs/sqlite3.c	/^#define PTRMAP_BTREE /;"	d	file:
PTRMAP_FREEPAGE	testdocs/sqlite3.c	/^#define PTRMAP_FREEPAGE /;"	d	file:
PTRMAP_ISPAGE	testdocs/sqlite3.c	/^#define PTRMAP_ISPAGE(/;"	d	file:
PTRMAP_OVERFLOW1	testdocs/sqlite3.c	/^#define PTRMAP_OVERFLOW1 /;"	d	file:
PTRMAP_OVERFLOW2	testdocs/sqlite3.c	/^#define PTRMAP_OVERFLOW2 /;"	d	file:
PTRMAP_PAGENO	testdocs/sqlite3.c	/^#define PTRMAP_PAGENO(/;"	d	file:
PTRMAP_PTROFFSET	testdocs/sqlite3.c	/^#define PTRMAP_PTROFFSET(/;"	d	file:
PTRMAP_ROOTPAGE	testdocs/sqlite3.c	/^#define PTRMAP_ROOTPAGE /;"	d	file:
Pager	testdocs/sqlite3.c	/^struct Pager {$/;"	s	file:
Pager	testdocs/sqlite3.c	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager	file:
PagerSavepoint	testdocs/sqlite3.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	testdocs/sqlite3.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	typeref:struct:PagerSavepoint	file:
Parse	testdocs/sqlite3.c	/^struct Parse {$/;"	s	file:
Parse	testdocs/sqlite3.c	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse	file:
ParseContext	testdocs/sqlite3.c	/^struct ParseContext {$/;"	s	file:
ParseContext	testdocs/sqlite3.c	/^typedef struct ParseContext ParseContext;$/;"	t	typeref:struct:ParseContext	file:
PendingList	testdocs/sqlite3.c	/^struct PendingList {$/;"	s	file:
PendingList	testdocs/sqlite3.c	/^typedef struct PendingList PendingList;$/;"	t	typeref:struct:PendingList	file:
PgFreeslot	testdocs/sqlite3.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	testdocs/sqlite3.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	typeref:struct:PgFreeslot	file:
PgHdr	testdocs/sqlite3.c	/^struct PgHdr {$/;"	s	file:
PgHdr	testdocs/sqlite3.c	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr	file:
PgHdr1	testdocs/sqlite3.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	testdocs/sqlite3.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	typeref:struct:PgHdr1	file:
Pgno	testdocs/sqlite3.c	/^typedef u32 Pgno;$/;"	t	file:
PmaReader	testdocs/sqlite3.c	/^struct PmaReader {$/;"	s	file:
PmaReader	testdocs/sqlite3.c	/^typedef struct PmaReader PmaReader;         \/* Incrementally read one PMA *\/$/;"	t	typeref:struct:PmaReader	file:
PmaWriter	testdocs/sqlite3.c	/^struct PmaWriter {$/;"	s	file:
PmaWriter	testdocs/sqlite3.c	/^typedef struct PmaWriter PmaWriter;         \/* Incrementally write one PMA *\/$/;"	t	typeref:struct:PmaWriter	file:
PorterContext	testdocs/sqlite3.c	/^struct PorterContext {$/;"	s	file:
PorterContext	testdocs/sqlite3.c	/^typedef struct PorterContext PorterContext;$/;"	t	typeref:struct:PorterContext	file:
PorterRule	testdocs/sqlite3.c	/^struct PorterRule {$/;"	s	file:
PorterRule	testdocs/sqlite3.c	/^typedef struct PorterRule PorterRule;$/;"	t	typeref:struct:PorterRule	file:
PorterTokenizer	testdocs/sqlite3.c	/^struct PorterTokenizer {$/;"	s	file:
PorterTokenizer	testdocs/sqlite3.c	/^typedef struct PorterTokenizer PorterTokenizer;$/;"	t	typeref:struct:PorterTokenizer	file:
PoslistCallbackCtx	testdocs/sqlite3.c	/^struct PoslistCallbackCtx {$/;"	s	file:
PoslistCallbackCtx	testdocs/sqlite3.c	/^typedef struct PoslistCallbackCtx PoslistCallbackCtx;$/;"	t	typeref:struct:PoslistCallbackCtx	file:
PoslistOffsetsCtx	testdocs/sqlite3.c	/^struct PoslistOffsetsCtx {$/;"	s	file:
PoslistOffsetsCtx	testdocs/sqlite3.c	/^typedef struct PoslistOffsetsCtx PoslistOffsetsCtx;$/;"	t	typeref:struct:PoslistOffsetsCtx	file:
PragFlg_NeedSchema	testdocs/sqlite3.c	/^#define PragFlg_NeedSchema /;"	d	file:
PragFlg_NoColumns	testdocs/sqlite3.c	/^#define PragFlg_NoColumns /;"	d	file:
PragFlg_NoColumns1	testdocs/sqlite3.c	/^#define PragFlg_NoColumns1 /;"	d	file:
PragFlg_ReadOnly	testdocs/sqlite3.c	/^#define PragFlg_ReadOnly /;"	d	file:
PragFlg_Result0	testdocs/sqlite3.c	/^#define PragFlg_Result0 /;"	d	file:
PragFlg_Result1	testdocs/sqlite3.c	/^#define PragFlg_Result1 /;"	d	file:
PragFlg_SchemaOpt	testdocs/sqlite3.c	/^#define PragFlg_SchemaOpt /;"	d	file:
PragFlg_SchemaReq	testdocs/sqlite3.c	/^#define PragFlg_SchemaReq /;"	d	file:
PragTyp_ACTIVATE_EXTENSIONS	testdocs/sqlite3.c	/^#define PragTyp_ACTIVATE_EXTENSIONS /;"	d	file:
PragTyp_AUTO_VACUUM	testdocs/sqlite3.c	/^#define PragTyp_AUTO_VACUUM /;"	d	file:
PragTyp_BUSY_TIMEOUT	testdocs/sqlite3.c	/^#define PragTyp_BUSY_TIMEOUT /;"	d	file:
PragTyp_CACHE_SIZE	testdocs/sqlite3.c	/^#define PragTyp_CACHE_SIZE /;"	d	file:
PragTyp_CACHE_SPILL	testdocs/sqlite3.c	/^#define PragTyp_CACHE_SPILL /;"	d	file:
PragTyp_CASE_SENSITIVE_LIKE	testdocs/sqlite3.c	/^#define PragTyp_CASE_SENSITIVE_LIKE /;"	d	file:
PragTyp_COLLATION_LIST	testdocs/sqlite3.c	/^#define PragTyp_COLLATION_LIST /;"	d	file:
PragTyp_COMPILE_OPTIONS	testdocs/sqlite3.c	/^#define PragTyp_COMPILE_OPTIONS /;"	d	file:
PragTyp_DATABASE_LIST	testdocs/sqlite3.c	/^#define PragTyp_DATABASE_LIST /;"	d	file:
PragTyp_DATA_STORE_DIRECTORY	testdocs/sqlite3.c	/^#define PragTyp_DATA_STORE_DIRECTORY /;"	d	file:
PragTyp_DEFAULT_CACHE_SIZE	testdocs/sqlite3.c	/^#define PragTyp_DEFAULT_CACHE_SIZE /;"	d	file:
PragTyp_ENCODING	testdocs/sqlite3.c	/^#define PragTyp_ENCODING /;"	d	file:
PragTyp_FLAG	testdocs/sqlite3.c	/^#define PragTyp_FLAG /;"	d	file:
PragTyp_FOREIGN_KEY_CHECK	testdocs/sqlite3.c	/^#define PragTyp_FOREIGN_KEY_CHECK /;"	d	file:
PragTyp_FOREIGN_KEY_LIST	testdocs/sqlite3.c	/^#define PragTyp_FOREIGN_KEY_LIST /;"	d	file:
PragTyp_HEADER_VALUE	testdocs/sqlite3.c	/^#define PragTyp_HEADER_VALUE /;"	d	file:
PragTyp_HEXKEY	testdocs/sqlite3.c	/^#define PragTyp_HEXKEY /;"	d	file:
PragTyp_INCREMENTAL_VACUUM	testdocs/sqlite3.c	/^#define PragTyp_INCREMENTAL_VACUUM /;"	d	file:
PragTyp_INDEX_INFO	testdocs/sqlite3.c	/^#define PragTyp_INDEX_INFO /;"	d	file:
PragTyp_INDEX_LIST	testdocs/sqlite3.c	/^#define PragTyp_INDEX_LIST /;"	d	file:
PragTyp_INTEGRITY_CHECK	testdocs/sqlite3.c	/^#define PragTyp_INTEGRITY_CHECK /;"	d	file:
PragTyp_JOURNAL_MODE	testdocs/sqlite3.c	/^#define PragTyp_JOURNAL_MODE /;"	d	file:
PragTyp_JOURNAL_SIZE_LIMIT	testdocs/sqlite3.c	/^#define PragTyp_JOURNAL_SIZE_LIMIT /;"	d	file:
PragTyp_KEY	testdocs/sqlite3.c	/^#define PragTyp_KEY /;"	d	file:
PragTyp_LOCKING_MODE	testdocs/sqlite3.c	/^#define PragTyp_LOCKING_MODE /;"	d	file:
PragTyp_LOCK_PROXY_FILE	testdocs/sqlite3.c	/^#define PragTyp_LOCK_PROXY_FILE /;"	d	file:
PragTyp_LOCK_STATUS	testdocs/sqlite3.c	/^#define PragTyp_LOCK_STATUS /;"	d	file:
PragTyp_MMAP_SIZE	testdocs/sqlite3.c	/^#define PragTyp_MMAP_SIZE /;"	d	file:
PragTyp_OPTIMIZE	testdocs/sqlite3.c	/^#define PragTyp_OPTIMIZE /;"	d	file:
PragTyp_PAGE_COUNT	testdocs/sqlite3.c	/^#define PragTyp_PAGE_COUNT /;"	d	file:
PragTyp_PAGE_SIZE	testdocs/sqlite3.c	/^#define PragTyp_PAGE_SIZE /;"	d	file:
PragTyp_PARSER_TRACE	testdocs/sqlite3.c	/^#define PragTyp_PARSER_TRACE /;"	d	file:
PragTyp_REKEY	testdocs/sqlite3.c	/^#define PragTyp_REKEY /;"	d	file:
PragTyp_SECURE_DELETE	testdocs/sqlite3.c	/^#define PragTyp_SECURE_DELETE /;"	d	file:
PragTyp_SHRINK_MEMORY	testdocs/sqlite3.c	/^#define PragTyp_SHRINK_MEMORY /;"	d	file:
PragTyp_SOFT_HEAP_LIMIT	testdocs/sqlite3.c	/^#define PragTyp_SOFT_HEAP_LIMIT /;"	d	file:
PragTyp_STATS	testdocs/sqlite3.c	/^#define PragTyp_STATS /;"	d	file:
PragTyp_SYNCHRONOUS	testdocs/sqlite3.c	/^#define PragTyp_SYNCHRONOUS /;"	d	file:
PragTyp_TABLE_INFO	testdocs/sqlite3.c	/^#define PragTyp_TABLE_INFO /;"	d	file:
PragTyp_TEMP_STORE	testdocs/sqlite3.c	/^#define PragTyp_TEMP_STORE /;"	d	file:
PragTyp_TEMP_STORE_DIRECTORY	testdocs/sqlite3.c	/^#define PragTyp_TEMP_STORE_DIRECTORY /;"	d	file:
PragTyp_THREADS	testdocs/sqlite3.c	/^#define PragTyp_THREADS /;"	d	file:
PragTyp_WAL_AUTOCHECKPOINT	testdocs/sqlite3.c	/^#define PragTyp_WAL_AUTOCHECKPOINT /;"	d	file:
PragTyp_WAL_CHECKPOINT	testdocs/sqlite3.c	/^#define PragTyp_WAL_CHECKPOINT /;"	d	file:
PragmaName	testdocs/sqlite3.c	/^typedef struct PragmaName {$/;"	s	file:
PragmaName	testdocs/sqlite3.c	/^} PragmaName;$/;"	t	typeref:struct:PragmaName	file:
PragmaVtab	testdocs/sqlite3.c	/^struct PragmaVtab {$/;"	s	file:
PragmaVtab	testdocs/sqlite3.c	/^typedef struct PragmaVtab PragmaVtab;$/;"	t	typeref:struct:PragmaVtab	file:
PragmaVtabCursor	testdocs/sqlite3.c	/^struct PragmaVtabCursor {$/;"	s	file:
PragmaVtabCursor	testdocs/sqlite3.c	/^typedef struct PragmaVtabCursor PragmaVtabCursor;$/;"	t	typeref:struct:PragmaVtabCursor	file:
PreUpdate	testdocs/sqlite3.c	/^struct PreUpdate {$/;"	s	file:
PreUpdate	testdocs/sqlite3.c	/^typedef struct PreUpdate PreUpdate;$/;"	t	typeref:struct:PreUpdate	file:
PrintfArguments	testdocs/sqlite3.c	/^struct PrintfArguments {$/;"	s	file:
PrintfArguments	testdocs/sqlite3.c	/^typedef struct PrintfArguments PrintfArguments;$/;"	t	typeref:struct:PrintfArguments	file:
RBU_CREATE_STATE	testdocs/sqlite3.c	/^#define RBU_CREATE_STATE /;"	d	file:
RBU_DELETE	testdocs/sqlite3.c	/^#define RBU_DELETE /;"	d	file:
RBU_IDX_DELETE	testdocs/sqlite3.c	/^#define RBU_IDX_DELETE /;"	d	file:
RBU_IDX_INSERT	testdocs/sqlite3.c	/^#define RBU_IDX_INSERT /;"	d	file:
RBU_INSERT	testdocs/sqlite3.c	/^#define RBU_INSERT /;"	d	file:
RBU_PK_EXTERNAL	testdocs/sqlite3.c	/^#define RBU_PK_EXTERNAL /;"	d	file:
RBU_PK_IPK	testdocs/sqlite3.c	/^#define RBU_PK_IPK /;"	d	file:
RBU_PK_NONE	testdocs/sqlite3.c	/^#define RBU_PK_NONE /;"	d	file:
RBU_PK_NOTABLE	testdocs/sqlite3.c	/^#define RBU_PK_NOTABLE /;"	d	file:
RBU_PK_VTAB	testdocs/sqlite3.c	/^#define RBU_PK_VTAB /;"	d	file:
RBU_PK_WITHOUT_ROWID	testdocs/sqlite3.c	/^#define RBU_PK_WITHOUT_ROWID /;"	d	file:
RBU_REPLACE	testdocs/sqlite3.c	/^#define RBU_REPLACE /;"	d	file:
RBU_STAGE_CAPTURE	testdocs/sqlite3.c	/^#define RBU_STAGE_CAPTURE /;"	d	file:
RBU_STAGE_CKPT	testdocs/sqlite3.c	/^#define RBU_STAGE_CKPT /;"	d	file:
RBU_STAGE_DONE	testdocs/sqlite3.c	/^#define RBU_STAGE_DONE /;"	d	file:
RBU_STAGE_MOVE	testdocs/sqlite3.c	/^#define RBU_STAGE_MOVE /;"	d	file:
RBU_STAGE_OAL	testdocs/sqlite3.c	/^#define RBU_STAGE_OAL /;"	d	file:
RBU_STATE_CKPT	testdocs/sqlite3.c	/^#define RBU_STATE_CKPT /;"	d	file:
RBU_STATE_COOKIE	testdocs/sqlite3.c	/^#define RBU_STATE_COOKIE /;"	d	file:
RBU_STATE_IDX	testdocs/sqlite3.c	/^#define RBU_STATE_IDX /;"	d	file:
RBU_STATE_OALSZ	testdocs/sqlite3.c	/^#define RBU_STATE_OALSZ /;"	d	file:
RBU_STATE_PHASEONESTEP	testdocs/sqlite3.c	/^#define RBU_STATE_PHASEONESTEP /;"	d	file:
RBU_STATE_PROGRESS	testdocs/sqlite3.c	/^#define RBU_STATE_PROGRESS /;"	d	file:
RBU_STATE_ROW	testdocs/sqlite3.c	/^#define RBU_STATE_ROW /;"	d	file:
RBU_STATE_STAGE	testdocs/sqlite3.c	/^#define RBU_STATE_STAGE /;"	d	file:
RBU_STATE_TBL	testdocs/sqlite3.c	/^#define RBU_STATE_TBL /;"	d	file:
RBU_UPDATE	testdocs/sqlite3.c	/^#define RBU_UPDATE /;"	d	file:
READMARK_NOT_USED	testdocs/sqlite3.c	/^#define READMARK_NOT_USED /;"	d	file:
READ_LOCK	testdocs/sqlite3.c	/^#define READ_LOCK /;"	d	file:
READ_UTF16BE	testdocs/sqlite3.c	/^#define READ_UTF16BE(/;"	d	file:
READ_UTF16LE	testdocs/sqlite3.c	/^#define READ_UTF16LE(/;"	d	file:
READ_UTF8	testdocs/sqlite3.c	/^#define READ_UTF8(/;"	d	file:
REARGUARD	testdocs/sqlite3.c	/^#define REARGUARD /;"	d	file:
REGISTER_TRACE	testdocs/sqlite3.c	/^#  define REGISTER_TRACE(/;"	d	file:
RESERVED_BYTE	testdocs/sqlite3.c	/^#define RESERVED_BYTE /;"	d	file:
RESERVED_LOCK	testdocs/sqlite3.c	/^#define RESERVED_LOCK /;"	d	file:
REVISION	testdocs/waf	/^REVISION="f34901f5b68face907b47c9bd9abce84"$/;"	v
RIGHT	edit.h	/^    RIGHT = +1,$/;"	e	enum:__anon7
RNDAWAY	testdocs/sqlite3.c	/^#define RNDAWAY /;"	d	file:
RNDTOWARDS	testdocs/sqlite3.c	/^#define RNDTOWARDS /;"	d	file:
ROUND8	testdocs/sqlite3.c	/^#define ROUND8(/;"	d	file:
ROUNDDOWN8	testdocs/sqlite3.c	/^#define ROUNDDOWN8(/;"	d	file:
ROWSET_ALLOCATION_SIZE	testdocs/sqlite3.c	/^#define ROWSET_ALLOCATION_SIZE /;"	d	file:
ROWSET_ENTRY_PER_CHUNK	testdocs/sqlite3.c	/^#define ROWSET_ENTRY_PER_CHUNK /;"	d	file:
ROWSET_NEXT	testdocs/sqlite3.c	/^#define ROWSET_NEXT /;"	d	file:
ROWSET_SORTED	testdocs/sqlite3.c	/^#define ROWSET_SORTED /;"	d	file:
RTREE_CACHE_SZ	testdocs/sqlite3.c	/^#define RTREE_CACHE_SZ /;"	d	file:
RTREE_COORD_INT32	testdocs/sqlite3.c	/^#define RTREE_COORD_INT32 /;"	d	file:
RTREE_COORD_REAL32	testdocs/sqlite3.c	/^#define RTREE_COORD_REAL32 /;"	d	file:
RTREE_DECODE_COORD	testdocs/sqlite3.c	/^#define RTREE_DECODE_COORD(/;"	d	file:
RTREE_DEFAULT_ROWEST	testdocs/sqlite3.c	/^#define RTREE_DEFAULT_ROWEST /;"	d	file:
RTREE_EQ	testdocs/sqlite3.c	/^#define RTREE_EQ /;"	d	file:
RTREE_GE	testdocs/sqlite3.c	/^#define RTREE_GE /;"	d	file:
RTREE_GEOMETRY_MAGIC	testdocs/sqlite3.c	/^#define RTREE_GEOMETRY_MAGIC /;"	d	file:
RTREE_GT	testdocs/sqlite3.c	/^#define RTREE_GT /;"	d	file:
RTREE_LE	testdocs/sqlite3.c	/^#define RTREE_LE /;"	d	file:
RTREE_LT	testdocs/sqlite3.c	/^#define RTREE_LT /;"	d	file:
RTREE_MATCH	testdocs/sqlite3.c	/^#define RTREE_MATCH /;"	d	file:
RTREE_MAXCELLS	testdocs/sqlite3.c	/^#define RTREE_MAXCELLS /;"	d	file:
RTREE_MAX_DEPTH	testdocs/sqlite3.c	/^#define RTREE_MAX_DEPTH /;"	d	file:
RTREE_MAX_DIMENSIONS	testdocs/sqlite3.c	/^#define RTREE_MAX_DIMENSIONS /;"	d	file:
RTREE_MINCELLS	testdocs/sqlite3.c	/^#define RTREE_MINCELLS(/;"	d	file:
RTREE_MIN_ROWEST	testdocs/sqlite3.c	/^#define RTREE_MIN_ROWEST /;"	d	file:
RTREE_OF_CURSOR	testdocs/sqlite3.c	/^#define RTREE_OF_CURSOR(/;"	d	file:
RTREE_QUERY	testdocs/sqlite3.c	/^#define RTREE_QUERY /;"	d	file:
RTREE_QUEUE_TRACE	testdocs/sqlite3.c	/^# define RTREE_QUEUE_TRACE(/;"	d	file:
RTREE_REINSERT	testdocs/sqlite3.c	/^#define RTREE_REINSERT(/;"	d	file:
RTREE_ZERO	testdocs/sqlite3.c	/^# define RTREE_ZERO /;"	d	file:
RUNE_CRLF	utf.h	/^    RUNE_CRLF = -2,       \/* rune value representing a \\r\\n sequence *\/$/;"	e	enum:__anon40
RUNE_EOF	utf.h	/^    RUNE_EOF  = -1,       \/* rune value representing end of file *\/$/;"	e	enum:__anon40
RUNE_ERR	utf.h	/^    RUNE_ERR  = 0xFFFD,   \/* rune value representing an error *\/$/;"	e	enum:__anon40
RUNE_MAX	utf.h	/^    RUNE_MAX  = 0x10FFFF, \/* Maximum decodable rune value *\/$/;"	e	enum:__anon40
RUNE_SELF	utf.h	/^    RUNE_SELF = 0x80,     \/* byte values larger than this are *not* ascii *\/$/;"	e	enum:__anon40
RUN_EXTERN_TEST_SUITE	atf.h	/^#define RUN_EXTERN_TEST_SUITE(/;"	d
RUN_TEST_SUITE	atf.h	/^#define RUN_TEST_SUITE(/;"	d
RbuFrame	testdocs/sqlite3.c	/^struct RbuFrame {$/;"	s	file:
RbuFrame	testdocs/sqlite3.c	/^typedef struct RbuFrame RbuFrame;$/;"	t	typeref:struct:RbuFrame	file:
RbuObjIter	testdocs/sqlite3.c	/^struct RbuObjIter {$/;"	s	file:
RbuObjIter	testdocs/sqlite3.c	/^typedef struct RbuObjIter RbuObjIter;$/;"	t	typeref:struct:RbuObjIter	file:
RbuState	testdocs/sqlite3.c	/^struct RbuState {$/;"	s	file:
RbuState	testdocs/sqlite3.c	/^typedef struct RbuState RbuState;$/;"	t	typeref:struct:RbuState	file:
RbuUpdateStmt	testdocs/sqlite3.c	/^struct RbuUpdateStmt {$/;"	s	file:
RbuUpdateStmt	testdocs/sqlite3.c	/^typedef struct RbuUpdateStmt RbuUpdateStmt;$/;"	t	typeref:struct:RbuUpdateStmt	file:
RecordCompare	testdocs/sqlite3.c	/^typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);$/;"	t	file:
Reinsert	testdocs/sqlite3.c	/^static int Reinsert($/;"	f	file:
ReusableSpace	testdocs/sqlite3.c	/^struct ReusableSpace {$/;"	s	file:
RowSet	testdocs/sqlite3.c	/^struct RowSet {$/;"	s	file:
RowSet	testdocs/sqlite3.c	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet	file:
RowSetChunk	testdocs/sqlite3.c	/^struct RowSetChunk {$/;"	s	file:
RowSetEntry	testdocs/sqlite3.c	/^struct RowSetEntry {$/;"	s	file:
Rtree	testdocs/sqlite3.c	/^struct Rtree {$/;"	s	file:
Rtree	testdocs/sqlite3.c	/^typedef struct Rtree Rtree;$/;"	t	typeref:struct:Rtree	file:
RtreeCell	testdocs/sqlite3.c	/^struct RtreeCell {$/;"	s	file:
RtreeCell	testdocs/sqlite3.c	/^typedef struct RtreeCell RtreeCell;$/;"	t	typeref:struct:RtreeCell	file:
RtreeConstraint	testdocs/sqlite3.c	/^struct RtreeConstraint {$/;"	s	file:
RtreeConstraint	testdocs/sqlite3.c	/^typedef struct RtreeConstraint RtreeConstraint;$/;"	t	typeref:struct:RtreeConstraint	file:
RtreeCoord	testdocs/sqlite3.c	/^typedef union RtreeCoord RtreeCoord;$/;"	t	typeref:union:RtreeCoord	file:
RtreeCoord	testdocs/sqlite3.c	/^union RtreeCoord {$/;"	u	file:
RtreeCursor	testdocs/sqlite3.c	/^struct RtreeCursor {$/;"	s	file:
RtreeCursor	testdocs/sqlite3.c	/^typedef struct RtreeCursor RtreeCursor;$/;"	t	typeref:struct:RtreeCursor	file:
RtreeDValue	testdocs/sqlite3.c	/^  typedef double RtreeDValue;              \/* High accuracy coordinate *\/$/;"	t	file:
RtreeDValue	testdocs/sqlite3.c	/^  typedef sqlite3_int64 RtreeDValue;       \/* High accuracy coordinate *\/$/;"	t	file:
RtreeGeomCallback	testdocs/sqlite3.c	/^struct RtreeGeomCallback {$/;"	s	file:
RtreeGeomCallback	testdocs/sqlite3.c	/^typedef struct RtreeGeomCallback RtreeGeomCallback;$/;"	t	typeref:struct:RtreeGeomCallback	file:
RtreeMatchArg	testdocs/sqlite3.c	/^struct RtreeMatchArg {$/;"	s	file:
RtreeMatchArg	testdocs/sqlite3.c	/^typedef struct RtreeMatchArg RtreeMatchArg;$/;"	t	typeref:struct:RtreeMatchArg	file:
RtreeNode	testdocs/sqlite3.c	/^struct RtreeNode {$/;"	s	file:
RtreeNode	testdocs/sqlite3.c	/^typedef struct RtreeNode RtreeNode;$/;"	t	typeref:struct:RtreeNode	file:
RtreeSearchPoint	testdocs/sqlite3.c	/^struct RtreeSearchPoint {$/;"	s	file:
RtreeSearchPoint	testdocs/sqlite3.c	/^typedef struct RtreeSearchPoint RtreeSearchPoint;$/;"	t	typeref:struct:RtreeSearchPoint	file:
RtreeValue	testdocs/sqlite3.c	/^  typedef float RtreeValue;                \/* Low accuracy coordinate *\/$/;"	t	file:
RtreeValue	testdocs/sqlite3.c	/^  typedef int RtreeValue;                  \/* Low accuracy coordinate *\/$/;"	t	file:
Rune	utf.h	/^typedef int32_t Rune;$/;"	t
SAVEPOINT_BEGIN	testdocs/sqlite3.c	/^#define SAVEPOINT_BEGIN /;"	d	file:
SAVEPOINT_RELEASE	testdocs/sqlite3.c	/^#define SAVEPOINT_RELEASE /;"	d	file:
SAVEPOINT_ROLLBACK	testdocs/sqlite3.c	/^#define SAVEPOINT_ROLLBACK /;"	d	file:
SCHEMA_ENC	testdocs/sqlite3.c	/^#define SCHEMA_ENC(/;"	d	file:
SCHEMA_TABLE	testdocs/sqlite3.c	/^#define SCHEMA_TABLE(/;"	d	file:
SELECTTRACE	testdocs/sqlite3.c	/^# define SELECTTRACE(/;"	d	file:
SELECTTRACE_ENABLED	testdocs/sqlite3.c	/^# define SELECTTRACE_ENABLED /;"	d	file:
SESSIONS_STRM_CHUNK_SIZE	testdocs/sqlite3.c	/^#   define SESSIONS_STRM_CHUNK_SIZE /;"	d	file:
SESSION_UINT32	testdocs/sqlite3.c	/^#define SESSION_UINT32(/;"	d	file:
SETBIT	testdocs/sqlite3.c	/^#define SETBIT(/;"	d	file:
SET_FULLSYNC	testdocs/sqlite3.c	/^# define SET_FULLSYNC(/;"	d	file:
SF_Aggregate	testdocs/sqlite3.c	/^#define SF_Aggregate /;"	d	file:
SF_All	testdocs/sqlite3.c	/^#define SF_All /;"	d	file:
SF_Compound	testdocs/sqlite3.c	/^#define SF_Compound /;"	d	file:
SF_Converted	testdocs/sqlite3.c	/^#define SF_Converted /;"	d	file:
SF_Distinct	testdocs/sqlite3.c	/^#define SF_Distinct /;"	d	file:
SF_Expanded	testdocs/sqlite3.c	/^#define SF_Expanded /;"	d	file:
SF_FixedLimit	testdocs/sqlite3.c	/^#define SF_FixedLimit /;"	d	file:
SF_HasAgg	testdocs/sqlite3.c	/^#define SF_HasAgg /;"	d	file:
SF_HasTypeInfo	testdocs/sqlite3.c	/^#define SF_HasTypeInfo /;"	d	file:
SF_IncludeHidden	testdocs/sqlite3.c	/^#define SF_IncludeHidden /;"	d	file:
SF_MaybeConvert	testdocs/sqlite3.c	/^#define SF_MaybeConvert /;"	d	file:
SF_MinMaxAgg	testdocs/sqlite3.c	/^#define SF_MinMaxAgg /;"	d	file:
SF_MultiValue	testdocs/sqlite3.c	/^#define SF_MultiValue /;"	d	file:
SF_NestedFrom	testdocs/sqlite3.c	/^#define SF_NestedFrom /;"	d	file:
SF_Recursive	testdocs/sqlite3.c	/^#define SF_Recursive /;"	d	file:
SF_Resolved	testdocs/sqlite3.c	/^#define SF_Resolved /;"	d	file:
SF_UsesEphemeral	testdocs/sqlite3.c	/^#define SF_UsesEphemeral /;"	d	file:
SF_Values	testdocs/sqlite3.c	/^#define SF_Values /;"	d	file:
SHARED_FIRST	testdocs/sqlite3.c	/^#define SHARED_FIRST /;"	d	file:
SHARED_LOCK	testdocs/sqlite3.c	/^#define SHARED_LOCK /;"	d	file:
SHARED_SIZE	testdocs/sqlite3.c	/^#define SHARED_SIZE /;"	d	file:
SLOT_2_0	testdocs/sqlite3.c	/^#define SLOT_2_0 /;"	d	file:
SLOT_4_2_0	testdocs/sqlite3.c	/^#define SLOT_4_2_0 /;"	d	file:
SMALLEST_INT64	testdocs/sqlite3.c	/^# define SMALLEST_INT64 /;"	d	file:
SMALLEST_INT64	testdocs/sqlite3.c	/^#define SMALLEST_INT64 /;"	d	file:
SORTER_MAX_MERGE_COUNT	testdocs/sqlite3.c	/^#define SORTER_MAX_MERGE_COUNT /;"	d	file:
SORTER_TYPE_INTEGER	testdocs/sqlite3.c	/^#define SORTER_TYPE_INTEGER /;"	d	file:
SORTER_TYPE_TEXT	testdocs/sqlite3.c	/^#define SORTER_TYPE_TEXT /;"	d	file:
SORTFLAG_UseSorter	testdocs/sqlite3.c	/^#define SORTFLAG_UseSorter /;"	d	file:
SPILLFLAG_NOSYNC	testdocs/sqlite3.c	/^#define SPILLFLAG_NOSYNC /;"	d	file:
SPILLFLAG_OFF	testdocs/sqlite3.c	/^#define SPILLFLAG_OFF /;"	d	file:
SPILLFLAG_ROLLBACK	testdocs/sqlite3.c	/^#define SPILLFLAG_ROLLBACK /;"	d	file:
SQLITE3EXT_H	testdocs/sqlite3.c	/^#define SQLITE3EXT_H$/;"	d	file:
SQLITE3_H	testdocs/sqlite3.c	/^#define SQLITE3_H$/;"	d	file:
SQLITE3_MUTEX_INITIALIZER	testdocs/sqlite3.c	/^#define SQLITE3_MUTEX_INITIALIZER /;"	d	file:
SQLITE3_TEXT	testdocs/sqlite3.c	/^#define SQLITE3_TEXT /;"	d	file:
SQLITEINT_H	testdocs/sqlite3.c	/^#define SQLITEINT_H$/;"	d	file:
SQLITE_ABORT	testdocs/sqlite3.c	/^#define SQLITE_ABORT /;"	d	file:
SQLITE_ABORT_ROLLBACK	testdocs/sqlite3.c	/^#define SQLITE_ABORT_ROLLBACK /;"	d	file:
SQLITE_ACCESS_EXISTS	testdocs/sqlite3.c	/^#define SQLITE_ACCESS_EXISTS /;"	d	file:
SQLITE_ACCESS_READ	testdocs/sqlite3.c	/^#define SQLITE_ACCESS_READ /;"	d	file:
SQLITE_ACCESS_READWRITE	testdocs/sqlite3.c	/^#define SQLITE_ACCESS_READWRITE /;"	d	file:
SQLITE_AFF_BLOB	testdocs/sqlite3.c	/^#define SQLITE_AFF_BLOB /;"	d	file:
SQLITE_AFF_INTEGER	testdocs/sqlite3.c	/^#define SQLITE_AFF_INTEGER /;"	d	file:
SQLITE_AFF_MASK	testdocs/sqlite3.c	/^#define SQLITE_AFF_MASK /;"	d	file:
SQLITE_AFF_NUMERIC	testdocs/sqlite3.c	/^#define SQLITE_AFF_NUMERIC /;"	d	file:
SQLITE_AFF_REAL	testdocs/sqlite3.c	/^#define SQLITE_AFF_REAL /;"	d	file:
SQLITE_AFF_TEXT	testdocs/sqlite3.c	/^#define SQLITE_AFF_TEXT /;"	d	file:
SQLITE_ALLOW_COVERING_INDEX_SCAN	testdocs/sqlite3.c	/^# define SQLITE_ALLOW_COVERING_INDEX_SCAN /;"	d	file:
SQLITE_ALTER_TABLE	testdocs/sqlite3.c	/^#define SQLITE_ALTER_TABLE /;"	d	file:
SQLITE_AMALGAMATION	testdocs/sqlite3.c	/^#define SQLITE_AMALGAMATION /;"	d	file:
SQLITE_ANALYZE	testdocs/sqlite3.c	/^#define SQLITE_ANALYZE /;"	d	file:
SQLITE_ANY	testdocs/sqlite3.c	/^#define SQLITE_ANY /;"	d	file:
SQLITE_API	testdocs/sqlite3.c	/^# define SQLITE_API$/;"	d	file:
SQLITE_APICALL	testdocs/sqlite3.c	/^# define SQLITE_APICALL$/;"	d	file:
SQLITE_ASCII	testdocs/sqlite3.c	/^# define SQLITE_ASCII /;"	d	file:
SQLITE_ATTACH	testdocs/sqlite3.c	/^#define SQLITE_ATTACH /;"	d	file:
SQLITE_AUTH	testdocs/sqlite3.c	/^#define SQLITE_AUTH /;"	d	file:
SQLITE_AUTH_USER	testdocs/sqlite3.c	/^#define SQLITE_AUTH_USER /;"	d	file:
SQLITE_AllOpts	testdocs/sqlite3.c	/^#define SQLITE_AllOpts /;"	d	file:
SQLITE_AutoIndex	testdocs/sqlite3.c	/^#define SQLITE_AutoIndex /;"	d	file:
SQLITE_BIGENDIAN	testdocs/sqlite3.c	/^# define SQLITE_BIGENDIAN /;"	d	file:
SQLITE_BIG_DBL	testdocs/sqlite3.c	/^#   define SQLITE_BIG_DBL /;"	d	file:
SQLITE_BIG_DBL	testdocs/sqlite3.c	/^# define SQLITE_BIG_DBL /;"	d	file:
SQLITE_BLDF_INDEXED	testdocs/sqlite3.c	/^#define SQLITE_BLDF_INDEXED /;"	d	file:
SQLITE_BLDF_UNIQUE	testdocs/sqlite3.c	/^#define SQLITE_BLDF_UNIQUE /;"	d	file:
SQLITE_BLOB	testdocs/sqlite3.c	/^#define SQLITE_BLOB /;"	d	file:
SQLITE_BTREE_H	testdocs/sqlite3.c	/^#define SQLITE_BTREE_H$/;"	d	file:
SQLITE_BUSY	testdocs/sqlite3.c	/^#define SQLITE_BUSY /;"	d	file:
SQLITE_BUSY_RECOVERY	testdocs/sqlite3.c	/^#define SQLITE_BUSY_RECOVERY /;"	d	file:
SQLITE_BUSY_SNAPSHOT	testdocs/sqlite3.c	/^#define SQLITE_BUSY_SNAPSHOT /;"	d	file:
SQLITE_BYTEORDER	testdocs/sqlite3.c	/^#   define SQLITE_BYTEORDER /;"	d	file:
SQLITE_BYTEORDER	testdocs/sqlite3.c	/^# define SQLITE_BYTEORDER /;"	d	file:
SQLITE_CALLBACK	testdocs/sqlite3.c	/^# define SQLITE_CALLBACK$/;"	d	file:
SQLITE_CANTOPEN	testdocs/sqlite3.c	/^#define SQLITE_CANTOPEN /;"	d	file:
SQLITE_CANTOPEN_BKPT	testdocs/sqlite3.c	/^#define SQLITE_CANTOPEN_BKPT /;"	d	file:
SQLITE_CANTOPEN_CONVPATH	testdocs/sqlite3.c	/^#define SQLITE_CANTOPEN_CONVPATH /;"	d	file:
SQLITE_CANTOPEN_FULLPATH	testdocs/sqlite3.c	/^#define SQLITE_CANTOPEN_FULLPATH /;"	d	file:
SQLITE_CANTOPEN_ISDIR	testdocs/sqlite3.c	/^#define SQLITE_CANTOPEN_ISDIR /;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	testdocs/sqlite3.c	/^#define SQLITE_CANTOPEN_NOTEMPDIR /;"	d	file:
SQLITE_CDECL	testdocs/sqlite3.c	/^# define SQLITE_CDECL$/;"	d	file:
SQLITE_CHANGESET_ABORT	testdocs/sqlite3.c	/^#define SQLITE_CHANGESET_ABORT /;"	d	file:
SQLITE_CHANGESET_CONFLICT	testdocs/sqlite3.c	/^#define SQLITE_CHANGESET_CONFLICT /;"	d	file:
SQLITE_CHANGESET_CONSTRAINT	testdocs/sqlite3.c	/^#define SQLITE_CHANGESET_CONSTRAINT /;"	d	file:
SQLITE_CHANGESET_DATA	testdocs/sqlite3.c	/^#define SQLITE_CHANGESET_DATA /;"	d	file:
SQLITE_CHANGESET_FOREIGN_KEY	testdocs/sqlite3.c	/^#define SQLITE_CHANGESET_FOREIGN_KEY /;"	d	file:
SQLITE_CHANGESET_NOTFOUND	testdocs/sqlite3.c	/^#define SQLITE_CHANGESET_NOTFOUND /;"	d	file:
SQLITE_CHANGESET_OMIT	testdocs/sqlite3.c	/^#define SQLITE_CHANGESET_OMIT /;"	d	file:
SQLITE_CHANGESET_REPLACE	testdocs/sqlite3.c	/^#define SQLITE_CHANGESET_REPLACE /;"	d	file:
SQLITE_CHECKPOINT_FULL	testdocs/sqlite3.c	/^#define SQLITE_CHECKPOINT_FULL /;"	d	file:
SQLITE_CHECKPOINT_PASSIVE	testdocs/sqlite3.c	/^#define SQLITE_CHECKPOINT_PASSIVE /;"	d	file:
SQLITE_CHECKPOINT_RESTART	testdocs/sqlite3.c	/^#define SQLITE_CHECKPOINT_RESTART /;"	d	file:
SQLITE_CHECKPOINT_TRUNCATE	testdocs/sqlite3.c	/^#define SQLITE_CHECKPOINT_TRUNCATE /;"	d	file:
SQLITE_CONFIG_COVERING_INDEX_SCAN	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_COVERING_INDEX_SCAN /;"	d	file:
SQLITE_CONFIG_GETMALLOC	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_GETMALLOC /;"	d	file:
SQLITE_CONFIG_GETMUTEX	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_GETMUTEX /;"	d	file:
SQLITE_CONFIG_GETPCACHE	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_GETPCACHE /;"	d	file:
SQLITE_CONFIG_GETPCACHE2	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_GETPCACHE2 /;"	d	file:
SQLITE_CONFIG_HEAP	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_HEAP /;"	d	file:
SQLITE_CONFIG_LOG	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_LOG /;"	d	file:
SQLITE_CONFIG_LOOKASIDE	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_LOOKASIDE /;"	d	file:
SQLITE_CONFIG_MALLOC	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_MALLOC /;"	d	file:
SQLITE_CONFIG_MEMSTATUS	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_MEMSTATUS /;"	d	file:
SQLITE_CONFIG_MMAP_SIZE	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_MMAP_SIZE /;"	d	file:
SQLITE_CONFIG_MULTITHREAD	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_MULTITHREAD /;"	d	file:
SQLITE_CONFIG_MUTEX	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_MUTEX /;"	d	file:
SQLITE_CONFIG_PAGECACHE	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_PAGECACHE /;"	d	file:
SQLITE_CONFIG_PCACHE	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_PCACHE /;"	d	file:
SQLITE_CONFIG_PCACHE2	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_PCACHE2 /;"	d	file:
SQLITE_CONFIG_PCACHE_HDRSZ	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_PCACHE_HDRSZ /;"	d	file:
SQLITE_CONFIG_PMASZ	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_PMASZ /;"	d	file:
SQLITE_CONFIG_SCRATCH	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_SCRATCH /;"	d	file:
SQLITE_CONFIG_SERIALIZED	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_SERIALIZED /;"	d	file:
SQLITE_CONFIG_SINGLETHREAD	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_SINGLETHREAD /;"	d	file:
SQLITE_CONFIG_SQLLOG	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_SQLLOG /;"	d	file:
SQLITE_CONFIG_STMTJRNL_SPILL	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_STMTJRNL_SPILL /;"	d	file:
SQLITE_CONFIG_URI	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_URI /;"	d	file:
SQLITE_CONFIG_WIN32_HEAPSIZE	testdocs/sqlite3.c	/^#define SQLITE_CONFIG_WIN32_HEAPSIZE /;"	d	file:
SQLITE_CONSTRAINT	testdocs/sqlite3.c	/^#define SQLITE_CONSTRAINT /;"	d	file:
SQLITE_CONSTRAINT_CHECK	testdocs/sqlite3.c	/^#define SQLITE_CONSTRAINT_CHECK /;"	d	file:
SQLITE_CONSTRAINT_COMMITHOOK	testdocs/sqlite3.c	/^#define SQLITE_CONSTRAINT_COMMITHOOK /;"	d	file:
SQLITE_CONSTRAINT_FOREIGNKEY	testdocs/sqlite3.c	/^#define SQLITE_CONSTRAINT_FOREIGNKEY /;"	d	file:
SQLITE_CONSTRAINT_FUNCTION	testdocs/sqlite3.c	/^#define SQLITE_CONSTRAINT_FUNCTION /;"	d	file:
SQLITE_CONSTRAINT_NOTNULL	testdocs/sqlite3.c	/^#define SQLITE_CONSTRAINT_NOTNULL /;"	d	file:
SQLITE_CONSTRAINT_PRIMARYKEY	testdocs/sqlite3.c	/^#define SQLITE_CONSTRAINT_PRIMARYKEY /;"	d	file:
SQLITE_CONSTRAINT_ROWID	testdocs/sqlite3.c	/^#define SQLITE_CONSTRAINT_ROWID /;"	d	file:
SQLITE_CONSTRAINT_TRIGGER	testdocs/sqlite3.c	/^#define SQLITE_CONSTRAINT_TRIGGER /;"	d	file:
SQLITE_CONSTRAINT_UNIQUE	testdocs/sqlite3.c	/^#define SQLITE_CONSTRAINT_UNIQUE /;"	d	file:
SQLITE_CONSTRAINT_VTAB	testdocs/sqlite3.c	/^#define SQLITE_CONSTRAINT_VTAB /;"	d	file:
SQLITE_COPY	testdocs/sqlite3.c	/^#define SQLITE_COPY /;"	d	file:
SQLITE_CORE	testdocs/sqlite3.c	/^  #define SQLITE_CORE /;"	d	file:
SQLITE_CORE	testdocs/sqlite3.c	/^# define SQLITE_CORE /;"	d	file:
SQLITE_CORE	testdocs/sqlite3.c	/^#define SQLITE_CORE /;"	d	file:
SQLITE_CORRUPT	testdocs/sqlite3.c	/^#define SQLITE_CORRUPT /;"	d	file:
SQLITE_CORRUPT_BKPT	testdocs/sqlite3.c	/^#define SQLITE_CORRUPT_BKPT /;"	d	file:
SQLITE_CORRUPT_VTAB	testdocs/sqlite3.c	/^#define SQLITE_CORRUPT_VTAB /;"	d	file:
SQLITE_CREATE_INDEX	testdocs/sqlite3.c	/^#define SQLITE_CREATE_INDEX /;"	d	file:
SQLITE_CREATE_TABLE	testdocs/sqlite3.c	/^#define SQLITE_CREATE_TABLE /;"	d	file:
SQLITE_CREATE_TEMP_INDEX	testdocs/sqlite3.c	/^#define SQLITE_CREATE_TEMP_INDEX /;"	d	file:
SQLITE_CREATE_TEMP_TABLE	testdocs/sqlite3.c	/^#define SQLITE_CREATE_TEMP_TABLE /;"	d	file:
SQLITE_CREATE_TEMP_TRIGGER	testdocs/sqlite3.c	/^#define SQLITE_CREATE_TEMP_TRIGGER /;"	d	file:
SQLITE_CREATE_TEMP_VIEW	testdocs/sqlite3.c	/^#define SQLITE_CREATE_TEMP_VIEW /;"	d	file:
SQLITE_CREATE_TRIGGER	testdocs/sqlite3.c	/^#define SQLITE_CREATE_TRIGGER /;"	d	file:
SQLITE_CREATE_VIEW	testdocs/sqlite3.c	/^#define SQLITE_CREATE_VIEW /;"	d	file:
SQLITE_CREATE_VTABLE	testdocs/sqlite3.c	/^#define SQLITE_CREATE_VTABLE /;"	d	file:
SQLITE_CacheSpill	testdocs/sqlite3.c	/^#define SQLITE_CacheSpill /;"	d	file:
SQLITE_CellSizeCk	testdocs/sqlite3.c	/^#define SQLITE_CellSizeCk /;"	d	file:
SQLITE_CkptFullFSync	testdocs/sqlite3.c	/^#define SQLITE_CkptFullFSync /;"	d	file:
SQLITE_ColumnCache	testdocs/sqlite3.c	/^#define SQLITE_ColumnCache /;"	d	file:
SQLITE_CountRows	testdocs/sqlite3.c	/^#define SQLITE_CountRows /;"	d	file:
SQLITE_CoverIdxScan	testdocs/sqlite3.c	/^#define SQLITE_CoverIdxScan /;"	d	file:
SQLITE_CursorHints	testdocs/sqlite3.c	/^#define SQLITE_CursorHints /;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	testdocs/sqlite3.c	/^#define SQLITE_DBCONFIG_ENABLE_FKEY /;"	d	file:
SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER	testdocs/sqlite3.c	/^#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER /;"	d	file:
SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION	testdocs/sqlite3.c	/^#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION /;"	d	file:
SQLITE_DBCONFIG_ENABLE_TRIGGER	testdocs/sqlite3.c	/^#define SQLITE_DBCONFIG_ENABLE_TRIGGER /;"	d	file:
SQLITE_DBCONFIG_LOOKASIDE	testdocs/sqlite3.c	/^#define SQLITE_DBCONFIG_LOOKASIDE /;"	d	file:
SQLITE_DBCONFIG_MAINDBNAME	testdocs/sqlite3.c	/^#define SQLITE_DBCONFIG_MAINDBNAME /;"	d	file:
SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE	testdocs/sqlite3.c	/^#define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE /;"	d	file:
SQLITE_DBSTATUS_CACHE_HIT	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_CACHE_HIT /;"	d	file:
SQLITE_DBSTATUS_CACHE_MISS	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_CACHE_MISS /;"	d	file:
SQLITE_DBSTATUS_CACHE_USED	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_CACHE_USED /;"	d	file:
SQLITE_DBSTATUS_CACHE_USED_SHARED	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_CACHE_USED_SHARED /;"	d	file:
SQLITE_DBSTATUS_CACHE_WRITE	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_CACHE_WRITE /;"	d	file:
SQLITE_DBSTATUS_DEFERRED_FKS	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_DEFERRED_FKS /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_HIT	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_HIT /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_USED	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_USED /;"	d	file:
SQLITE_DBSTATUS_MAX	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_MAX /;"	d	file:
SQLITE_DBSTATUS_SCHEMA_USED	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_SCHEMA_USED /;"	d	file:
SQLITE_DBSTATUS_STMT_USED	testdocs/sqlite3.c	/^#define SQLITE_DBSTATUS_STMT_USED /;"	d	file:
SQLITE_DEBUG_OS_TRACE	testdocs/sqlite3.c	/^#   define SQLITE_DEBUG_OS_TRACE /;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	testdocs/sqlite3.c	/^  #define SQLITE_DEFAULT_AUTOVACUUM /;"	d	file:
SQLITE_DEFAULT_CACHE_SIZE	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_CACHE_SIZE /;"	d	file:
SQLITE_DEFAULT_FILE_FORMAT	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_FILE_FORMAT /;"	d	file:
SQLITE_DEFAULT_FILE_PERMISSIONS	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_FILE_PERMISSIONS /;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	testdocs/sqlite3.c	/^  #define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT /;"	d	file:
SQLITE_DEFAULT_LOOKASIDE	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_LOOKASIDE /;"	d	file:
SQLITE_DEFAULT_MEMSTATUS	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_MEMSTATUS /;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_MMAP_SIZE /;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	testdocs/sqlite3.c	/^# undef SQLITE_DEFAULT_MMAP_SIZE$/;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE_xc	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_MMAP_SIZE_xc /;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_PAGE_SIZE /;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	testdocs/sqlite3.c	/^# undef SQLITE_DEFAULT_PAGE_SIZE$/;"	d	file:
SQLITE_DEFAULT_PCACHE_INITSZ	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_PCACHE_INITSZ /;"	d	file:
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_PROXYDIR_PERMISSIONS /;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_RECURSIVE_TRIGGERS /;"	d	file:
SQLITE_DEFAULT_SECTOR_SIZE	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_SECTOR_SIZE /;"	d	file:
SQLITE_DEFAULT_SYNCHRONOUS	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_SYNCHRONOUS /;"	d	file:
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_WAL_AUTOCHECKPOINT /;"	d	file:
SQLITE_DEFAULT_WAL_SYNCHRONOUS	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_WAL_SYNCHRONOUS /;"	d	file:
SQLITE_DEFAULT_WORKER_THREADS	testdocs/sqlite3.c	/^# define SQLITE_DEFAULT_WORKER_THREADS /;"	d	file:
SQLITE_DELETE	testdocs/sqlite3.c	/^#define SQLITE_DELETE /;"	d	file:
SQLITE_DENY	testdocs/sqlite3.c	/^#define SQLITE_DENY /;"	d	file:
SQLITE_DEPRECATED	testdocs/sqlite3.c	/^#define SQLITE_DEPRECATED$/;"	d	file:
SQLITE_DETACH	testdocs/sqlite3.c	/^#define SQLITE_DETACH /;"	d	file:
SQLITE_DETERMINISTIC	testdocs/sqlite3.c	/^#define SQLITE_DETERMINISTIC /;"	d	file:
SQLITE_DONE	testdocs/sqlite3.c	/^#define SQLITE_DONE /;"	d	file:
SQLITE_DROP_INDEX	testdocs/sqlite3.c	/^#define SQLITE_DROP_INDEX /;"	d	file:
SQLITE_DROP_TABLE	testdocs/sqlite3.c	/^#define SQLITE_DROP_TABLE /;"	d	file:
SQLITE_DROP_TEMP_INDEX	testdocs/sqlite3.c	/^#define SQLITE_DROP_TEMP_INDEX /;"	d	file:
SQLITE_DROP_TEMP_TABLE	testdocs/sqlite3.c	/^#define SQLITE_DROP_TEMP_TABLE /;"	d	file:
SQLITE_DROP_TEMP_TRIGGER	testdocs/sqlite3.c	/^#define SQLITE_DROP_TEMP_TRIGGER /;"	d	file:
SQLITE_DROP_TEMP_VIEW	testdocs/sqlite3.c	/^#define SQLITE_DROP_TEMP_VIEW /;"	d	file:
SQLITE_DROP_TRIGGER	testdocs/sqlite3.c	/^#define SQLITE_DROP_TRIGGER /;"	d	file:
SQLITE_DROP_VIEW	testdocs/sqlite3.c	/^#define SQLITE_DROP_VIEW /;"	d	file:
SQLITE_DROP_VTABLE	testdocs/sqlite3.c	/^#define SQLITE_DROP_VTABLE /;"	d	file:
SQLITE_DYNAMIC	testdocs/sqlite3.c	/^#define SQLITE_DYNAMIC /;"	d	file:
SQLITE_DeferFKs	testdocs/sqlite3.c	/^#define SQLITE_DeferFKs /;"	d	file:
SQLITE_DistinctOpt	testdocs/sqlite3.c	/^#define SQLITE_DistinctOpt /;"	d	file:
SQLITE_EBCDIC	testdocs/sqlite3.c	/^# define SQLITE_EBCDIC /;"	d	file:
SQLITE_ECEL_DUP	testdocs/sqlite3.c	/^#define SQLITE_ECEL_DUP /;"	d	file:
SQLITE_ECEL_FACTOR	testdocs/sqlite3.c	/^#define SQLITE_ECEL_FACTOR /;"	d	file:
SQLITE_ECEL_OMITREF	testdocs/sqlite3.c	/^#define SQLITE_ECEL_OMITREF /;"	d	file:
SQLITE_ECEL_REF	testdocs/sqlite3.c	/^#define SQLITE_ECEL_REF /;"	d	file:
SQLITE_EMPTY	testdocs/sqlite3.c	/^#define SQLITE_EMPTY /;"	d	file:
SQLITE_ENABLE_EXPLAIN_COMMENTS	testdocs/sqlite3.c	/^# define SQLITE_ENABLE_EXPLAIN_COMMENTS /;"	d	file:
SQLITE_ENABLE_EXPLAIN_COMMENTS	testdocs/sqlite3.c	/^# undef SQLITE_ENABLE_EXPLAIN_COMMENTS$/;"	d	file:
SQLITE_ENABLE_FTS3	testdocs/sqlite3.c	/^# define SQLITE_ENABLE_FTS3 /;"	d	file:
SQLITE_ENABLE_FTS3	testdocs/sqlite3.c	/^# define SQLITE_ENABLE_FTS3$/;"	d	file:
SQLITE_ENABLE_FTS3	testdocs/sqlite3.c	/^# undef SQLITE_ENABLE_FTS3$/;"	d	file:
SQLITE_ENABLE_FTS4	testdocs/sqlite3.c	/^# undef SQLITE_ENABLE_FTS4$/;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	testdocs/sqlite3.c	/^#    define SQLITE_ENABLE_LOCKING_STYLE /;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	testdocs/sqlite3.c	/^#define SQLITE_ENABLE_LOCKING_STYLE /;"	d	file:
SQLITE_ENABLE_MEMSYS3	testdocs/sqlite3.c	/^#undef SQLITE_ENABLE_MEMSYS3$/;"	d	file:
SQLITE_ENABLE_STAT3	testdocs/sqlite3.c	/^# undef SQLITE_ENABLE_STAT3$/;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	testdocs/sqlite3.c	/^# define SQLITE_ENABLE_STAT3_OR_STAT4 /;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	testdocs/sqlite3.c	/^# undef SQLITE_ENABLE_STAT3_OR_STAT4$/;"	d	file:
SQLITE_ERROR	testdocs/sqlite3.c	/^#define SQLITE_ERROR /;"	d	file:
SQLITE_EXPERIMENTAL	testdocs/sqlite3.c	/^#define SQLITE_EXPERIMENTAL$/;"	d	file:
SQLITE_EXTENSION_INIT1	testdocs/sqlite3.c	/^# define SQLITE_EXTENSION_INIT1 /;"	d	file:
SQLITE_EXTENSION_INIT2	testdocs/sqlite3.c	/^# define SQLITE_EXTENSION_INIT2(/;"	d	file:
SQLITE_EXTENSION_INIT3	testdocs/sqlite3.c	/^# define SQLITE_EXTENSION_INIT3 /;"	d	file:
SQLITE_EXTERN	testdocs/sqlite3.c	/^# define SQLITE_EXTERN /;"	d	file:
SQLITE_EnableTrigger	testdocs/sqlite3.c	/^#define SQLITE_EnableTrigger /;"	d	file:
SQLITE_FAIL	testdocs/sqlite3.c	/^#define SQLITE_FAIL /;"	d	file:
SQLITE_FAULTINJECTOR_COUNT	testdocs/sqlite3.c	/^#define SQLITE_FAULTINJECTOR_COUNT /;"	d	file:
SQLITE_FAULTINJECTOR_MALLOC	testdocs/sqlite3.c	/^#define SQLITE_FAULTINJECTOR_MALLOC /;"	d	file:
SQLITE_FCNTL_BUSYHANDLER	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_BUSYHANDLER /;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_CHUNK_SIZE /;"	d	file:
SQLITE_FCNTL_COMMIT_PHASETWO	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_COMMIT_PHASETWO /;"	d	file:
SQLITE_FCNTL_DB_UNCHANGED	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_DB_UNCHANGED /;"	d	file:
SQLITE_FCNTL_FILE_POINTER	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_FILE_POINTER /;"	d	file:
SQLITE_FCNTL_GET_LOCKPROXYFILE	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_GET_LOCKPROXYFILE /;"	d	file:
SQLITE_FCNTL_HAS_MOVED	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_HAS_MOVED /;"	d	file:
SQLITE_FCNTL_JOURNAL_POINTER	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_JOURNAL_POINTER /;"	d	file:
SQLITE_FCNTL_LAST_ERRNO	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_LAST_ERRNO /;"	d	file:
SQLITE_FCNTL_LOCKSTATE	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_LOCKSTATE /;"	d	file:
SQLITE_FCNTL_MMAP_SIZE	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_MMAP_SIZE /;"	d	file:
SQLITE_FCNTL_OVERWRITE	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_OVERWRITE /;"	d	file:
SQLITE_FCNTL_PDB	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_PDB /;"	d	file:
SQLITE_FCNTL_PERSIST_WAL	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_PERSIST_WAL /;"	d	file:
SQLITE_FCNTL_POWERSAFE_OVERWRITE	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_POWERSAFE_OVERWRITE /;"	d	file:
SQLITE_FCNTL_PRAGMA	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_PRAGMA /;"	d	file:
SQLITE_FCNTL_RBU	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_RBU /;"	d	file:
SQLITE_FCNTL_RBUCNT	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_RBUCNT /;"	d	file:
SQLITE_FCNTL_SET_LOCKPROXYFILE	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_SET_LOCKPROXYFILE /;"	d	file:
SQLITE_FCNTL_SIZE_HINT	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_SIZE_HINT /;"	d	file:
SQLITE_FCNTL_SYNC	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_SYNC /;"	d	file:
SQLITE_FCNTL_SYNC_OMITTED	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_SYNC_OMITTED /;"	d	file:
SQLITE_FCNTL_TEMPFILENAME	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_TEMPFILENAME /;"	d	file:
SQLITE_FCNTL_TRACE	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_TRACE /;"	d	file:
SQLITE_FCNTL_VFSNAME	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_VFSNAME /;"	d	file:
SQLITE_FCNTL_VFS_POINTER	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_VFS_POINTER /;"	d	file:
SQLITE_FCNTL_WAL_BLOCK	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_WAL_BLOCK /;"	d	file:
SQLITE_FCNTL_WIN32_AV_RETRY	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_WIN32_AV_RETRY /;"	d	file:
SQLITE_FCNTL_WIN32_GET_HANDLE	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_WIN32_GET_HANDLE /;"	d	file:
SQLITE_FCNTL_WIN32_SET_HANDLE	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_WIN32_SET_HANDLE /;"	d	file:
SQLITE_FCNTL_ZIPVFS	testdocs/sqlite3.c	/^#define SQLITE_FCNTL_ZIPVFS /;"	d	file:
SQLITE_FILE_HEADER	testdocs/sqlite3.c	/^#  define SQLITE_FILE_HEADER /;"	d	file:
SQLITE_FLOAT	testdocs/sqlite3.c	/^#define SQLITE_FLOAT /;"	d	file:
SQLITE_FORMAT	testdocs/sqlite3.c	/^#define SQLITE_FORMAT /;"	d	file:
SQLITE_FREE	testdocs/sqlite3.c	/^#define SQLITE_FREE(/;"	d	file:
SQLITE_FSFLAGS_IS_MSDOS	testdocs/sqlite3.c	/^#define SQLITE_FSFLAGS_IS_MSDOS /;"	d	file:
SQLITE_FTS3_DEFAULT_NEAR_PARAM	testdocs/sqlite3.c	/^#define SQLITE_FTS3_DEFAULT_NEAR_PARAM /;"	d	file:
SQLITE_FTS3_MAX_EXPR_DEPTH	testdocs/sqlite3.c	/^# define SQLITE_FTS3_MAX_EXPR_DEPTH /;"	d	file:
SQLITE_FULL	testdocs/sqlite3.c	/^#define SQLITE_FULL /;"	d	file:
SQLITE_FUNCTION	testdocs/sqlite3.c	/^#define SQLITE_FUNCTION /;"	d	file:
SQLITE_FUNC_AFFINITY	testdocs/sqlite3.c	/^#define SQLITE_FUNC_AFFINITY /;"	d	file:
SQLITE_FUNC_CASE	testdocs/sqlite3.c	/^#define SQLITE_FUNC_CASE /;"	d	file:
SQLITE_FUNC_COALESCE	testdocs/sqlite3.c	/^#define SQLITE_FUNC_COALESCE /;"	d	file:
SQLITE_FUNC_CONSTANT	testdocs/sqlite3.c	/^#define SQLITE_FUNC_CONSTANT /;"	d	file:
SQLITE_FUNC_COUNT	testdocs/sqlite3.c	/^#define SQLITE_FUNC_COUNT /;"	d	file:
SQLITE_FUNC_ENCMASK	testdocs/sqlite3.c	/^#define SQLITE_FUNC_ENCMASK /;"	d	file:
SQLITE_FUNC_EPHEM	testdocs/sqlite3.c	/^#define SQLITE_FUNC_EPHEM /;"	d	file:
SQLITE_FUNC_HASH_SZ	testdocs/sqlite3.c	/^#define SQLITE_FUNC_HASH_SZ /;"	d	file:
SQLITE_FUNC_LENGTH	testdocs/sqlite3.c	/^#define SQLITE_FUNC_LENGTH /;"	d	file:
SQLITE_FUNC_LIKE	testdocs/sqlite3.c	/^#define SQLITE_FUNC_LIKE /;"	d	file:
SQLITE_FUNC_MINMAX	testdocs/sqlite3.c	/^#define SQLITE_FUNC_MINMAX /;"	d	file:
SQLITE_FUNC_NEEDCOLL	testdocs/sqlite3.c	/^#define SQLITE_FUNC_NEEDCOLL /;"	d	file:
SQLITE_FUNC_SLOCHNG	testdocs/sqlite3.c	/^#define SQLITE_FUNC_SLOCHNG /;"	d	file:
SQLITE_FUNC_TYPEOF	testdocs/sqlite3.c	/^#define SQLITE_FUNC_TYPEOF /;"	d	file:
SQLITE_FUNC_UNLIKELY	testdocs/sqlite3.c	/^#define SQLITE_FUNC_UNLIKELY /;"	d	file:
SQLITE_FactorOutConst	testdocs/sqlite3.c	/^#define SQLITE_FactorOutConst /;"	d	file:
SQLITE_ForeignKeys	testdocs/sqlite3.c	/^#define SQLITE_ForeignKeys /;"	d	file:
SQLITE_Fts3Tokenizer	testdocs/sqlite3.c	/^#define SQLITE_Fts3Tokenizer /;"	d	file:
SQLITE_FullColNames	testdocs/sqlite3.c	/^#define SQLITE_FullColNames /;"	d	file:
SQLITE_FullFSync	testdocs/sqlite3.c	/^#define SQLITE_FullFSync /;"	d	file:
SQLITE_GET_LOCKPROXYFILE	testdocs/sqlite3.c	/^#define SQLITE_GET_LOCKPROXYFILE /;"	d	file:
SQLITE_GroupByOrder	testdocs/sqlite3.c	/^#define SQLITE_GroupByOrder /;"	d	file:
SQLITE_HASH_H	testdocs/sqlite3.c	/^#define SQLITE_HASH_H$/;"	d	file:
SQLITE_HAVE_ISNAN	testdocs/sqlite3.c	/^# undef SQLITE_HAVE_ISNAN$/;"	d	file:
SQLITE_HAVE_OS_TRACE	testdocs/sqlite3.c	/^# define SQLITE_HAVE_OS_TRACE$/;"	d	file:
SQLITE_HAVE_OS_TRACE	testdocs/sqlite3.c	/^# undef  SQLITE_HAVE_OS_TRACE$/;"	d	file:
SQLITE_HOMEGROWN_RECURSIVE_MUTEX	testdocs/sqlite3.c	/^#define SQLITE_HOMEGROWN_RECURSIVE_MUTEX /;"	d	file:
SQLITE_HWTIME_H	testdocs/sqlite3.c	/^#define SQLITE_HWTIME_H$/;"	d	file:
SQLITE_ICU_READ_UTF8	testdocs/sqlite3.c	/^#define SQLITE_ICU_READ_UTF8(/;"	d	file:
SQLITE_ICU_SKIP_UTF8	testdocs/sqlite3.c	/^#define SQLITE_ICU_SKIP_UTF8(/;"	d	file:
SQLITE_IDXTYPE_APPDEF	testdocs/sqlite3.c	/^#define SQLITE_IDXTYPE_APPDEF /;"	d	file:
SQLITE_IDXTYPE_PRIMARYKEY	testdocs/sqlite3.c	/^#define SQLITE_IDXTYPE_PRIMARYKEY /;"	d	file:
SQLITE_IDXTYPE_UNIQUE	testdocs/sqlite3.c	/^#define SQLITE_IDXTYPE_UNIQUE /;"	d	file:
SQLITE_IGNORE	testdocs/sqlite3.c	/^#define SQLITE_IGNORE /;"	d	file:
SQLITE_INDEX_CONSTRAINT_EQ	testdocs/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_EQ /;"	d	file:
SQLITE_INDEX_CONSTRAINT_GE	testdocs/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_GE /;"	d	file:
SQLITE_INDEX_CONSTRAINT_GLOB	testdocs/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_GLOB /;"	d	file:
SQLITE_INDEX_CONSTRAINT_GT	testdocs/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_GT /;"	d	file:
SQLITE_INDEX_CONSTRAINT_LE	testdocs/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_LE /;"	d	file:
SQLITE_INDEX_CONSTRAINT_LIKE	testdocs/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_LIKE /;"	d	file:
SQLITE_INDEX_CONSTRAINT_LT	testdocs/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_LT /;"	d	file:
SQLITE_INDEX_CONSTRAINT_MATCH	testdocs/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_MATCH /;"	d	file:
SQLITE_INDEX_CONSTRAINT_REGEXP	testdocs/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_REGEXP /;"	d	file:
SQLITE_INDEX_SCAN_UNIQUE	testdocs/sqlite3.c	/^#define SQLITE_INDEX_SCAN_UNIQUE /;"	d	file:
SQLITE_INSERT	testdocs/sqlite3.c	/^#define SQLITE_INSERT /;"	d	file:
SQLITE_INTEGER	testdocs/sqlite3.c	/^#define SQLITE_INTEGER /;"	d	file:
SQLITE_INTEGRITY_CHECK_ERROR_MAX	testdocs/sqlite3.c	/^# define SQLITE_INTEGRITY_CHECK_ERROR_MAX /;"	d	file:
SQLITE_INTERNAL	testdocs/sqlite3.c	/^#define SQLITE_INTERNAL /;"	d	file:
SQLITE_INTERRUPT	testdocs/sqlite3.c	/^#define SQLITE_INTERRUPT /;"	d	file:
SQLITE_INT_TO_PTR	testdocs/sqlite3.c	/^# define SQLITE_INT_TO_PTR(/;"	d	file:
SQLITE_IOCAP_ATOMIC	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC /;"	d	file:
SQLITE_IOCAP_ATOMIC16K	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC16K /;"	d	file:
SQLITE_IOCAP_ATOMIC1K	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC1K /;"	d	file:
SQLITE_IOCAP_ATOMIC2K	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC2K /;"	d	file:
SQLITE_IOCAP_ATOMIC32K	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC32K /;"	d	file:
SQLITE_IOCAP_ATOMIC4K	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC4K /;"	d	file:
SQLITE_IOCAP_ATOMIC512	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC512 /;"	d	file:
SQLITE_IOCAP_ATOMIC64K	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC64K /;"	d	file:
SQLITE_IOCAP_ATOMIC8K	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC8K /;"	d	file:
SQLITE_IOCAP_IMMUTABLE	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_IMMUTABLE /;"	d	file:
SQLITE_IOCAP_POWERSAFE_OVERWRITE	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_POWERSAFE_OVERWRITE /;"	d	file:
SQLITE_IOCAP_SAFE_APPEND	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_SAFE_APPEND /;"	d	file:
SQLITE_IOCAP_SEQUENTIAL	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_SEQUENTIAL /;"	d	file:
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	testdocs/sqlite3.c	/^#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN /;"	d	file:
SQLITE_IOERR	testdocs/sqlite3.c	/^#define SQLITE_IOERR /;"	d	file:
SQLITE_IOERR_ACCESS	testdocs/sqlite3.c	/^#define SQLITE_IOERR_ACCESS /;"	d	file:
SQLITE_IOERR_AUTH	testdocs/sqlite3.c	/^#define SQLITE_IOERR_AUTH /;"	d	file:
SQLITE_IOERR_BLOCKED	testdocs/sqlite3.c	/^#define SQLITE_IOERR_BLOCKED /;"	d	file:
SQLITE_IOERR_CHECKRESERVEDLOCK	testdocs/sqlite3.c	/^#define SQLITE_IOERR_CHECKRESERVEDLOCK /;"	d	file:
SQLITE_IOERR_CLOSE	testdocs/sqlite3.c	/^#define SQLITE_IOERR_CLOSE /;"	d	file:
SQLITE_IOERR_CONVPATH	testdocs/sqlite3.c	/^#define SQLITE_IOERR_CONVPATH /;"	d	file:
SQLITE_IOERR_DELETE	testdocs/sqlite3.c	/^#define SQLITE_IOERR_DELETE /;"	d	file:
SQLITE_IOERR_DELETE_NOENT	testdocs/sqlite3.c	/^#define SQLITE_IOERR_DELETE_NOENT /;"	d	file:
SQLITE_IOERR_DIR_CLOSE	testdocs/sqlite3.c	/^#define SQLITE_IOERR_DIR_CLOSE /;"	d	file:
SQLITE_IOERR_DIR_FSYNC	testdocs/sqlite3.c	/^#define SQLITE_IOERR_DIR_FSYNC /;"	d	file:
SQLITE_IOERR_FSTAT	testdocs/sqlite3.c	/^#define SQLITE_IOERR_FSTAT /;"	d	file:
SQLITE_IOERR_FSYNC	testdocs/sqlite3.c	/^#define SQLITE_IOERR_FSYNC /;"	d	file:
SQLITE_IOERR_GETTEMPPATH	testdocs/sqlite3.c	/^#define SQLITE_IOERR_GETTEMPPATH /;"	d	file:
SQLITE_IOERR_LOCK	testdocs/sqlite3.c	/^#define SQLITE_IOERR_LOCK /;"	d	file:
SQLITE_IOERR_MMAP	testdocs/sqlite3.c	/^#define SQLITE_IOERR_MMAP /;"	d	file:
SQLITE_IOERR_NOMEM	testdocs/sqlite3.c	/^#define SQLITE_IOERR_NOMEM /;"	d	file:
SQLITE_IOERR_NOMEM_BKPT	testdocs/sqlite3.c	/^# define SQLITE_IOERR_NOMEM_BKPT /;"	d	file:
SQLITE_IOERR_RDLOCK	testdocs/sqlite3.c	/^#define SQLITE_IOERR_RDLOCK /;"	d	file:
SQLITE_IOERR_READ	testdocs/sqlite3.c	/^#define SQLITE_IOERR_READ /;"	d	file:
SQLITE_IOERR_SEEK	testdocs/sqlite3.c	/^#define SQLITE_IOERR_SEEK /;"	d	file:
SQLITE_IOERR_SHMLOCK	testdocs/sqlite3.c	/^#define SQLITE_IOERR_SHMLOCK /;"	d	file:
SQLITE_IOERR_SHMMAP	testdocs/sqlite3.c	/^#define SQLITE_IOERR_SHMMAP /;"	d	file:
SQLITE_IOERR_SHMOPEN	testdocs/sqlite3.c	/^#define SQLITE_IOERR_SHMOPEN /;"	d	file:
SQLITE_IOERR_SHMSIZE	testdocs/sqlite3.c	/^#define SQLITE_IOERR_SHMSIZE /;"	d	file:
SQLITE_IOERR_SHORT_READ	testdocs/sqlite3.c	/^#define SQLITE_IOERR_SHORT_READ /;"	d	file:
SQLITE_IOERR_TRUNCATE	testdocs/sqlite3.c	/^#define SQLITE_IOERR_TRUNCATE /;"	d	file:
SQLITE_IOERR_UNLOCK	testdocs/sqlite3.c	/^#define SQLITE_IOERR_UNLOCK /;"	d	file:
SQLITE_IOERR_VNODE	testdocs/sqlite3.c	/^#define SQLITE_IOERR_VNODE /;"	d	file:
SQLITE_IOERR_WRITE	testdocs/sqlite3.c	/^#define SQLITE_IOERR_WRITE /;"	d	file:
SQLITE_IgnoreChecks	testdocs/sqlite3.c	/^#define SQLITE_IgnoreChecks /;"	d	file:
SQLITE_InternChanges	testdocs/sqlite3.c	/^#define SQLITE_InternChanges /;"	d	file:
SQLITE_JUMPIFNULL	testdocs/sqlite3.c	/^#define SQLITE_JUMPIFNULL /;"	d	file:
SQLITE_KEEPNULL	testdocs/sqlite3.c	/^#define SQLITE_KEEPNULL /;"	d	file:
SQLITE_LAST_ERRNO	testdocs/sqlite3.c	/^#define SQLITE_LAST_ERRNO /;"	d	file:
SQLITE_LIMIT_ATTACHED	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_ATTACHED /;"	d	file:
SQLITE_LIMIT_COLUMN	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_COLUMN /;"	d	file:
SQLITE_LIMIT_COMPOUND_SELECT	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_COMPOUND_SELECT /;"	d	file:
SQLITE_LIMIT_EXPR_DEPTH	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_EXPR_DEPTH /;"	d	file:
SQLITE_LIMIT_FUNCTION_ARG	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_FUNCTION_ARG /;"	d	file:
SQLITE_LIMIT_LENGTH	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_LENGTH /;"	d	file:
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH /;"	d	file:
SQLITE_LIMIT_SQL_LENGTH	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_SQL_LENGTH /;"	d	file:
SQLITE_LIMIT_TRIGGER_DEPTH	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_TRIGGER_DEPTH /;"	d	file:
SQLITE_LIMIT_VARIABLE_NUMBER	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_VARIABLE_NUMBER /;"	d	file:
SQLITE_LIMIT_VDBE_OP	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_VDBE_OP /;"	d	file:
SQLITE_LIMIT_WORKER_THREADS	testdocs/sqlite3.c	/^#define SQLITE_LIMIT_WORKER_THREADS /;"	d	file:
SQLITE_LITTLEENDIAN	testdocs/sqlite3.c	/^# define SQLITE_LITTLEENDIAN /;"	d	file:
SQLITE_LOCKED	testdocs/sqlite3.c	/^#define SQLITE_LOCKED /;"	d	file:
SQLITE_LOCKED_SHAREDCACHE	testdocs/sqlite3.c	/^#define SQLITE_LOCKED_SHAREDCACHE /;"	d	file:
SQLITE_LOCKFILEEX_FLAGS	testdocs/sqlite3.c	/^# define SQLITE_LOCKFILEEX_FLAGS /;"	d	file:
SQLITE_LOCKFILE_FLAGS	testdocs/sqlite3.c	/^# define SQLITE_LOCKFILE_FLAGS /;"	d	file:
SQLITE_LOCK_EXCLUSIVE	testdocs/sqlite3.c	/^#define SQLITE_LOCK_EXCLUSIVE /;"	d	file:
SQLITE_LOCK_NONE	testdocs/sqlite3.c	/^#define SQLITE_LOCK_NONE /;"	d	file:
SQLITE_LOCK_PENDING	testdocs/sqlite3.c	/^#define SQLITE_LOCK_PENDING /;"	d	file:
SQLITE_LOCK_RESERVED	testdocs/sqlite3.c	/^#define SQLITE_LOCK_RESERVED /;"	d	file:
SQLITE_LOCK_SHARED	testdocs/sqlite3.c	/^#define SQLITE_LOCK_SHARED /;"	d	file:
SQLITE_LegacyFileFmt	testdocs/sqlite3.c	/^#define SQLITE_LegacyFileFmt /;"	d	file:
SQLITE_LoadExtFunc	testdocs/sqlite3.c	/^#define SQLITE_LoadExtFunc /;"	d	file:
SQLITE_LoadExtension	testdocs/sqlite3.c	/^#define SQLITE_LoadExtension /;"	d	file:
SQLITE_MAGIC_BUSY	testdocs/sqlite3.c	/^#define SQLITE_MAGIC_BUSY /;"	d	file:
SQLITE_MAGIC_CLOSED	testdocs/sqlite3.c	/^#define SQLITE_MAGIC_CLOSED /;"	d	file:
SQLITE_MAGIC_ERROR	testdocs/sqlite3.c	/^#define SQLITE_MAGIC_ERROR /;"	d	file:
SQLITE_MAGIC_OPEN	testdocs/sqlite3.c	/^#define SQLITE_MAGIC_OPEN /;"	d	file:
SQLITE_MAGIC_SICK	testdocs/sqlite3.c	/^#define SQLITE_MAGIC_SICK /;"	d	file:
SQLITE_MAGIC_ZOMBIE	testdocs/sqlite3.c	/^#define SQLITE_MAGIC_ZOMBIE /;"	d	file:
SQLITE_MALLOC	testdocs/sqlite3.c	/^#define SQLITE_MALLOC(/;"	d	file:
SQLITE_MALLOCSIZE	testdocs/sqlite3.c	/^#      define SQLITE_MALLOCSIZE /;"	d	file:
SQLITE_MALLOCSIZE	testdocs/sqlite3.c	/^#      define SQLITE_MALLOCSIZE(/;"	d	file:
SQLITE_MALLOCSIZE	testdocs/sqlite3.c	/^#define SQLITE_MALLOCSIZE(/;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	testdocs/sqlite3.c	/^# define SQLITE_MALLOC_SOFT_LIMIT /;"	d	file:
SQLITE_MATCH	testdocs/sqlite3.c	/^#define SQLITE_MATCH /;"	d	file:
SQLITE_MAX_ATTACHED	testdocs/sqlite3.c	/^# define SQLITE_MAX_ATTACHED /;"	d	file:
SQLITE_MAX_COLUMN	testdocs/sqlite3.c	/^# define SQLITE_MAX_COLUMN /;"	d	file:
SQLITE_MAX_COMPOUND_SELECT	testdocs/sqlite3.c	/^# define SQLITE_MAX_COMPOUND_SELECT /;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	testdocs/sqlite3.c	/^# define SQLITE_MAX_DEFAULT_PAGE_SIZE /;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	testdocs/sqlite3.c	/^# undef SQLITE_MAX_DEFAULT_PAGE_SIZE$/;"	d	file:
SQLITE_MAX_EXPR_DEPTH	testdocs/sqlite3.c	/^# define SQLITE_MAX_EXPR_DEPTH /;"	d	file:
SQLITE_MAX_FILE_FORMAT	testdocs/sqlite3.c	/^#define SQLITE_MAX_FILE_FORMAT /;"	d	file:
SQLITE_MAX_FUNCTION_ARG	testdocs/sqlite3.c	/^# define SQLITE_MAX_FUNCTION_ARG /;"	d	file:
SQLITE_MAX_LENGTH	testdocs/sqlite3.c	/^# define SQLITE_MAX_LENGTH /;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	testdocs/sqlite3.c	/^# define SQLITE_MAX_LIKE_PATTERN_LENGTH /;"	d	file:
SQLITE_MAX_MMAP_SIZE	testdocs/sqlite3.c	/^#   define SQLITE_MAX_MMAP_SIZE /;"	d	file:
SQLITE_MAX_MMAP_SIZE	testdocs/sqlite3.c	/^# define SQLITE_MAX_MMAP_SIZE /;"	d	file:
SQLITE_MAX_MMAP_SIZE	testdocs/sqlite3.c	/^# undef SQLITE_MAX_MMAP_SIZE$/;"	d	file:
SQLITE_MAX_MMAP_SIZE_xc	testdocs/sqlite3.c	/^# define SQLITE_MAX_MMAP_SIZE_xc /;"	d	file:
SQLITE_MAX_PAGE_COUNT	testdocs/sqlite3.c	/^# define SQLITE_MAX_PAGE_COUNT /;"	d	file:
SQLITE_MAX_PAGE_SIZE	testdocs/sqlite3.c	/^# undef SQLITE_MAX_PAGE_SIZE$/;"	d	file:
SQLITE_MAX_PAGE_SIZE	testdocs/sqlite3.c	/^#define SQLITE_MAX_PAGE_SIZE /;"	d	file:
SQLITE_MAX_PMASZ	testdocs/sqlite3.c	/^#define SQLITE_MAX_PMASZ /;"	d	file:
SQLITE_MAX_SCHEMA_RETRY	testdocs/sqlite3.c	/^# define SQLITE_MAX_SCHEMA_RETRY /;"	d	file:
SQLITE_MAX_SQL_LENGTH	testdocs/sqlite3.c	/^# define SQLITE_MAX_SQL_LENGTH /;"	d	file:
SQLITE_MAX_SYMLINKS	testdocs/sqlite3.c	/^#define SQLITE_MAX_SYMLINKS /;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	testdocs/sqlite3.c	/^# define SQLITE_MAX_TRIGGER_DEPTH /;"	d	file:
SQLITE_MAX_U32	testdocs/sqlite3.c	/^#define SQLITE_MAX_U32 /;"	d	file:
SQLITE_MAX_VARIABLE_NUMBER	testdocs/sqlite3.c	/^# define SQLITE_MAX_VARIABLE_NUMBER /;"	d	file:
SQLITE_MAX_VDBE_OP	testdocs/sqlite3.c	/^# define SQLITE_MAX_VDBE_OP /;"	d	file:
SQLITE_MAX_WORKER_THREADS	testdocs/sqlite3.c	/^# define SQLITE_MAX_WORKER_THREADS /;"	d	file:
SQLITE_MAX_WORKER_THREADS	testdocs/sqlite3.c	/^# undef SQLITE_MAX_WORKER_THREADS$/;"	d	file:
SQLITE_MINIMUM_FILE_DESCRIPTOR	testdocs/sqlite3.c	/^# define SQLITE_MINIMUM_FILE_DESCRIPTOR /;"	d	file:
SQLITE_MISMATCH	testdocs/sqlite3.c	/^#define SQLITE_MISMATCH /;"	d	file:
SQLITE_MISUSE	testdocs/sqlite3.c	/^#define SQLITE_MISUSE /;"	d	file:
SQLITE_MISUSE_BKPT	testdocs/sqlite3.c	/^#define SQLITE_MISUSE_BKPT /;"	d	file:
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	testdocs/sqlite3.c	/^# undef SQLITE_MIXED_ENDIAN_64BIT_FLOAT$/;"	d	file:
SQLITE_MSVC_H	testdocs/sqlite3.c	/^#define SQLITE_MSVC_H$/;"	d	file:
SQLITE_MUTEX_FAST	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_FAST /;"	d	file:
SQLITE_MUTEX_NOOP	testdocs/sqlite3.c	/^#    define SQLITE_MUTEX_NOOP$/;"	d	file:
SQLITE_MUTEX_NREF	testdocs/sqlite3.c	/^# define SQLITE_MUTEX_NREF /;"	d	file:
SQLITE_MUTEX_OMIT	testdocs/sqlite3.c	/^# define SQLITE_MUTEX_OMIT$/;"	d	file:
SQLITE_MUTEX_PTHREADS	testdocs/sqlite3.c	/^#    define SQLITE_MUTEX_PTHREADS$/;"	d	file:
SQLITE_MUTEX_RECURSIVE	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_RECURSIVE /;"	d	file:
SQLITE_MUTEX_STATIC_APP1	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_APP1 /;"	d	file:
SQLITE_MUTEX_STATIC_APP2	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_APP2 /;"	d	file:
SQLITE_MUTEX_STATIC_APP3	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_APP3 /;"	d	file:
SQLITE_MUTEX_STATIC_LRU	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_LRU /;"	d	file:
SQLITE_MUTEX_STATIC_LRU2	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_LRU2 /;"	d	file:
SQLITE_MUTEX_STATIC_MASTER	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_MASTER /;"	d	file:
SQLITE_MUTEX_STATIC_MEM	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_MEM /;"	d	file:
SQLITE_MUTEX_STATIC_MEM2	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_MEM2 /;"	d	file:
SQLITE_MUTEX_STATIC_OPEN	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_OPEN /;"	d	file:
SQLITE_MUTEX_STATIC_PMEM	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_PMEM /;"	d	file:
SQLITE_MUTEX_STATIC_PRNG	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_PRNG /;"	d	file:
SQLITE_MUTEX_STATIC_VFS1	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_VFS1 /;"	d	file:
SQLITE_MUTEX_STATIC_VFS2	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_VFS2 /;"	d	file:
SQLITE_MUTEX_STATIC_VFS3	testdocs/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_VFS3 /;"	d	file:
SQLITE_MUTEX_W32	testdocs/sqlite3.c	/^#    define SQLITE_MUTEX_W32$/;"	d	file:
SQLITE_MX_JUMP_OPCODE	testdocs/sqlite3.c	/^#define SQLITE_MX_JUMP_OPCODE /;"	d	file:
SQLITE_NEED_ERR_NAME	testdocs/sqlite3.c	/^# define SQLITE_NEED_ERR_NAME$/;"	d	file:
SQLITE_NEED_ERR_NAME	testdocs/sqlite3.c	/^# undef  SQLITE_NEED_ERR_NAME$/;"	d	file:
SQLITE_NOINLINE	testdocs/sqlite3.c	/^#  define SQLITE_NOINLINE /;"	d	file:
SQLITE_NOINLINE	testdocs/sqlite3.c	/^#  define SQLITE_NOINLINE$/;"	d	file:
SQLITE_NOLFS	testdocs/sqlite3.c	/^#define SQLITE_NOLFS /;"	d	file:
SQLITE_NOMATCH	testdocs/sqlite3.c	/^#define SQLITE_NOMATCH /;"	d	file:
SQLITE_NOMEM	testdocs/sqlite3.c	/^#define SQLITE_NOMEM /;"	d	file:
SQLITE_NOMEM_BKPT	testdocs/sqlite3.c	/^# define SQLITE_NOMEM_BKPT /;"	d	file:
SQLITE_NOTADB	testdocs/sqlite3.c	/^#define SQLITE_NOTADB /;"	d	file:
SQLITE_NOTFOUND	testdocs/sqlite3.c	/^#define SQLITE_NOTFOUND /;"	d	file:
SQLITE_NOTICE	testdocs/sqlite3.c	/^#define SQLITE_NOTICE /;"	d	file:
SQLITE_NOTICE_RECOVER_ROLLBACK	testdocs/sqlite3.c	/^#define SQLITE_NOTICE_RECOVER_ROLLBACK /;"	d	file:
SQLITE_NOTICE_RECOVER_WAL	testdocs/sqlite3.c	/^#define SQLITE_NOTICE_RECOVER_WAL /;"	d	file:
SQLITE_NOTNULL	testdocs/sqlite3.c	/^#define SQLITE_NOTNULL /;"	d	file:
SQLITE_NOWILDCARDMATCH	testdocs/sqlite3.c	/^#define SQLITE_NOWILDCARDMATCH /;"	d	file:
SQLITE_NULL	testdocs/sqlite3.c	/^#define SQLITE_NULL /;"	d	file:
SQLITE_NULLEQ	testdocs/sqlite3.c	/^#define SQLITE_NULLEQ /;"	d	file:
SQLITE_N_BTREE_META	testdocs/sqlite3.c	/^#define SQLITE_N_BTREE_META /;"	d	file:
SQLITE_N_COLCACHE	testdocs/sqlite3.c	/^# define SQLITE_N_COLCACHE /;"	d	file:
SQLITE_N_KEYWORD	testdocs/sqlite3.c	/^#define SQLITE_N_KEYWORD /;"	d	file:
SQLITE_N_LIMIT	testdocs/sqlite3.c	/^#define SQLITE_N_LIMIT /;"	d	file:
SQLITE_NoCkptOnClose	testdocs/sqlite3.c	/^#define SQLITE_NoCkptOnClose /;"	d	file:
SQLITE_NullCallback	testdocs/sqlite3.c	/^#define SQLITE_NullCallback /;"	d	file:
SQLITE_OK	testdocs/sqlite3.c	/^#define SQLITE_OK /;"	d	file:
SQLITE_OK_LOAD_PERMANENTLY	testdocs/sqlite3.c	/^#define SQLITE_OK_LOAD_PERMANENTLY /;"	d	file:
SQLITE_OMIT_DATETIME_FUNCS	testdocs/sqlite3.c	/^# define SQLITE_OMIT_DATETIME_FUNCS /;"	d	file:
SQLITE_OMIT_LOAD_EXTENSION	testdocs/sqlite3.c	/^#define SQLITE_OMIT_LOAD_EXTENSION /;"	d	file:
SQLITE_OMIT_TRACE	testdocs/sqlite3.c	/^# define SQLITE_OMIT_TRACE /;"	d	file:
SQLITE_OPEN_AUTOPROXY	testdocs/sqlite3.c	/^#define SQLITE_OPEN_AUTOPROXY /;"	d	file:
SQLITE_OPEN_CREATE	testdocs/sqlite3.c	/^#define SQLITE_OPEN_CREATE /;"	d	file:
SQLITE_OPEN_DELETEONCLOSE	testdocs/sqlite3.c	/^#define SQLITE_OPEN_DELETEONCLOSE /;"	d	file:
SQLITE_OPEN_EXCLUSIVE	testdocs/sqlite3.c	/^#define SQLITE_OPEN_EXCLUSIVE /;"	d	file:
SQLITE_OPEN_FULLMUTEX	testdocs/sqlite3.c	/^#define SQLITE_OPEN_FULLMUTEX /;"	d	file:
SQLITE_OPEN_MAIN_DB	testdocs/sqlite3.c	/^#define SQLITE_OPEN_MAIN_DB /;"	d	file:
SQLITE_OPEN_MAIN_JOURNAL	testdocs/sqlite3.c	/^#define SQLITE_OPEN_MAIN_JOURNAL /;"	d	file:
SQLITE_OPEN_MASTER_JOURNAL	testdocs/sqlite3.c	/^#define SQLITE_OPEN_MASTER_JOURNAL /;"	d	file:
SQLITE_OPEN_MEMORY	testdocs/sqlite3.c	/^#define SQLITE_OPEN_MEMORY /;"	d	file:
SQLITE_OPEN_NOMUTEX	testdocs/sqlite3.c	/^#define SQLITE_OPEN_NOMUTEX /;"	d	file:
SQLITE_OPEN_PRIVATECACHE	testdocs/sqlite3.c	/^#define SQLITE_OPEN_PRIVATECACHE /;"	d	file:
SQLITE_OPEN_READONLY	testdocs/sqlite3.c	/^#define SQLITE_OPEN_READONLY /;"	d	file:
SQLITE_OPEN_READWRITE	testdocs/sqlite3.c	/^#define SQLITE_OPEN_READWRITE /;"	d	file:
SQLITE_OPEN_SHAREDCACHE	testdocs/sqlite3.c	/^#define SQLITE_OPEN_SHAREDCACHE /;"	d	file:
SQLITE_OPEN_SUBJOURNAL	testdocs/sqlite3.c	/^#define SQLITE_OPEN_SUBJOURNAL /;"	d	file:
SQLITE_OPEN_TEMP_DB	testdocs/sqlite3.c	/^#define SQLITE_OPEN_TEMP_DB /;"	d	file:
SQLITE_OPEN_TEMP_JOURNAL	testdocs/sqlite3.c	/^#define SQLITE_OPEN_TEMP_JOURNAL /;"	d	file:
SQLITE_OPEN_TRANSIENT_DB	testdocs/sqlite3.c	/^#define SQLITE_OPEN_TRANSIENT_DB /;"	d	file:
SQLITE_OPEN_URI	testdocs/sqlite3.c	/^#define SQLITE_OPEN_URI /;"	d	file:
SQLITE_OPEN_WAL	testdocs/sqlite3.c	/^#define SQLITE_OPEN_WAL /;"	d	file:
SQLITE_OS_OTHER	testdocs/sqlite3.c	/^#    undef SQLITE_OS_OTHER$/;"	d	file:
SQLITE_OS_OTHER	testdocs/sqlite3.c	/^#  define SQLITE_OS_OTHER /;"	d	file:
SQLITE_OS_OTHER	testdocs/sqlite3.c	/^#define SQLITE_OS_OTHER /;"	d	file:
SQLITE_OS_SETUP_H	testdocs/sqlite3.c	/^#define SQLITE_OS_SETUP_H$/;"	d	file:
SQLITE_OS_UNIX	testdocs/sqlite3.c	/^#      define SQLITE_OS_UNIX /;"	d	file:
SQLITE_OS_UNIX	testdocs/sqlite3.c	/^#    define SQLITE_OS_UNIX /;"	d	file:
SQLITE_OS_UNIX	testdocs/sqlite3.c	/^#    undef SQLITE_OS_UNIX$/;"	d	file:
SQLITE_OS_WIN	testdocs/sqlite3.c	/^#      define SQLITE_OS_WIN /;"	d	file:
SQLITE_OS_WIN	testdocs/sqlite3.c	/^#    define SQLITE_OS_WIN /;"	d	file:
SQLITE_OS_WIN	testdocs/sqlite3.c	/^#    undef SQLITE_OS_WIN$/;"	d	file:
SQLITE_OS_WINCE	testdocs/sqlite3.c	/^# define SQLITE_OS_WINCE /;"	d	file:
SQLITE_OS_WINNT	testdocs/sqlite3.c	/^# define SQLITE_OS_WINNT /;"	d	file:
SQLITE_OS_WINRT	testdocs/sqlite3.c	/^# define SQLITE_OS_WINRT /;"	d	file:
SQLITE_OS_WIN_H	testdocs/sqlite3.c	/^#define SQLITE_OS_WIN_H$/;"	d	file:
SQLITE_OS_WIN_THREADS	testdocs/sqlite3.c	/^# define SQLITE_OS_WIN_THREADS /;"	d	file:
SQLITE_OmitNoopJoin	testdocs/sqlite3.c	/^#define SQLITE_OmitNoopJoin /;"	d	file:
SQLITE_OrderByIdxJoin	testdocs/sqlite3.c	/^#define SQLITE_OrderByIdxJoin /;"	d	file:
SQLITE_PAGER_H	testdocs/sqlite3.c	/^#define SQLITE_PAGER_H$/;"	d	file:
SQLITE_PERM	testdocs/sqlite3.c	/^#define SQLITE_PERM /;"	d	file:
SQLITE_POWERSAFE_OVERWRITE	testdocs/sqlite3.c	/^# define SQLITE_POWERSAFE_OVERWRITE /;"	d	file:
SQLITE_PRAGMA	testdocs/sqlite3.c	/^#define SQLITE_PRAGMA /;"	d	file:
SQLITE_PRINTF_INTERNAL	testdocs/sqlite3.c	/^#define SQLITE_PRINTF_INTERNAL /;"	d	file:
SQLITE_PRINTF_MALLOCED	testdocs/sqlite3.c	/^#define SQLITE_PRINTF_MALLOCED /;"	d	file:
SQLITE_PRINTF_SQLFUNC	testdocs/sqlite3.c	/^#define SQLITE_PRINTF_SQLFUNC /;"	d	file:
SQLITE_PRINT_BUF_SIZE	testdocs/sqlite3.c	/^# define SQLITE_PRINT_BUF_SIZE /;"	d	file:
SQLITE_PRIVATE	testdocs/sqlite3.c	/^# define SQLITE_PRIVATE /;"	d	file:
SQLITE_PROTOCOL	testdocs/sqlite3.c	/^#define SQLITE_PROTOCOL /;"	d	file:
SQLITE_PTRSIZE	testdocs/sqlite3.c	/^#   define SQLITE_PTRSIZE /;"	d	file:
SQLITE_PTR_TO_INT	testdocs/sqlite3.c	/^# define SQLITE_PTR_TO_INT(/;"	d	file:
SQLITE_PreferBuiltin	testdocs/sqlite3.c	/^#define SQLITE_PreferBuiltin /;"	d	file:
SQLITE_QueryFlattener	testdocs/sqlite3.c	/^#define SQLITE_QueryFlattener /;"	d	file:
SQLITE_QueryOnly	testdocs/sqlite3.c	/^#define SQLITE_QueryOnly /;"	d	file:
SQLITE_RANGE	testdocs/sqlite3.c	/^#define SQLITE_RANGE /;"	d	file:
SQLITE_RBU_STATE_CHECKPOINT	testdocs/sqlite3.c	/^#define SQLITE_RBU_STATE_CHECKPOINT /;"	d	file:
SQLITE_RBU_STATE_DONE	testdocs/sqlite3.c	/^#define SQLITE_RBU_STATE_DONE /;"	d	file:
SQLITE_RBU_STATE_ERROR	testdocs/sqlite3.c	/^#define SQLITE_RBU_STATE_ERROR /;"	d	file:
SQLITE_RBU_STATE_MOVE	testdocs/sqlite3.c	/^#define SQLITE_RBU_STATE_MOVE /;"	d	file:
SQLITE_RBU_STATE_OAL	testdocs/sqlite3.c	/^#define SQLITE_RBU_STATE_OAL /;"	d	file:
SQLITE_RBU_UPDATE_CACHESIZE	testdocs/sqlite3.c	/^#define SQLITE_RBU_UPDATE_CACHESIZE /;"	d	file:
SQLITE_READ	testdocs/sqlite3.c	/^#define SQLITE_READ /;"	d	file:
SQLITE_READONLY	testdocs/sqlite3.c	/^#define SQLITE_READONLY /;"	d	file:
SQLITE_READONLY_CANTLOCK	testdocs/sqlite3.c	/^#define SQLITE_READONLY_CANTLOCK /;"	d	file:
SQLITE_READONLY_DBMOVED	testdocs/sqlite3.c	/^#define SQLITE_READONLY_DBMOVED /;"	d	file:
SQLITE_READONLY_RECOVERY	testdocs/sqlite3.c	/^#define SQLITE_READONLY_RECOVERY /;"	d	file:
SQLITE_READONLY_ROLLBACK	testdocs/sqlite3.c	/^#define SQLITE_READONLY_ROLLBACK /;"	d	file:
SQLITE_REALLOC	testdocs/sqlite3.c	/^#define SQLITE_REALLOC(/;"	d	file:
SQLITE_RECURSIVE	testdocs/sqlite3.c	/^#define SQLITE_RECURSIVE /;"	d	file:
SQLITE_REINDEX	testdocs/sqlite3.c	/^#define SQLITE_REINDEX /;"	d	file:
SQLITE_REPLACE	testdocs/sqlite3.c	/^#define SQLITE_REPLACE /;"	d	file:
SQLITE_ROLLBACK	testdocs/sqlite3.c	/^#define SQLITE_ROLLBACK /;"	d	file:
SQLITE_ROW	testdocs/sqlite3.c	/^#define SQLITE_ROW /;"	d	file:
SQLITE_ReadUncommitted	testdocs/sqlite3.c	/^#define SQLITE_ReadUncommitted /;"	d	file:
SQLITE_RecTriggers	testdocs/sqlite3.c	/^#define SQLITE_RecTriggers /;"	d	file:
SQLITE_RecoveryMode	testdocs/sqlite3.c	/^#define SQLITE_RecoveryMode /;"	d	file:
SQLITE_ReverseOrder	testdocs/sqlite3.c	/^#define SQLITE_ReverseOrder /;"	d	file:
SQLITE_SAVEPOINT	testdocs/sqlite3.c	/^#define SQLITE_SAVEPOINT /;"	d	file:
SQLITE_SCANSTAT_EST	testdocs/sqlite3.c	/^#define SQLITE_SCANSTAT_EST /;"	d	file:
SQLITE_SCANSTAT_EXPLAIN	testdocs/sqlite3.c	/^#define SQLITE_SCANSTAT_EXPLAIN /;"	d	file:
SQLITE_SCANSTAT_NAME	testdocs/sqlite3.c	/^#define SQLITE_SCANSTAT_NAME /;"	d	file:
SQLITE_SCANSTAT_NLOOP	testdocs/sqlite3.c	/^#define SQLITE_SCANSTAT_NLOOP /;"	d	file:
SQLITE_SCANSTAT_NVISIT	testdocs/sqlite3.c	/^#define SQLITE_SCANSTAT_NVISIT /;"	d	file:
SQLITE_SCANSTAT_SELECTID	testdocs/sqlite3.c	/^#define SQLITE_SCANSTAT_SELECTID /;"	d	file:
SQLITE_SCHEMA	testdocs/sqlite3.c	/^#define SQLITE_SCHEMA /;"	d	file:
SQLITE_SELECT	testdocs/sqlite3.c	/^#define SQLITE_SELECT /;"	d	file:
SQLITE_SET_LOCKPROXYFILE	testdocs/sqlite3.c	/^#define SQLITE_SET_LOCKPROXYFILE /;"	d	file:
SQLITE_SHM_EXCLUSIVE	testdocs/sqlite3.c	/^#define SQLITE_SHM_EXCLUSIVE /;"	d	file:
SQLITE_SHM_LOCK	testdocs/sqlite3.c	/^#define SQLITE_SHM_LOCK /;"	d	file:
SQLITE_SHM_NLOCK	testdocs/sqlite3.c	/^#define SQLITE_SHM_NLOCK /;"	d	file:
SQLITE_SHM_SHARED	testdocs/sqlite3.c	/^#define SQLITE_SHM_SHARED /;"	d	file:
SQLITE_SHM_UNLOCK	testdocs/sqlite3.c	/^#define SQLITE_SHM_UNLOCK /;"	d	file:
SQLITE_SKIP_UTF8	testdocs/sqlite3.c	/^#define SQLITE_SKIP_UTF8(/;"	d	file:
SQLITE_SORTER_PMASZ	testdocs/sqlite3.c	/^# define SQLITE_SORTER_PMASZ /;"	d	file:
SQLITE_SOURCE_ID	testdocs/sqlite3.c	/^#define SQLITE_SOURCE_ID /;"	d	file:
SQLITE_SO_ASC	testdocs/sqlite3.c	/^#define SQLITE_SO_ASC /;"	d	file:
SQLITE_SO_DESC	testdocs/sqlite3.c	/^#define SQLITE_SO_DESC /;"	d	file:
SQLITE_SO_UNDEFINED	testdocs/sqlite3.c	/^#define SQLITE_SO_UNDEFINED /;"	d	file:
SQLITE_STAT4_SAMPLES	testdocs/sqlite3.c	/^# define SQLITE_STAT4_SAMPLES /;"	d	file:
SQLITE_STAT4_SAMPLES	testdocs/sqlite3.c	/^# undef SQLITE_STAT4_SAMPLES$/;"	d	file:
SQLITE_STATIC	testdocs/sqlite3.c	/^#define SQLITE_STATIC /;"	d	file:
SQLITE_STATUS_MALLOC_COUNT	testdocs/sqlite3.c	/^#define SQLITE_STATUS_MALLOC_COUNT /;"	d	file:
SQLITE_STATUS_MALLOC_SIZE	testdocs/sqlite3.c	/^#define SQLITE_STATUS_MALLOC_SIZE /;"	d	file:
SQLITE_STATUS_MEMORY_USED	testdocs/sqlite3.c	/^#define SQLITE_STATUS_MEMORY_USED /;"	d	file:
SQLITE_STATUS_PAGECACHE_OVERFLOW	testdocs/sqlite3.c	/^#define SQLITE_STATUS_PAGECACHE_OVERFLOW /;"	d	file:
SQLITE_STATUS_PAGECACHE_SIZE	testdocs/sqlite3.c	/^#define SQLITE_STATUS_PAGECACHE_SIZE /;"	d	file:
SQLITE_STATUS_PAGECACHE_USED	testdocs/sqlite3.c	/^#define SQLITE_STATUS_PAGECACHE_USED /;"	d	file:
SQLITE_STATUS_PARSER_STACK	testdocs/sqlite3.c	/^#define SQLITE_STATUS_PARSER_STACK /;"	d	file:
SQLITE_STATUS_SCRATCH_OVERFLOW	testdocs/sqlite3.c	/^#define SQLITE_STATUS_SCRATCH_OVERFLOW /;"	d	file:
SQLITE_STATUS_SCRATCH_SIZE	testdocs/sqlite3.c	/^#define SQLITE_STATUS_SCRATCH_SIZE /;"	d	file:
SQLITE_STATUS_SCRATCH_USED	testdocs/sqlite3.c	/^#define SQLITE_STATUS_SCRATCH_USED /;"	d	file:
SQLITE_STDCALL	testdocs/sqlite3.c	/^# define SQLITE_STDCALL /;"	d	file:
SQLITE_STMTJRNL_SPILL	testdocs/sqlite3.c	/^# define SQLITE_STMTJRNL_SPILL /;"	d	file:
SQLITE_STMTSTATUS_AUTOINDEX	testdocs/sqlite3.c	/^#define SQLITE_STMTSTATUS_AUTOINDEX /;"	d	file:
SQLITE_STMTSTATUS_FULLSCAN_STEP	testdocs/sqlite3.c	/^#define SQLITE_STMTSTATUS_FULLSCAN_STEP /;"	d	file:
SQLITE_STMTSTATUS_SORT	testdocs/sqlite3.c	/^#define SQLITE_STMTSTATUS_SORT /;"	d	file:
SQLITE_STMTSTATUS_VM_STEP	testdocs/sqlite3.c	/^#define SQLITE_STMTSTATUS_VM_STEP /;"	d	file:
SQLITE_STOREP2	testdocs/sqlite3.c	/^#define SQLITE_STOREP2 /;"	d	file:
SQLITE_SYNC_DATAONLY	testdocs/sqlite3.c	/^#define SQLITE_SYNC_DATAONLY /;"	d	file:
SQLITE_SYNC_FULL	testdocs/sqlite3.c	/^#define SQLITE_SYNC_FULL /;"	d	file:
SQLITE_SYNC_MASK	testdocs/sqlite3.c	/^#define SQLITE_SYNC_MASK /;"	d	file:
SQLITE_SYNC_NORMAL	testdocs/sqlite3.c	/^#define SQLITE_SYNC_NORMAL /;"	d	file:
SQLITE_SYSAPI	testdocs/sqlite3.c	/^# define SQLITE_SYSAPI$/;"	d	file:
SQLITE_SYSTEM_MALLOC	testdocs/sqlite3.c	/^# define SQLITE_SYSTEM_MALLOC /;"	d	file:
SQLITE_ShortColNames	testdocs/sqlite3.c	/^#define SQLITE_ShortColNames /;"	d	file:
SQLITE_SqlTrace	testdocs/sqlite3.c	/^#define SQLITE_SqlTrace /;"	d	file:
SQLITE_Stat34	testdocs/sqlite3.c	/^#define SQLITE_Stat34 /;"	d	file:
SQLITE_SubqCoroutine	testdocs/sqlite3.c	/^#define SQLITE_SubqCoroutine /;"	d	file:
SQLITE_TCLAPI	testdocs/sqlite3.c	/^#  define SQLITE_TCLAPI$/;"	d	file:
SQLITE_TEMP_FILE_PREFIX	testdocs/sqlite3.c	/^# define SQLITE_TEMP_FILE_PREFIX /;"	d	file:
SQLITE_TEMP_STORE	testdocs/sqlite3.c	/^# define SQLITE_TEMP_STORE /;"	d	file:
SQLITE_TEMP_STORE_xc	testdocs/sqlite3.c	/^# define SQLITE_TEMP_STORE_xc /;"	d	file:
SQLITE_TESTCTRL_ALWAYS	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_ALWAYS /;"	d	file:
SQLITE_TESTCTRL_ASSERT	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_ASSERT /;"	d	file:
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS /;"	d	file:
SQLITE_TESTCTRL_BITVEC_TEST	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_BITVEC_TEST /;"	d	file:
SQLITE_TESTCTRL_BYTEORDER	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_BYTEORDER /;"	d	file:
SQLITE_TESTCTRL_EXPLAIN_STMT	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_EXPLAIN_STMT /;"	d	file:
SQLITE_TESTCTRL_FAULT_INSTALL	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_FAULT_INSTALL /;"	d	file:
SQLITE_TESTCTRL_FIRST	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_FIRST /;"	d	file:
SQLITE_TESTCTRL_IMPOSTER	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_IMPOSTER /;"	d	file:
SQLITE_TESTCTRL_ISINIT	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_ISINIT /;"	d	file:
SQLITE_TESTCTRL_ISKEYWORD	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_ISKEYWORD /;"	d	file:
SQLITE_TESTCTRL_LAST	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_LAST /;"	d	file:
SQLITE_TESTCTRL_LOCALTIME_FAULT	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_LOCALTIME_FAULT /;"	d	file:
SQLITE_TESTCTRL_NEVER_CORRUPT	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_NEVER_CORRUPT /;"	d	file:
SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD /;"	d	file:
SQLITE_TESTCTRL_OPTIMIZATIONS	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_OPTIMIZATIONS /;"	d	file:
SQLITE_TESTCTRL_PENDING_BYTE	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_PENDING_BYTE /;"	d	file:
SQLITE_TESTCTRL_PRNG_RESET	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_PRNG_RESET /;"	d	file:
SQLITE_TESTCTRL_PRNG_RESTORE	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_PRNG_RESTORE /;"	d	file:
SQLITE_TESTCTRL_PRNG_SAVE	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_PRNG_SAVE /;"	d	file:
SQLITE_TESTCTRL_RESERVE	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_RESERVE /;"	d	file:
SQLITE_TESTCTRL_SCRATCHMALLOC	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_SCRATCHMALLOC /;"	d	file:
SQLITE_TESTCTRL_SORTER_MMAP	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_SORTER_MMAP /;"	d	file:
SQLITE_TESTCTRL_VDBE_COVERAGE	testdocs/sqlite3.c	/^#define SQLITE_TESTCTRL_VDBE_COVERAGE /;"	d	file:
SQLITE_TEXT	testdocs/sqlite3.c	/^# define SQLITE_TEXT /;"	d	file:
SQLITE_TEXT	testdocs/sqlite3.c	/^# undef SQLITE_TEXT$/;"	d	file:
SQLITE_THREADSAFE	testdocs/sqlite3.c	/^#   define SQLITE_THREADSAFE /;"	d	file:
SQLITE_THREADS_IMPLEMENTED	testdocs/sqlite3.c	/^#define SQLITE_THREADS_IMPLEMENTED /;"	d	file:
SQLITE_TOOBIG	testdocs/sqlite3.c	/^#define SQLITE_TOOBIG /;"	d	file:
SQLITE_TRACE_CLOSE	testdocs/sqlite3.c	/^#define SQLITE_TRACE_CLOSE /;"	d	file:
SQLITE_TRACE_LEGACY	testdocs/sqlite3.c	/^#define SQLITE_TRACE_LEGACY /;"	d	file:
SQLITE_TRACE_PROFILE	testdocs/sqlite3.c	/^#define SQLITE_TRACE_PROFILE /;"	d	file:
SQLITE_TRACE_ROW	testdocs/sqlite3.c	/^#define SQLITE_TRACE_ROW /;"	d	file:
SQLITE_TRACE_STMT	testdocs/sqlite3.c	/^#define SQLITE_TRACE_STMT /;"	d	file:
SQLITE_TRANSACTION	testdocs/sqlite3.c	/^#define SQLITE_TRANSACTION /;"	d	file:
SQLITE_TRANSIENT	testdocs/sqlite3.c	/^#define SQLITE_TRANSIENT /;"	d	file:
SQLITE_Transitive	testdocs/sqlite3.c	/^#define SQLITE_Transitive /;"	d	file:
SQLITE_UNIX_THREADS	testdocs/sqlite3.c	/^# define SQLITE_UNIX_THREADS /;"	d	file:
SQLITE_UPDATE	testdocs/sqlite3.c	/^#define SQLITE_UPDATE /;"	d	file:
SQLITE_USE_MALLOC_H	testdocs/sqlite3.c	/^#  define SQLITE_USE_MALLOC_H /;"	d	file:
SQLITE_USE_MALLOC_H	testdocs/sqlite3.c	/^#  define SQLITE_USE_MALLOC_H$/;"	d	file:
SQLITE_USE_MALLOC_USABLE_SIZE	testdocs/sqlite3.c	/^#  define SQLITE_USE_MALLOC_USABLE_SIZE /;"	d	file:
SQLITE_USE_MSIZE	testdocs/sqlite3.c	/^#  define SQLITE_USE_MSIZE$/;"	d	file:
SQLITE_USE_URI	testdocs/sqlite3.c	/^#  define SQLITE_USE_URI /;"	d	file:
SQLITE_UTF16	testdocs/sqlite3.c	/^#define SQLITE_UTF16 /;"	d	file:
SQLITE_UTF16BE	testdocs/sqlite3.c	/^#define SQLITE_UTF16BE /;"	d	file:
SQLITE_UTF16LE	testdocs/sqlite3.c	/^#define SQLITE_UTF16LE /;"	d	file:
SQLITE_UTF16NATIVE	testdocs/sqlite3.c	/^# define SQLITE_UTF16NATIVE /;"	d	file:
SQLITE_UTF16_ALIGNED	testdocs/sqlite3.c	/^#define SQLITE_UTF16_ALIGNED /;"	d	file:
SQLITE_UTF8	testdocs/sqlite3.c	/^#define SQLITE_UTF8 /;"	d	file:
SQLITE_VDBEINT_H	testdocs/sqlite3.c	/^#define SQLITE_VDBEINT_H$/;"	d	file:
SQLITE_VDBE_H	testdocs/sqlite3.c	/^#define SQLITE_VDBE_H$/;"	d	file:
SQLITE_VERSION	testdocs/sqlite3.c	/^# undef SQLITE_VERSION$/;"	d	file:
SQLITE_VERSION	testdocs/sqlite3.c	/^#define SQLITE_VERSION /;"	d	file:
SQLITE_VERSION_NUMBER	testdocs/sqlite3.c	/^# undef SQLITE_VERSION_NUMBER$/;"	d	file:
SQLITE_VERSION_NUMBER	testdocs/sqlite3.c	/^#define SQLITE_VERSION_NUMBER /;"	d	file:
SQLITE_VTAB_CONSTRAINT_SUPPORT	testdocs/sqlite3.c	/^#define SQLITE_VTAB_CONSTRAINT_SUPPORT /;"	d	file:
SQLITE_Vacuum	testdocs/sqlite3.c	/^#define SQLITE_Vacuum /;"	d	file:
SQLITE_VdbeAddopTrace	testdocs/sqlite3.c	/^#define SQLITE_VdbeAddopTrace /;"	d	file:
SQLITE_VdbeEQP	testdocs/sqlite3.c	/^#define SQLITE_VdbeEQP /;"	d	file:
SQLITE_VdbeListing	testdocs/sqlite3.c	/^#define SQLITE_VdbeListing /;"	d	file:
SQLITE_VdbeTrace	testdocs/sqlite3.c	/^#define SQLITE_VdbeTrace /;"	d	file:
SQLITE_W32_MUTEX_INITIALIZER	testdocs/sqlite3.c	/^#define SQLITE_W32_MUTEX_INITIALIZER /;"	d	file:
SQLITE_WAL_H	testdocs/sqlite3.c	/^#define SQLITE_WAL_H$/;"	d	file:
SQLITE_WARNING	testdocs/sqlite3.c	/^#define SQLITE_WARNING /;"	d	file:
SQLITE_WARNING_AUTOINDEX	testdocs/sqlite3.c	/^#define SQLITE_WARNING_AUTOINDEX /;"	d	file:
SQLITE_WIN32_CACHE_SIZE	testdocs/sqlite3.c	/^#    define SQLITE_WIN32_CACHE_SIZE /;"	d	file:
SQLITE_WIN32_CACHE_SIZE	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_CACHE_SIZE /;"	d	file:
SQLITE_WIN32_CACHE_SIZE	testdocs/sqlite3.c	/^#  undef SQLITE_WIN32_CACHE_SIZE$/;"	d	file:
SQLITE_WIN32_CREATEFILEMAPPINGA	testdocs/sqlite3.c	/^#    define SQLITE_WIN32_CREATEFILEMAPPINGA /;"	d	file:
SQLITE_WIN32_DATA_DIRECTORY_TYPE	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_DATA_DIRECTORY_TYPE /;"	d	file:
SQLITE_WIN32_DBG_BUF_SIZE	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_DBG_BUF_SIZE /;"	d	file:
SQLITE_WIN32_GETVERSIONEX	testdocs/sqlite3.c	/^#    define SQLITE_WIN32_GETVERSIONEX /;"	d	file:
SQLITE_WIN32_HAS_ANSI	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_HAS_ANSI$/;"	d	file:
SQLITE_WIN32_HAS_WIDE	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_HAS_WIDE$/;"	d	file:
SQLITE_WIN32_HEAP_CREATE	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_HEAP_CREATE /;"	d	file:
SQLITE_WIN32_HEAP_FLAGS	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_HEAP_FLAGS /;"	d	file:
SQLITE_WIN32_HEAP_INIT_EXTRA	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_HEAP_INIT_EXTRA /;"	d	file:
SQLITE_WIN32_HEAP_INIT_SIZE	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_HEAP_INIT_SIZE /;"	d	file:
SQLITE_WIN32_HEAP_MAX_INIT_SIZE	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_HEAP_MAX_INIT_SIZE /;"	d	file:
SQLITE_WIN32_HEAP_MAX_SIZE	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_HEAP_MAX_SIZE /;"	d	file:
SQLITE_WIN32_IOERR_RETRY	testdocs/sqlite3.c	/^# define SQLITE_WIN32_IOERR_RETRY /;"	d	file:
SQLITE_WIN32_IOERR_RETRY_DELAY	testdocs/sqlite3.c	/^# define SQLITE_WIN32_IOERR_RETRY_DELAY /;"	d	file:
SQLITE_WIN32_MAX_CACHE_SIZE	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_MAX_CACHE_SIZE /;"	d	file:
SQLITE_WIN32_MAX_ERRMSG_CHARS	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_MAX_ERRMSG_CHARS /;"	d	file:
SQLITE_WIN32_MAX_PATH_BYTES	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_MAX_PATH_BYTES /;"	d	file:
SQLITE_WIN32_MAX_PATH_CHARS	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_MAX_PATH_CHARS /;"	d	file:
SQLITE_WIN32_TEMP_DIRECTORY_TYPE	testdocs/sqlite3.c	/^#  define SQLITE_WIN32_TEMP_DIRECTORY_TYPE /;"	d	file:
SQLITE_WIN32_VOLATILE	testdocs/sqlite3.c	/^# define SQLITE_WIN32_VOLATILE /;"	d	file:
SQLITE_WIN32_VOLATILE	testdocs/sqlite3.c	/^# define SQLITE_WIN32_VOLATILE$/;"	d	file:
SQLITE_WINNT_MAX_PATH_BYTES	testdocs/sqlite3.c	/^#  define SQLITE_WINNT_MAX_PATH_BYTES /;"	d	file:
SQLITE_WINNT_MAX_PATH_CHARS	testdocs/sqlite3.c	/^#  define SQLITE_WINNT_MAX_PATH_CHARS /;"	d	file:
SQLITE_WITHIN	testdocs/sqlite3.c	/^#define SQLITE_WITHIN(/;"	d	file:
SQLITE_WSD	testdocs/sqlite3.c	/^  #define SQLITE_WSD /;"	d	file:
SQLITE_WSD	testdocs/sqlite3.c	/^  #define SQLITE_WSD$/;"	d	file:
SQLITE_WriteSchema	testdocs/sqlite3.c	/^#define SQLITE_WriteSchema /;"	d	file:
SQL_CHOMP_SEGDIR	testdocs/sqlite3.c	/^#define SQL_CHOMP_SEGDIR /;"	d	file:
SQL_CONTENT_INSERT	testdocs/sqlite3.c	/^#define SQL_CONTENT_INSERT /;"	d	file:
SQL_DELETE_ALL_CONTENT	testdocs/sqlite3.c	/^#define SQL_DELETE_ALL_CONTENT /;"	d	file:
SQL_DELETE_ALL_DOCSIZE	testdocs/sqlite3.c	/^#define SQL_DELETE_ALL_DOCSIZE /;"	d	file:
SQL_DELETE_ALL_SEGDIR	testdocs/sqlite3.c	/^#define SQL_DELETE_ALL_SEGDIR /;"	d	file:
SQL_DELETE_ALL_SEGMENTS	testdocs/sqlite3.c	/^#define SQL_DELETE_ALL_SEGMENTS /;"	d	file:
SQL_DELETE_ALL_STAT	testdocs/sqlite3.c	/^#define SQL_DELETE_ALL_STAT /;"	d	file:
SQL_DELETE_ALL_TERMS_SEGDIR	testdocs/sqlite3.c	/^#define SQL_DELETE_ALL_TERMS_SEGDIR /;"	d	file:
SQL_DELETE_CONTENT	testdocs/sqlite3.c	/^#define SQL_DELETE_CONTENT /;"	d	file:
SQL_DELETE_DOCSIZE	testdocs/sqlite3.c	/^#define SQL_DELETE_DOCSIZE /;"	d	file:
SQL_DELETE_SEGDIR_ENTRY	testdocs/sqlite3.c	/^#define SQL_DELETE_SEGDIR_ENTRY /;"	d	file:
SQL_DELETE_SEGDIR_LEVEL	testdocs/sqlite3.c	/^#define SQL_DELETE_SEGDIR_LEVEL /;"	d	file:
SQL_DELETE_SEGDIR_RANGE	testdocs/sqlite3.c	/^#define SQL_DELETE_SEGDIR_RANGE /;"	d	file:
SQL_DELETE_SEGMENTS_RANGE	testdocs/sqlite3.c	/^#define SQL_DELETE_SEGMENTS_RANGE /;"	d	file:
SQL_FIND_MERGE_LEVEL	testdocs/sqlite3.c	/^#define SQL_FIND_MERGE_LEVEL /;"	d	file:
SQL_INSERT_SEGDIR	testdocs/sqlite3.c	/^#define SQL_INSERT_SEGDIR /;"	d	file:
SQL_INSERT_SEGMENTS	testdocs/sqlite3.c	/^#define SQL_INSERT_SEGMENTS /;"	d	file:
SQL_IS_EMPTY	testdocs/sqlite3.c	/^#define SQL_IS_EMPTY /;"	d	file:
SQL_MAX_LEAF_NODE_ESTIMATE	testdocs/sqlite3.c	/^#define SQL_MAX_LEAF_NODE_ESTIMATE /;"	d	file:
SQL_NEXT_SEGMENTS_ID	testdocs/sqlite3.c	/^#define SQL_NEXT_SEGMENTS_ID /;"	d	file:
SQL_NEXT_SEGMENT_INDEX	testdocs/sqlite3.c	/^#define SQL_NEXT_SEGMENT_INDEX /;"	d	file:
SQL_REPLACE_DOCSIZE	testdocs/sqlite3.c	/^#define SQL_REPLACE_DOCSIZE /;"	d	file:
SQL_REPLACE_STAT	testdocs/sqlite3.c	/^#define SQL_REPLACE_STAT /;"	d	file:
SQL_SEGMENT_IS_APPENDABLE	testdocs/sqlite3.c	/^#define SQL_SEGMENT_IS_APPENDABLE /;"	d	file:
SQL_SELECT_ALL_LANGID	testdocs/sqlite3.c	/^#define SQL_SELECT_ALL_LANGID /;"	d	file:
SQL_SELECT_ALL_PREFIX_LEVEL	testdocs/sqlite3.c	/^#define SQL_SELECT_ALL_PREFIX_LEVEL /;"	d	file:
SQL_SELECT_CONTENT_BY_ROWID	testdocs/sqlite3.c	/^#define SQL_SELECT_CONTENT_BY_ROWID /;"	d	file:
SQL_SELECT_DOCSIZE	testdocs/sqlite3.c	/^#define SQL_SELECT_DOCSIZE /;"	d	file:
SQL_SELECT_INDEXES	testdocs/sqlite3.c	/^#define SQL_SELECT_INDEXES /;"	d	file:
SQL_SELECT_LEVEL	testdocs/sqlite3.c	/^#define SQL_SELECT_LEVEL /;"	d	file:
SQL_SELECT_LEVEL_COUNT	testdocs/sqlite3.c	/^#define SQL_SELECT_LEVEL_COUNT /;"	d	file:
SQL_SELECT_LEVEL_RANGE	testdocs/sqlite3.c	/^#define SQL_SELECT_LEVEL_RANGE /;"	d	file:
SQL_SELECT_LEVEL_RANGE2	testdocs/sqlite3.c	/^#define SQL_SELECT_LEVEL_RANGE2 /;"	d	file:
SQL_SELECT_MXLEVEL	testdocs/sqlite3.c	/^#define SQL_SELECT_MXLEVEL /;"	d	file:
SQL_SELECT_SEGDIR	testdocs/sqlite3.c	/^#define SQL_SELECT_SEGDIR /;"	d	file:
SQL_SELECT_SEGDIR_MAX_LEVEL	testdocs/sqlite3.c	/^#define SQL_SELECT_SEGDIR_MAX_LEVEL /;"	d	file:
SQL_SELECT_STAT	testdocs/sqlite3.c	/^#define SQL_SELECT_STAT /;"	d	file:
SQL_SHIFT_SEGDIR_ENTRY	testdocs/sqlite3.c	/^#define SQL_SHIFT_SEGDIR_ENTRY /;"	d	file:
SQL_UPDATE_LEVEL	testdocs/sqlite3.c	/^#define SQL_UPDATE_LEVEL /;"	d	file:
SQL_UPDATE_LEVEL_IDX	testdocs/sqlite3.c	/^#define SQL_UPDATE_LEVEL_IDX /;"	d	file:
SQLiteThread	testdocs/sqlite3.c	/^struct SQLiteThread {$/;"	s	file:
SQLiteThread	testdocs/sqlite3.c	/^typedef struct SQLiteThread SQLiteThread;$/;"	t	typeref:struct:SQLiteThread	file:
SRT_Coroutine	testdocs/sqlite3.c	/^#define SRT_Coroutine /;"	d	file:
SRT_Discard	testdocs/sqlite3.c	/^#define SRT_Discard /;"	d	file:
SRT_DistFifo	testdocs/sqlite3.c	/^#define SRT_DistFifo /;"	d	file:
SRT_DistQueue	testdocs/sqlite3.c	/^#define SRT_DistQueue /;"	d	file:
SRT_EphemTab	testdocs/sqlite3.c	/^#define SRT_EphemTab /;"	d	file:
SRT_Except	testdocs/sqlite3.c	/^#define SRT_Except /;"	d	file:
SRT_Exists	testdocs/sqlite3.c	/^#define SRT_Exists /;"	d	file:
SRT_Fifo	testdocs/sqlite3.c	/^#define SRT_Fifo /;"	d	file:
SRT_Mem	testdocs/sqlite3.c	/^#define SRT_Mem /;"	d	file:
SRT_Output	testdocs/sqlite3.c	/^#define SRT_Output /;"	d	file:
SRT_Queue	testdocs/sqlite3.c	/^#define SRT_Queue /;"	d	file:
SRT_Set	testdocs/sqlite3.c	/^#define SRT_Set /;"	d	file:
SRT_Table	testdocs/sqlite3.c	/^#define SRT_Table /;"	d	file:
SRT_Union	testdocs/sqlite3.c	/^#define SRT_Union /;"	d	file:
SRVAL	testdocs/sqlite3.c	/^#define SRVAL(/;"	d	file:
STAT_GET_NDLT	testdocs/sqlite3.c	/^#define STAT_GET_NDLT /;"	d	file:
STAT_GET_NEQ	testdocs/sqlite3.c	/^#define STAT_GET_NEQ /;"	d	file:
STAT_GET_NLT	testdocs/sqlite3.c	/^#define STAT_GET_NLT /;"	d	file:
STAT_GET_ROWID	testdocs/sqlite3.c	/^#define STAT_GET_ROWID /;"	d	file:
STAT_GET_STAT1	testdocs/sqlite3.c	/^#define STAT_GET_STAT1 /;"	d	file:
STRACCUM_NOMEM	testdocs/sqlite3.c	/^#define STRACCUM_NOMEM /;"	d	file:
STRACCUM_TOOBIG	testdocs/sqlite3.c	/^#define STRACCUM_TOOBIG /;"	d	file:
STR_FUNCTION	testdocs/sqlite3.c	/^#define STR_FUNCTION(/;"	d	file:
SWAP	testdocs/sqlite3.c	/^# define SWAP(/;"	d	file:
SWAP	testdocs/sqlite3.c	/^#define SWAP(/;"	d	file:
SWAPVAL	testdocs/sqlite3.c	/^#define SWAPVAL(/;"	d	file:
SYSCALL	testdocs/sqlite3.c	/^#  define SYSCALL /;"	d	file:
Savepoint	testdocs/sqlite3.c	/^struct Savepoint {$/;"	s	file:
Savepoint	testdocs/sqlite3.c	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint	file:
ScanStatus	testdocs/sqlite3.c	/^struct ScanStatus {$/;"	s	file:
ScanStatus	testdocs/sqlite3.c	/^typedef struct ScanStatus ScanStatus;$/;"	t	typeref:struct:ScanStatus	file:
Schema	testdocs/sqlite3.c	/^struct Schema {$/;"	s	file:
Schema	testdocs/sqlite3.c	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema	file:
ScratchFreeslot	testdocs/sqlite3.c	/^typedef struct ScratchFreeslot {$/;"	s	file:
ScratchFreeslot	testdocs/sqlite3.c	/^} ScratchFreeslot;$/;"	t	typeref:struct:ScratchFreeslot	file:
Scripting	testdocs/waf	/^	from waflib import Scripting$/;"	i
SegmentNode	testdocs/sqlite3.c	/^struct SegmentNode {$/;"	s	file:
SegmentNode	testdocs/sqlite3.c	/^typedef struct SegmentNode SegmentNode;$/;"	t	typeref:struct:SegmentNode	file:
SegmentWriter	testdocs/sqlite3.c	/^struct SegmentWriter {$/;"	s	file:
SegmentWriter	testdocs/sqlite3.c	/^typedef struct SegmentWriter SegmentWriter;$/;"	t	typeref:struct:SegmentWriter	file:
Sel	edit.h	/^} Sel;$/;"	t	typeref:struct:__anon6
Select	testdocs/sqlite3.c	/^struct Select {$/;"	s	file:
Select	testdocs/sqlite3.c	/^typedef struct Select Select;$/;"	t	typeref:struct:Select	file:
SelectDest	testdocs/sqlite3.c	/^struct SelectDest {$/;"	s	file:
SelectDest	testdocs/sqlite3.c	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest	file:
SessionApplyCtx	testdocs/sqlite3.c	/^struct SessionApplyCtx {$/;"	s	file:
SessionApplyCtx	testdocs/sqlite3.c	/^typedef struct SessionApplyCtx SessionApplyCtx;$/;"	t	typeref:struct:SessionApplyCtx	file:
SessionBuffer	testdocs/sqlite3.c	/^struct SessionBuffer {$/;"	s	file:
SessionBuffer	testdocs/sqlite3.c	/^typedef struct SessionBuffer SessionBuffer;$/;"	t	typeref:struct:SessionBuffer	file:
SessionChange	testdocs/sqlite3.c	/^struct SessionChange {$/;"	s	file:
SessionChange	testdocs/sqlite3.c	/^typedef struct SessionChange SessionChange;$/;"	t	typeref:struct:SessionChange	file:
SessionDiffCtx	testdocs/sqlite3.c	/^struct SessionDiffCtx {$/;"	s	file:
SessionDiffCtx	testdocs/sqlite3.c	/^typedef struct SessionDiffCtx SessionDiffCtx;$/;"	t	typeref:struct:SessionDiffCtx	file:
SessionHook	testdocs/sqlite3.c	/^struct SessionHook {$/;"	s	file:
SessionHook	testdocs/sqlite3.c	/^typedef struct SessionHook SessionHook;$/;"	t	typeref:struct:SessionHook	file:
SessionInput	testdocs/sqlite3.c	/^struct SessionInput {$/;"	s	file:
SessionInput	testdocs/sqlite3.c	/^typedef struct SessionInput SessionInput;$/;"	t	typeref:struct:SessionInput	file:
SessionTable	testdocs/sqlite3.c	/^struct SessionTable {$/;"	s	file:
SessionTable	testdocs/sqlite3.c	/^typedef struct SessionTable SessionTable;$/;"	t	typeref:struct:SessionTable	file:
ShmRegion	testdocs/sqlite3.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:
SimulateDiskfullError	testdocs/sqlite3.c	/^#define SimulateDiskfullError(/;"	d	file:
SimulateIOError	testdocs/sqlite3.c	/^#define SimulateIOError(/;"	d	file:
SimulateIOErrorBenign	testdocs/sqlite3.c	/^#define SimulateIOErrorBenign(/;"	d	file:
SizeofArray	testdocs/sqlite3.c	/^#define SizeofArray(/;"	d	file:
SnippetFragment	testdocs/sqlite3.c	/^struct SnippetFragment {$/;"	s	file:
SnippetFragment	testdocs/sqlite3.c	/^typedef struct SnippetFragment SnippetFragment;$/;"	t	typeref:struct:SnippetFragment	file:
SnippetIter	testdocs/sqlite3.c	/^struct SnippetIter {$/;"	s	file:
SnippetIter	testdocs/sqlite3.c	/^typedef struct SnippetIter SnippetIter;$/;"	t	typeref:struct:SnippetIter	file:
SnippetPhrase	testdocs/sqlite3.c	/^struct SnippetPhrase {$/;"	s	file:
SnippetPhrase	testdocs/sqlite3.c	/^typedef struct SnippetPhrase SnippetPhrase;$/;"	t	typeref:struct:SnippetPhrase	file:
SortByDimension	testdocs/sqlite3.c	/^static void SortByDimension($/;"	f	file:
SortByDistance	testdocs/sqlite3.c	/^static void SortByDistance($/;"	f	file:
SortCtx	testdocs/sqlite3.c	/^struct SortCtx {$/;"	s	file:
SortCtx	testdocs/sqlite3.c	/^typedef struct SortCtx SortCtx;$/;"	t	typeref:struct:SortCtx	file:
SortSubtask	testdocs/sqlite3.c	/^struct SortSubtask {$/;"	s	file:
SortSubtask	testdocs/sqlite3.c	/^typedef struct SortSubtask SortSubtask;     \/* A sub-task in the sort process *\/$/;"	t	typeref:struct:SortSubtask	file:
SorterCompare	testdocs/sqlite3.c	/^typedef int (*SorterCompare)(SortSubtask*,int*,const void*,int,const void*,int);$/;"	t	file:
SorterFile	testdocs/sqlite3.c	/^struct SorterFile {$/;"	s	file:
SorterFile	testdocs/sqlite3.c	/^typedef struct SorterFile SorterFile;       \/* Temporary file object wrapper *\/$/;"	t	typeref:struct:SorterFile	file:
SorterList	testdocs/sqlite3.c	/^struct SorterList {$/;"	s	file:
SorterList	testdocs/sqlite3.c	/^typedef struct SorterList SorterList;       \/* In-memory list of records *\/$/;"	t	typeref:struct:SorterList	file:
SorterRecord	testdocs/sqlite3.c	/^struct SorterRecord {$/;"	s	file:
SorterRecord	testdocs/sqlite3.c	/^typedef struct SorterRecord SorterRecord;   \/* A record being sorted *\/$/;"	t	typeref:struct:SorterRecord	file:
SplitNode	testdocs/sqlite3.c	/^static int SplitNode($/;"	f	file:
Sqlite3Config	testdocs/sqlite3.c	/^struct Sqlite3Config {$/;"	s	file:
SrcCount	testdocs/sqlite3.c	/^struct SrcCount {$/;"	s	file:
SrcList	testdocs/sqlite3.c	/^struct SrcList {$/;"	s	file:
SrcList	testdocs/sqlite3.c	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList	file:
SrcList_item	testdocs/sqlite3.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:
Stat4Accum	testdocs/sqlite3.c	/^struct Stat4Accum {$/;"	s	file:
Stat4Accum	testdocs/sqlite3.c	/^typedef struct Stat4Accum Stat4Accum;$/;"	t	typeref:struct:Stat4Accum	file:
Stat4Sample	testdocs/sqlite3.c	/^struct Stat4Sample {$/;"	s	file:
Stat4Sample	testdocs/sqlite3.c	/^typedef struct Stat4Sample Stat4Sample;$/;"	t	typeref:struct:Stat4Sample	file:
StatCell	testdocs/sqlite3.c	/^struct StatCell {$/;"	s	file:
StatCell	testdocs/sqlite3.c	/^typedef struct StatCell StatCell;$/;"	t	typeref:struct:StatCell	file:
StatCursor	testdocs/sqlite3.c	/^struct StatCursor {$/;"	s	file:
StatCursor	testdocs/sqlite3.c	/^typedef struct StatCursor StatCursor;$/;"	t	typeref:struct:StatCursor	file:
StatPage	testdocs/sqlite3.c	/^struct StatPage {$/;"	s	file:
StatPage	testdocs/sqlite3.c	/^typedef struct StatPage StatPage;$/;"	t	typeref:struct:StatPage	file:
StatTable	testdocs/sqlite3.c	/^struct StatTable {$/;"	s	file:
StatTable	testdocs/sqlite3.c	/^typedef struct StatTable StatTable;$/;"	t	typeref:struct:StatTable	file:
StrAccum	testdocs/sqlite3.c	/^struct StrAccum {$/;"	s	file:
StrAccum	testdocs/sqlite3.c	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum	file:
StrBuffer	testdocs/sqlite3.c	/^struct StrBuffer {$/;"	s	file:
StrBuffer	testdocs/sqlite3.c	/^typedef struct StrBuffer StrBuffer;$/;"	t	typeref:struct:StrBuffer	file:
Stringify	testdocs/sqlite3.c	/^#define Stringify(/;"	d	file:
SubProgram	testdocs/sqlite3.c	/^struct SubProgram {$/;"	s	file:
SubProgram	testdocs/sqlite3.c	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram	file:
SubstContext	testdocs/sqlite3.c	/^typedef struct SubstContext {$/;"	s	file:
SubstContext	testdocs/sqlite3.c	/^} SubstContext;$/;"	t	typeref:struct:SubstContext	file:
SumCtx	testdocs/sqlite3.c	/^struct SumCtx {$/;"	s	file:
SumCtx	testdocs/sqlite3.c	/^typedef struct SumCtx SumCtx;$/;"	t	typeref:struct:SumCtx	file:
TEMP_MASTER_NAME	testdocs/sqlite3.c	/^#define TEMP_MASTER_NAME /;"	d	file:
TERM_ANDINFO	testdocs/sqlite3.c	/^#define TERM_ANDINFO /;"	d	file:
TERM_CODED	testdocs/sqlite3.c	/^#define TERM_CODED /;"	d	file:
TERM_COPIED	testdocs/sqlite3.c	/^#define TERM_COPIED /;"	d	file:
TERM_DYNAMIC	testdocs/sqlite3.c	/^#define TERM_DYNAMIC /;"	d	file:
TERM_IS	testdocs/sqlite3.c	/^#define TERM_IS /;"	d	file:
TERM_LIKE	testdocs/sqlite3.c	/^#define TERM_LIKE /;"	d	file:
TERM_LIKECOND	testdocs/sqlite3.c	/^#define TERM_LIKECOND /;"	d	file:
TERM_LIKEOPT	testdocs/sqlite3.c	/^#define TERM_LIKEOPT /;"	d	file:
TERM_ORINFO	testdocs/sqlite3.c	/^#define TERM_ORINFO /;"	d	file:
TERM_OR_OK	testdocs/sqlite3.c	/^#define TERM_OR_OK /;"	d	file:
TERM_VIRTUAL	testdocs/sqlite3.c	/^#define TERM_VIRTUAL /;"	d	file:
TERM_VNULL	testdocs/sqlite3.c	/^#  define TERM_VNULL /;"	d	file:
TEST	atf.h	/^#define TEST(/;"	d
TESTBIT	testdocs/sqlite3.c	/^#define TESTBIT(/;"	d	file:
TESTONLY	testdocs/sqlite3.c	/^# define TESTONLY(/;"	d	file:
TEST_SUITE	atf.h	/^#define TEST_SUITE(/;"	d
TEST_SUITE	testbuf.c	/^TEST_SUITE(BufferTests) {$/;"	f
TF_Autoincrement	testdocs/sqlite3.c	/^#define TF_Autoincrement /;"	d	file:
TF_Ephemeral	testdocs/sqlite3.c	/^#define TF_Ephemeral /;"	d	file:
TF_HasNotNull	testdocs/sqlite3.c	/^#define TF_HasNotNull /;"	d	file:
TF_HasPrimaryKey	testdocs/sqlite3.c	/^#define TF_HasPrimaryKey /;"	d	file:
TF_HasStat1	testdocs/sqlite3.c	/^#define TF_HasStat1 /;"	d	file:
TF_NoVisibleRowid	testdocs/sqlite3.c	/^#define TF_NoVisibleRowid /;"	d	file:
TF_OOOHidden	testdocs/sqlite3.c	/^#define TF_OOOHidden /;"	d	file:
TF_Readonly	testdocs/sqlite3.c	/^#define TF_Readonly /;"	d	file:
TF_StatsUsed	testdocs/sqlite3.c	/^#define TF_StatsUsed /;"	d	file:
TF_WithoutRowid	testdocs/sqlite3.c	/^#define TF_WithoutRowid /;"	d	file:
THREE_BYTE_INT	testdocs/sqlite3.c	/^#define THREE_BYTE_INT(/;"	d	file:
TIMER_ELAPSED	testdocs/sqlite3.c	/^#define TIMER_ELAPSED /;"	d	file:
TIMER_END	testdocs/sqlite3.c	/^#define TIMER_END /;"	d	file:
TIMER_END	testdocs/sqlite3.c	/^#define TIMER_END$/;"	d	file:
TIMER_START	testdocs/sqlite3.c	/^#define TIMER_START /;"	d	file:
TIMER_START	testdocs/sqlite3.c	/^#define TIMER_START$/;"	d	file:
TKFLG_DONTFOLD	testdocs/sqlite3.c	/^#define TKFLG_DONTFOLD /;"	d	file:
TKFLG_MASK	testdocs/sqlite3.c	/^#define TKFLG_MASK /;"	d	file:
TK_ABORT	testdocs/sqlite3.c	/^#define TK_ABORT /;"	d	file:
TK_ACTION	testdocs/sqlite3.c	/^#define TK_ACTION /;"	d	file:
TK_ADD	testdocs/sqlite3.c	/^#define TK_ADD /;"	d	file:
TK_AFTER	testdocs/sqlite3.c	/^#define TK_AFTER /;"	d	file:
TK_AGG_COLUMN	testdocs/sqlite3.c	/^#define TK_AGG_COLUMN /;"	d	file:
TK_AGG_FUNCTION	testdocs/sqlite3.c	/^#define TK_AGG_FUNCTION /;"	d	file:
TK_ALL	testdocs/sqlite3.c	/^#define TK_ALL /;"	d	file:
TK_ALTER	testdocs/sqlite3.c	/^#define TK_ALTER /;"	d	file:
TK_ANALYZE	testdocs/sqlite3.c	/^#define TK_ANALYZE /;"	d	file:
TK_AND	testdocs/sqlite3.c	/^#define TK_AND /;"	d	file:
TK_ANY	testdocs/sqlite3.c	/^#define TK_ANY /;"	d	file:
TK_AS	testdocs/sqlite3.c	/^#define TK_AS /;"	d	file:
TK_ASC	testdocs/sqlite3.c	/^#define TK_ASC /;"	d	file:
TK_ASTERISK	testdocs/sqlite3.c	/^#define TK_ASTERISK /;"	d	file:
TK_ATTACH	testdocs/sqlite3.c	/^#define TK_ATTACH /;"	d	file:
TK_AUTOINCR	testdocs/sqlite3.c	/^#define TK_AUTOINCR /;"	d	file:
TK_BEFORE	testdocs/sqlite3.c	/^#define TK_BEFORE /;"	d	file:
TK_BEGIN	testdocs/sqlite3.c	/^#define TK_BEGIN /;"	d	file:
TK_BETWEEN	testdocs/sqlite3.c	/^#define TK_BETWEEN /;"	d	file:
TK_BITAND	testdocs/sqlite3.c	/^#define TK_BITAND /;"	d	file:
TK_BITNOT	testdocs/sqlite3.c	/^#define TK_BITNOT /;"	d	file:
TK_BITOR	testdocs/sqlite3.c	/^#define TK_BITOR /;"	d	file:
TK_BLOB	testdocs/sqlite3.c	/^#define TK_BLOB /;"	d	file:
TK_BY	testdocs/sqlite3.c	/^#define TK_BY /;"	d	file:
TK_CASCADE	testdocs/sqlite3.c	/^#define TK_CASCADE /;"	d	file:
TK_CASE	testdocs/sqlite3.c	/^#define TK_CASE /;"	d	file:
TK_CAST	testdocs/sqlite3.c	/^#define TK_CAST /;"	d	file:
TK_CHECK	testdocs/sqlite3.c	/^#define TK_CHECK /;"	d	file:
TK_COLLATE	testdocs/sqlite3.c	/^#define TK_COLLATE /;"	d	file:
TK_COLUMN	testdocs/sqlite3.c	/^#define TK_COLUMN /;"	d	file:
TK_COLUMNKW	testdocs/sqlite3.c	/^#define TK_COLUMNKW /;"	d	file:
TK_COMMA	testdocs/sqlite3.c	/^#define TK_COMMA /;"	d	file:
TK_COMMIT	testdocs/sqlite3.c	/^#define TK_COMMIT /;"	d	file:
TK_CONCAT	testdocs/sqlite3.c	/^#define TK_CONCAT /;"	d	file:
TK_CONFLICT	testdocs/sqlite3.c	/^#define TK_CONFLICT /;"	d	file:
TK_CONSTRAINT	testdocs/sqlite3.c	/^#define TK_CONSTRAINT /;"	d	file:
TK_CREATE	testdocs/sqlite3.c	/^#define TK_CREATE /;"	d	file:
TK_CTIME_KW	testdocs/sqlite3.c	/^#define TK_CTIME_KW /;"	d	file:
TK_DATABASE	testdocs/sqlite3.c	/^#define TK_DATABASE /;"	d	file:
TK_DEFAULT	testdocs/sqlite3.c	/^#define TK_DEFAULT /;"	d	file:
TK_DEFERRABLE	testdocs/sqlite3.c	/^#define TK_DEFERRABLE /;"	d	file:
TK_DEFERRED	testdocs/sqlite3.c	/^#define TK_DEFERRED /;"	d	file:
TK_DELETE	testdocs/sqlite3.c	/^#define TK_DELETE /;"	d	file:
TK_DESC	testdocs/sqlite3.c	/^#define TK_DESC /;"	d	file:
TK_DETACH	testdocs/sqlite3.c	/^#define TK_DETACH /;"	d	file:
TK_DISTINCT	testdocs/sqlite3.c	/^#define TK_DISTINCT /;"	d	file:
TK_DOT	testdocs/sqlite3.c	/^#define TK_DOT /;"	d	file:
TK_DROP	testdocs/sqlite3.c	/^#define TK_DROP /;"	d	file:
TK_EACH	testdocs/sqlite3.c	/^#define TK_EACH /;"	d	file:
TK_ELSE	testdocs/sqlite3.c	/^#define TK_ELSE /;"	d	file:
TK_END	testdocs/sqlite3.c	/^#define TK_END /;"	d	file:
TK_END_OF_FILE	testdocs/sqlite3.c	/^#define TK_END_OF_FILE /;"	d	file:
TK_EQ	testdocs/sqlite3.c	/^#define TK_EQ /;"	d	file:
TK_ESCAPE	testdocs/sqlite3.c	/^#define TK_ESCAPE /;"	d	file:
TK_EXCEPT	testdocs/sqlite3.c	/^#define TK_EXCEPT /;"	d	file:
TK_EXCLUSIVE	testdocs/sqlite3.c	/^#define TK_EXCLUSIVE /;"	d	file:
TK_EXISTS	testdocs/sqlite3.c	/^#define TK_EXISTS /;"	d	file:
TK_EXPLAIN	testdocs/sqlite3.c	/^#define TK_EXPLAIN /;"	d	file:
TK_FAIL	testdocs/sqlite3.c	/^#define TK_FAIL /;"	d	file:
TK_FLOAT	testdocs/sqlite3.c	/^#define TK_FLOAT /;"	d	file:
TK_FOR	testdocs/sqlite3.c	/^#define TK_FOR /;"	d	file:
TK_FOREIGN	testdocs/sqlite3.c	/^#define TK_FOREIGN /;"	d	file:
TK_FROM	testdocs/sqlite3.c	/^#define TK_FROM /;"	d	file:
TK_FUNCTION	testdocs/sqlite3.c	/^#define TK_FUNCTION /;"	d	file:
TK_GE	testdocs/sqlite3.c	/^#define TK_GE /;"	d	file:
TK_GROUP	testdocs/sqlite3.c	/^#define TK_GROUP /;"	d	file:
TK_GT	testdocs/sqlite3.c	/^#define TK_GT /;"	d	file:
TK_HAVING	testdocs/sqlite3.c	/^#define TK_HAVING /;"	d	file:
TK_ID	testdocs/sqlite3.c	/^#define TK_ID /;"	d	file:
TK_IF	testdocs/sqlite3.c	/^#define TK_IF /;"	d	file:
TK_IF_NULL_ROW	testdocs/sqlite3.c	/^#define TK_IF_NULL_ROW /;"	d	file:
TK_IGNORE	testdocs/sqlite3.c	/^#define TK_IGNORE /;"	d	file:
TK_ILLEGAL	testdocs/sqlite3.c	/^#define TK_ILLEGAL /;"	d	file:
TK_IMMEDIATE	testdocs/sqlite3.c	/^#define TK_IMMEDIATE /;"	d	file:
TK_IN	testdocs/sqlite3.c	/^#define TK_IN /;"	d	file:
TK_INDEX	testdocs/sqlite3.c	/^#define TK_INDEX /;"	d	file:
TK_INDEXED	testdocs/sqlite3.c	/^#define TK_INDEXED /;"	d	file:
TK_INITIALLY	testdocs/sqlite3.c	/^#define TK_INITIALLY /;"	d	file:
TK_INSERT	testdocs/sqlite3.c	/^#define TK_INSERT /;"	d	file:
TK_INSTEAD	testdocs/sqlite3.c	/^#define TK_INSTEAD /;"	d	file:
TK_INTEGER	testdocs/sqlite3.c	/^#define TK_INTEGER /;"	d	file:
TK_INTERSECT	testdocs/sqlite3.c	/^#define TK_INTERSECT /;"	d	file:
TK_INTO	testdocs/sqlite3.c	/^#define TK_INTO /;"	d	file:
TK_IS	testdocs/sqlite3.c	/^#define TK_IS /;"	d	file:
TK_ISNOT	testdocs/sqlite3.c	/^#define TK_ISNOT /;"	d	file:
TK_ISNULL	testdocs/sqlite3.c	/^#define TK_ISNULL /;"	d	file:
TK_JOIN	testdocs/sqlite3.c	/^#define TK_JOIN /;"	d	file:
TK_JOIN_KW	testdocs/sqlite3.c	/^#define TK_JOIN_KW /;"	d	file:
TK_KEY	testdocs/sqlite3.c	/^#define TK_KEY /;"	d	file:
TK_LE	testdocs/sqlite3.c	/^#define TK_LE /;"	d	file:
TK_LIKE_KW	testdocs/sqlite3.c	/^#define TK_LIKE_KW /;"	d	file:
TK_LIMIT	testdocs/sqlite3.c	/^#define TK_LIMIT /;"	d	file:
TK_LP	testdocs/sqlite3.c	/^#define TK_LP /;"	d	file:
TK_LSHIFT	testdocs/sqlite3.c	/^#define TK_LSHIFT /;"	d	file:
TK_LT	testdocs/sqlite3.c	/^#define TK_LT /;"	d	file:
TK_MATCH	testdocs/sqlite3.c	/^#define TK_MATCH /;"	d	file:
TK_MINUS	testdocs/sqlite3.c	/^#define TK_MINUS /;"	d	file:
TK_NE	testdocs/sqlite3.c	/^#define TK_NE /;"	d	file:
TK_NO	testdocs/sqlite3.c	/^#define TK_NO /;"	d	file:
TK_NOT	testdocs/sqlite3.c	/^#define TK_NOT /;"	d	file:
TK_NOTNULL	testdocs/sqlite3.c	/^#define TK_NOTNULL /;"	d	file:
TK_NULL	testdocs/sqlite3.c	/^#define TK_NULL /;"	d	file:
TK_OF	testdocs/sqlite3.c	/^#define TK_OF /;"	d	file:
TK_OFFSET	testdocs/sqlite3.c	/^#define TK_OFFSET /;"	d	file:
TK_ON	testdocs/sqlite3.c	/^#define TK_ON /;"	d	file:
TK_OR	testdocs/sqlite3.c	/^#define TK_OR /;"	d	file:
TK_ORDER	testdocs/sqlite3.c	/^#define TK_ORDER /;"	d	file:
TK_PLAN	testdocs/sqlite3.c	/^#define TK_PLAN /;"	d	file:
TK_PLUS	testdocs/sqlite3.c	/^#define TK_PLUS /;"	d	file:
TK_PRAGMA	testdocs/sqlite3.c	/^#define TK_PRAGMA /;"	d	file:
TK_PRIMARY	testdocs/sqlite3.c	/^#define TK_PRIMARY /;"	d	file:
TK_QUERY	testdocs/sqlite3.c	/^#define TK_QUERY /;"	d	file:
TK_RAISE	testdocs/sqlite3.c	/^#define TK_RAISE /;"	d	file:
TK_RECURSIVE	testdocs/sqlite3.c	/^#define TK_RECURSIVE /;"	d	file:
TK_REFERENCES	testdocs/sqlite3.c	/^#define TK_REFERENCES /;"	d	file:
TK_REGISTER	testdocs/sqlite3.c	/^#define TK_REGISTER /;"	d	file:
TK_REINDEX	testdocs/sqlite3.c	/^#define TK_REINDEX /;"	d	file:
TK_RELEASE	testdocs/sqlite3.c	/^#define TK_RELEASE /;"	d	file:
TK_REM	testdocs/sqlite3.c	/^#define TK_REM /;"	d	file:
TK_RENAME	testdocs/sqlite3.c	/^#define TK_RENAME /;"	d	file:
TK_REPLACE	testdocs/sqlite3.c	/^#define TK_REPLACE /;"	d	file:
TK_RESTRICT	testdocs/sqlite3.c	/^#define TK_RESTRICT /;"	d	file:
TK_ROLLBACK	testdocs/sqlite3.c	/^#define TK_ROLLBACK /;"	d	file:
TK_ROW	testdocs/sqlite3.c	/^#define TK_ROW /;"	d	file:
TK_RP	testdocs/sqlite3.c	/^#define TK_RP /;"	d	file:
TK_RSHIFT	testdocs/sqlite3.c	/^#define TK_RSHIFT /;"	d	file:
TK_SAVEPOINT	testdocs/sqlite3.c	/^#define TK_SAVEPOINT /;"	d	file:
TK_SELECT	testdocs/sqlite3.c	/^#define TK_SELECT /;"	d	file:
TK_SELECT_COLUMN	testdocs/sqlite3.c	/^#define TK_SELECT_COLUMN /;"	d	file:
TK_SEMI	testdocs/sqlite3.c	/^#define TK_SEMI /;"	d	file:
TK_SET	testdocs/sqlite3.c	/^#define TK_SET /;"	d	file:
TK_SLASH	testdocs/sqlite3.c	/^#define TK_SLASH /;"	d	file:
TK_SPACE	testdocs/sqlite3.c	/^#define TK_SPACE /;"	d	file:
TK_SPAN	testdocs/sqlite3.c	/^#define TK_SPAN /;"	d	file:
TK_STAR	testdocs/sqlite3.c	/^#define TK_STAR /;"	d	file:
TK_STRING	testdocs/sqlite3.c	/^#define TK_STRING /;"	d	file:
TK_TABLE	testdocs/sqlite3.c	/^#define TK_TABLE /;"	d	file:
TK_TEMP	testdocs/sqlite3.c	/^#define TK_TEMP /;"	d	file:
TK_THEN	testdocs/sqlite3.c	/^#define TK_THEN /;"	d	file:
TK_TO	testdocs/sqlite3.c	/^#define TK_TO /;"	d	file:
TK_TO_BLOB	testdocs/sqlite3.c	/^#define TK_TO_BLOB /;"	d	file:
TK_TO_INT	testdocs/sqlite3.c	/^#define TK_TO_INT /;"	d	file:
TK_TO_NUMERIC	testdocs/sqlite3.c	/^#define TK_TO_NUMERIC /;"	d	file:
TK_TO_REAL	testdocs/sqlite3.c	/^#define TK_TO_REAL /;"	d	file:
TK_TO_TEXT	testdocs/sqlite3.c	/^#define TK_TO_TEXT /;"	d	file:
TK_TRANSACTION	testdocs/sqlite3.c	/^#define TK_TRANSACTION /;"	d	file:
TK_TRIGGER	testdocs/sqlite3.c	/^#define TK_TRIGGER /;"	d	file:
TK_UMINUS	testdocs/sqlite3.c	/^#define TK_UMINUS /;"	d	file:
TK_UNCLOSED_STRING	testdocs/sqlite3.c	/^#define TK_UNCLOSED_STRING /;"	d	file:
TK_UNION	testdocs/sqlite3.c	/^#define TK_UNION /;"	d	file:
TK_UNIQUE	testdocs/sqlite3.c	/^#define TK_UNIQUE /;"	d	file:
TK_UPDATE	testdocs/sqlite3.c	/^#define TK_UPDATE /;"	d	file:
TK_UPLUS	testdocs/sqlite3.c	/^#define TK_UPLUS /;"	d	file:
TK_USING	testdocs/sqlite3.c	/^#define TK_USING /;"	d	file:
TK_VACUUM	testdocs/sqlite3.c	/^#define TK_VACUUM /;"	d	file:
TK_VALUES	testdocs/sqlite3.c	/^#define TK_VALUES /;"	d	file:
TK_VARIABLE	testdocs/sqlite3.c	/^#define TK_VARIABLE /;"	d	file:
TK_VECTOR	testdocs/sqlite3.c	/^#define TK_VECTOR /;"	d	file:
TK_VIEW	testdocs/sqlite3.c	/^#define TK_VIEW /;"	d	file:
TK_VIRTUAL	testdocs/sqlite3.c	/^#define TK_VIRTUAL /;"	d	file:
TK_WHEN	testdocs/sqlite3.c	/^#define TK_WHEN /;"	d	file:
TK_WHERE	testdocs/sqlite3.c	/^#define TK_WHERE /;"	d	file:
TK_WITH	testdocs/sqlite3.c	/^#define TK_WITH /;"	d	file:
TK_WITHOUT	testdocs/sqlite3.c	/^#define TK_WITHOUT /;"	d	file:
TOKEN	testdocs/sqlite3.c	/^#define TOKEN /;"	d	file:
TRACE	testdocs/sqlite3.c	/^# define TRACE(/;"	d	file:
TRACE_IDX_INPUTS	testdocs/sqlite3.c	/^#define TRACE_IDX_INPUTS(/;"	d	file:
TRACE_IDX_INPUTS	testdocs/sqlite3.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_OUTPUTS	testdocs/sqlite3.c	/^#define TRACE_IDX_OUTPUTS(/;"	d	file:
TRACE_IDX_OUTPUTS	testdocs/sqlite3.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:
TRANS_NONE	testdocs/sqlite3.c	/^#define TRANS_NONE /;"	d	file:
TRANS_READ	testdocs/sqlite3.c	/^#define TRANS_READ /;"	d	file:
TRANS_WRITE	testdocs/sqlite3.c	/^#define TRANS_WRITE /;"	d	file:
TRIGGER_AFTER	testdocs/sqlite3.c	/^#define TRIGGER_AFTER /;"	d	file:
TRIGGER_BEFORE	testdocs/sqlite3.c	/^#define TRIGGER_BEFORE /;"	d	file:
TWO_BYTE_INT	testdocs/sqlite3.c	/^#define TWO_BYTE_INT(/;"	d	file:
TabResult	testdocs/sqlite3.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	testdocs/sqlite3.c	/^} TabResult;$/;"	t	typeref:struct:TabResult	file:
Table	testdocs/sqlite3.c	/^struct Table {$/;"	s	file:
Table	testdocs/sqlite3.c	/^typedef struct Table Table;$/;"	t	typeref:struct:Table	file:
TableLock	testdocs/sqlite3.c	/^struct TableLock {$/;"	s	file:
TableLock	testdocs/sqlite3.c	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock	file:
TermOffset	testdocs/sqlite3.c	/^struct TermOffset {$/;"	s	file:
TermOffset	testdocs/sqlite3.c	/^typedef struct TermOffset TermOffset;$/;"	t	typeref:struct:TermOffset	file:
TermOffsetCtx	testdocs/sqlite3.c	/^struct TermOffsetCtx {$/;"	s	file:
TermOffsetCtx	testdocs/sqlite3.c	/^typedef struct TermOffsetCtx TermOffsetCtx;$/;"	t	typeref:struct:TermOffsetCtx	file:
TermSelect	testdocs/sqlite3.c	/^struct TermSelect {$/;"	s	file:
TermSelect	testdocs/sqlite3.c	/^typedef struct TermSelect TermSelect;$/;"	t	typeref:struct:TermSelect	file:
TestBuf	testbuf.c	/^static Buf TestBuf;$/;"	v	file:
Token	testdocs/sqlite3.c	/^struct Token {$/;"	s	file:
Token	testdocs/sqlite3.c	/^typedef struct Token Token;$/;"	t	typeref:struct:Token	file:
TokenCtx	testdocs/sqlite3.c	/^struct TokenCtx {$/;"	s	file:
TokenCtx	testdocs/sqlite3.c	/^typedef struct TokenCtx TokenCtx;$/;"	t	typeref:struct:TokenCtx	file:
TokenDoclist	testdocs/sqlite3.c	/^struct TokenDoclist {$/;"	s	file:
TokenDoclist	testdocs/sqlite3.c	/^typedef struct TokenDoclist TokenDoclist;$/;"	t	typeref:struct:TokenDoclist	file:
Total	atf.h	/^static unsigned int Total = 0;$/;"	v
TreeView	testdocs/sqlite3.c	/^struct TreeView {$/;"	s	file:
TreeView	testdocs/sqlite3.c	/^typedef struct TreeView TreeView;$/;"	t	typeref:struct:TreeView	file:
TrigEvent	testdocs/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	s	file:
Trigger	testdocs/sqlite3.c	/^struct Trigger {$/;"	s	file:
Trigger	testdocs/sqlite3.c	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger	file:
TriggerPrg	testdocs/sqlite3.c	/^struct TriggerPrg {$/;"	s	file:
TriggerPrg	testdocs/sqlite3.c	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg	file:
TriggerStep	testdocs/sqlite3.c	/^struct TriggerStep {$/;"	s	file:
TriggerStep	testdocs/sqlite3.c	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep	file:
UAUTH_Admin	testdocs/sqlite3.c	/^#define UAUTH_Admin /;"	d	file:
UAUTH_Fail	testdocs/sqlite3.c	/^#define UAUTH_Fail /;"	d	file:
UAUTH_Unknown	testdocs/sqlite3.c	/^#define UAUTH_Unknown /;"	d	file:
UAUTH_User	testdocs/sqlite3.c	/^#define UAUTH_User /;"	d	file:
UINT16_TYPE	testdocs/sqlite3.c	/^#  define UINT16_TYPE /;"	d	file:
UINT32_TYPE	testdocs/sqlite3.c	/^#  define UINT32_TYPE /;"	d	file:
UINT8_TYPE	testdocs/sqlite3.c	/^#  define UINT8_TYPE /;"	d	file:
UNICODE_STRING_MAX_CHARS	testdocs/sqlite3.c	/^#  define UNICODE_STRING_MAX_CHARS /;"	d	file:
UNIXFILE_DELETE	testdocs/sqlite3.c	/^#define UNIXFILE_DELETE /;"	d	file:
UNIXFILE_DIRSYNC	testdocs/sqlite3.c	/^# define UNIXFILE_DIRSYNC /;"	d	file:
UNIXFILE_EXCL	testdocs/sqlite3.c	/^#define UNIXFILE_EXCL /;"	d	file:
UNIXFILE_NOLOCK	testdocs/sqlite3.c	/^#define UNIXFILE_NOLOCK /;"	d	file:
UNIXFILE_PERSIST_WAL	testdocs/sqlite3.c	/^#define UNIXFILE_PERSIST_WAL /;"	d	file:
UNIXFILE_PSOW	testdocs/sqlite3.c	/^#define UNIXFILE_PSOW /;"	d	file:
UNIXFILE_RDONLY	testdocs/sqlite3.c	/^#define UNIXFILE_RDONLY /;"	d	file:
UNIXFILE_URI	testdocs/sqlite3.c	/^#define UNIXFILE_URI /;"	d	file:
UNIXVFS	testdocs/sqlite3.c	/^  #define UNIXVFS(/;"	d	file:
UNIX_SHM_BASE	testdocs/sqlite3.c	/^#define UNIX_SHM_BASE /;"	d	file:
UNIX_SHM_DMS	testdocs/sqlite3.c	/^#define UNIX_SHM_DMS /;"	d	file:
UNKNOWN_LOCK	testdocs/sqlite3.c	/^#define UNKNOWN_LOCK /;"	d	file:
UNUSED_PARAM	testdocs/sqlite3.c	/^# define UNUSED_PARAM(/;"	d	file:
UNUSED_PARAM2	testdocs/sqlite3.c	/^# define UNUSED_PARAM2(/;"	d	file:
UNUSED_PARAMETER	testdocs/sqlite3.c	/^# define UNUSED_PARAMETER(/;"	d	file:
UNUSED_PARAMETER	testdocs/sqlite3.c	/^#define UNUSED_PARAMETER(/;"	d	file:
UNUSED_PARAMETER2	testdocs/sqlite3.c	/^#define UNUSED_PARAMETER2(/;"	d	file:
UNUSED_VARIABLE_VALUE	testdocs/sqlite3.c	/^#  define UNUSED_VARIABLE_VALUE(/;"	d	file:
UP	edit.h	/^    UP    = -1,$/;"	e	enum:__anon7
UPDATE_MAX_BLOBSIZE	testdocs/sqlite3.c	/^# define UPDATE_MAX_BLOBSIZE(/;"	d	file:
USEFETCH	testdocs/sqlite3.c	/^# define USEFETCH(/;"	d	file:
USE_PREAD	testdocs/sqlite3.c	/^# define USE_PREAD /;"	d	file:
USE_PREAD	testdocs/sqlite3.c	/^# undef USE_PREAD$/;"	d	file:
USE_PREAD64	testdocs/sqlite3.c	/^# define USE_PREAD64 /;"	d	file:
USE_PREAD64	testdocs/sqlite3.c	/^# undef USE_PREAD64$/;"	d	file:
UTF8_SeqBits	buf.c	/^const uint8_t UTF8_SeqBits[] = { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };$/;"	v
UTF8_SeqLens	buf.c	/^const uint8_t UTF8_SeqLens[] = { 0x01, 0x00, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00 };$/;"	v
UTF8_SeqMask	buf.c	/^const uint8_t UTF8_SeqMask[] = { 0x00, 0xFF, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00 };$/;"	v
UTF_MAX	utf.h	/^    UTF_MAX   = 6u,       \/* maximum number of bytes that make up a rune *\/$/;"	e	enum:__anon40
Unicode61Tokenizer	testdocs/sqlite3.c	/^struct Unicode61Tokenizer {$/;"	s	file:
Unicode61Tokenizer	testdocs/sqlite3.c	/^typedef struct Unicode61Tokenizer Unicode61Tokenizer;$/;"	t	typeref:struct:Unicode61Tokenizer	file:
UnixUnusedFd	testdocs/sqlite3.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	testdocs/sqlite3.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	typeref:struct:UnixUnusedFd	file:
UnpackedRecord	testdocs/sqlite3.c	/^struct UnpackedRecord {$/;"	s	file:
UnpackedRecord	testdocs/sqlite3.c	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord	file:
UpperToLower	testdocs/sqlite3.c	/^#define UpperToLower /;"	d	file:
Utf8Read	testdocs/sqlite3.c	/^# define Utf8Read(/;"	d	file:
VDBE_DISPLAY_P4	testdocs/sqlite3.c	/^# define VDBE_DISPLAY_P4 /;"	d	file:
VDBE_MAGIC_DEAD	testdocs/sqlite3.c	/^#define VDBE_MAGIC_DEAD /;"	d	file:
VDBE_MAGIC_HALT	testdocs/sqlite3.c	/^#define VDBE_MAGIC_HALT /;"	d	file:
VDBE_MAGIC_INIT	testdocs/sqlite3.c	/^#define VDBE_MAGIC_INIT /;"	d	file:
VDBE_MAGIC_RESET	testdocs/sqlite3.c	/^#define VDBE_MAGIC_RESET /;"	d	file:
VDBE_MAGIC_RUN	testdocs/sqlite3.c	/^#define VDBE_MAGIC_RUN /;"	d	file:
VDBE_OFFSET_LINENO	testdocs/sqlite3.c	/^# define VDBE_OFFSET_LINENO(/;"	d	file:
VERSION	testdocs/waf	/^VERSION="1.9.1"$/;"	v
VFUNCTION	testdocs/sqlite3.c	/^#define VFUNCTION(/;"	d	file:
VList	testdocs/sqlite3.c	/^typedef int VList;$/;"	t	file:
VTAB_SCHEMA	testdocs/sqlite3.c	/^#define VTAB_SCHEMA /;"	d	file:
VTable	testdocs/sqlite3.c	/^struct VTable {$/;"	s	file:
VTable	testdocs/sqlite3.c	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable	file:
VVA_ONLY	testdocs/sqlite3.c	/^# define VVA_ONLY(/;"	d	file:
ValueNewStat4Ctx	testdocs/sqlite3.c	/^struct ValueNewStat4Ctx {$/;"	s	file:
Vdbe	testdocs/sqlite3.c	/^struct Vdbe {$/;"	s	file:
Vdbe	testdocs/sqlite3.c	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe	file:
VdbeBranchTaken	testdocs/sqlite3.c	/^# define VdbeBranchTaken(/;"	d	file:
VdbeComment	testdocs/sqlite3.c	/^# define VdbeComment(/;"	d	file:
VdbeCoverage	testdocs/sqlite3.c	/^# define VdbeCoverage(/;"	d	file:
VdbeCoverageAlwaysTaken	testdocs/sqlite3.c	/^# define VdbeCoverageAlwaysTaken(/;"	d	file:
VdbeCoverageIf	testdocs/sqlite3.c	/^# define VdbeCoverageIf(/;"	d	file:
VdbeCoverageNeverTaken	testdocs/sqlite3.c	/^# define VdbeCoverageNeverTaken(/;"	d	file:
VdbeCursor	testdocs/sqlite3.c	/^struct VdbeCursor {$/;"	s	file:
VdbeCursor	testdocs/sqlite3.c	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor	file:
VdbeFrame	testdocs/sqlite3.c	/^struct VdbeFrame {$/;"	s	file:
VdbeFrame	testdocs/sqlite3.c	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame	file:
VdbeFrameMem	testdocs/sqlite3.c	/^#define VdbeFrameMem(/;"	d	file:
VdbeMemDynamic	testdocs/sqlite3.c	/^#define VdbeMemDynamic(/;"	d	file:
VdbeModuleComment	testdocs/sqlite3.c	/^#   define VdbeModuleComment(/;"	d	file:
VdbeModuleComment	testdocs/sqlite3.c	/^# define VdbeModuleComment(/;"	d	file:
VdbeNoopComment	testdocs/sqlite3.c	/^# define VdbeNoopComment(/;"	d	file:
VdbeOp	testdocs/sqlite3.c	/^struct VdbeOp {$/;"	s	file:
VdbeOp	testdocs/sqlite3.c	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp	file:
VdbeOpIter	testdocs/sqlite3.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	testdocs/sqlite3.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	typeref:struct:VdbeOpIter	file:
VdbeOpList	testdocs/sqlite3.c	/^struct VdbeOpList {$/;"	s	file:
VdbeOpList	testdocs/sqlite3.c	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList	file:
VdbeSorter	testdocs/sqlite3.c	/^struct VdbeSorter {$/;"	s	file:
VdbeSorter	testdocs/sqlite3.c	/^typedef struct VdbeSorter VdbeSorter;$/;"	t	typeref:struct:VdbeSorter	file:
VisibleRowid	testdocs/sqlite3.c	/^#define VisibleRowid(/;"	d	file:
VtabCtx	testdocs/sqlite3.c	/^struct VtabCtx {$/;"	s	file:
VtabCtx	testdocs/sqlite3.c	/^typedef struct VtabCtx VtabCtx;$/;"	t	typeref:struct:VtabCtx	file:
WAF	testdocs/waf	/^WAF='waf'$/;"	v
WALINDEX_HDR_SIZE	testdocs/sqlite3.c	/^#define WALINDEX_HDR_SIZE /;"	d	file:
WALINDEX_LOCK_OFFSET	testdocs/sqlite3.c	/^#define WALINDEX_LOCK_OFFSET /;"	d	file:
WALINDEX_MAX_VERSION	testdocs/sqlite3.c	/^#define WALINDEX_MAX_VERSION /;"	d	file:
WALINDEX_PGSZ	testdocs/sqlite3.c	/^#define WALINDEX_PGSZ /;"	d	file:
WALTRACE	testdocs/sqlite3.c	/^# define WALTRACE(/;"	d	file:
WAL_ALL_BUT_WRITE	testdocs/sqlite3.c	/^#define WAL_ALL_BUT_WRITE /;"	d	file:
WAL_CKPT_LOCK	testdocs/sqlite3.c	/^#define WAL_CKPT_LOCK /;"	d	file:
WAL_EXCLUSIVE_MODE	testdocs/sqlite3.c	/^#define WAL_EXCLUSIVE_MODE /;"	d	file:
WAL_FRAME_HDRSIZE	testdocs/sqlite3.c	/^#define WAL_FRAME_HDRSIZE /;"	d	file:
WAL_HDRSIZE	testdocs/sqlite3.c	/^#define WAL_HDRSIZE /;"	d	file:
WAL_HEAPMEMORY_MODE	testdocs/sqlite3.c	/^#define WAL_HEAPMEMORY_MODE /;"	d	file:
WAL_LOCK_CKPT	testdocs/sqlite3.c	/^#define WAL_LOCK_CKPT /;"	d	file:
WAL_LOCK_READ0	testdocs/sqlite3.c	/^#define WAL_LOCK_READ0 /;"	d	file:
WAL_LOCK_WRITE	testdocs/sqlite3.c	/^#define WAL_LOCK_WRITE /;"	d	file:
WAL_MAGIC	testdocs/sqlite3.c	/^#define WAL_MAGIC /;"	d	file:
WAL_MAX_VERSION	testdocs/sqlite3.c	/^#define WAL_MAX_VERSION /;"	d	file:
WAL_NORMAL_MODE	testdocs/sqlite3.c	/^#define WAL_NORMAL_MODE /;"	d	file:
WAL_NREADER	testdocs/sqlite3.c	/^#define WAL_NREADER /;"	d	file:
WAL_RDONLY	testdocs/sqlite3.c	/^#define WAL_RDONLY /;"	d	file:
WAL_RDWR	testdocs/sqlite3.c	/^#define WAL_RDWR /;"	d	file:
WAL_READ_LOCK	testdocs/sqlite3.c	/^#define WAL_READ_LOCK(/;"	d	file:
WAL_RECOVER_LOCK	testdocs/sqlite3.c	/^#define WAL_RECOVER_LOCK /;"	d	file:
WAL_RETRY	testdocs/sqlite3.c	/^#define WAL_RETRY /;"	d	file:
WAL_SAVEPOINT_NDATA	testdocs/sqlite3.c	/^#define WAL_SAVEPOINT_NDATA /;"	d	file:
WAL_SHM_RDONLY	testdocs/sqlite3.c	/^#define WAL_SHM_RDONLY /;"	d	file:
WAL_SYNC_TRANSACTIONS	testdocs/sqlite3.c	/^#define WAL_SYNC_TRANSACTIONS /;"	d	file:
WAL_WRITE_LOCK	testdocs/sqlite3.c	/^#define WAL_WRITE_LOCK /;"	d	file:
WHERETRACE	testdocs/sqlite3.c	/^# define WHERETRACE(/;"	d	file:
WHERETRACE_ENABLED	testdocs/sqlite3.c	/^# define WHERETRACE_ENABLED /;"	d	file:
WHERE_AUTO_INDEX	testdocs/sqlite3.c	/^#define WHERE_AUTO_INDEX /;"	d	file:
WHERE_BOTH_LIMIT	testdocs/sqlite3.c	/^#define WHERE_BOTH_LIMIT /;"	d	file:
WHERE_BTM_LIMIT	testdocs/sqlite3.c	/^#define WHERE_BTM_LIMIT /;"	d	file:
WHERE_COLUMN_EQ	testdocs/sqlite3.c	/^#define WHERE_COLUMN_EQ /;"	d	file:
WHERE_COLUMN_IN	testdocs/sqlite3.c	/^#define WHERE_COLUMN_IN /;"	d	file:
WHERE_COLUMN_NULL	testdocs/sqlite3.c	/^#define WHERE_COLUMN_NULL /;"	d	file:
WHERE_COLUMN_RANGE	testdocs/sqlite3.c	/^#define WHERE_COLUMN_RANGE /;"	d	file:
WHERE_CONSTRAINT	testdocs/sqlite3.c	/^#define WHERE_CONSTRAINT /;"	d	file:
WHERE_DISTINCTBY	testdocs/sqlite3.c	/^#define WHERE_DISTINCTBY /;"	d	file:
WHERE_DISTINCT_NOOP	testdocs/sqlite3.c	/^#define WHERE_DISTINCT_NOOP /;"	d	file:
WHERE_DISTINCT_ORDERED	testdocs/sqlite3.c	/^#define WHERE_DISTINCT_ORDERED /;"	d	file:
WHERE_DISTINCT_UNIQUE	testdocs/sqlite3.c	/^#define WHERE_DISTINCT_UNIQUE /;"	d	file:
WHERE_DISTINCT_UNORDERED	testdocs/sqlite3.c	/^#define WHERE_DISTINCT_UNORDERED /;"	d	file:
WHERE_DUPLICATES_OK	testdocs/sqlite3.c	/^#define WHERE_DUPLICATES_OK /;"	d	file:
WHERE_GROUPBY	testdocs/sqlite3.c	/^#define WHERE_GROUPBY /;"	d	file:
WHERE_IDX_ONLY	testdocs/sqlite3.c	/^#define WHERE_IDX_ONLY /;"	d	file:
WHERE_INDEXED	testdocs/sqlite3.c	/^#define WHERE_INDEXED /;"	d	file:
WHERE_IN_ABLE	testdocs/sqlite3.c	/^#define WHERE_IN_ABLE /;"	d	file:
WHERE_IPK	testdocs/sqlite3.c	/^#define WHERE_IPK /;"	d	file:
WHERE_LOOP_XFER_SZ	testdocs/sqlite3.c	/^# define WHERE_LOOP_XFER_SZ /;"	d	file:
WHERE_MULTI_OR	testdocs/sqlite3.c	/^#define WHERE_MULTI_OR /;"	d	file:
WHERE_ONEPASS_DESIRED	testdocs/sqlite3.c	/^#define WHERE_ONEPASS_DESIRED /;"	d	file:
WHERE_ONEPASS_MULTIROW	testdocs/sqlite3.c	/^#define WHERE_ONEPASS_MULTIROW /;"	d	file:
WHERE_ONEROW	testdocs/sqlite3.c	/^#define WHERE_ONEROW /;"	d	file:
WHERE_ORDERBY_LIMIT	testdocs/sqlite3.c	/^#define WHERE_ORDERBY_LIMIT /;"	d	file:
WHERE_ORDERBY_MAX	testdocs/sqlite3.c	/^#define WHERE_ORDERBY_MAX /;"	d	file:
WHERE_ORDERBY_MIN	testdocs/sqlite3.c	/^#define WHERE_ORDERBY_MIN /;"	d	file:
WHERE_ORDERBY_NORMAL	testdocs/sqlite3.c	/^#define WHERE_ORDERBY_NORMAL /;"	d	file:
WHERE_OR_SUBCLAUSE	testdocs/sqlite3.c	/^#define WHERE_OR_SUBCLAUSE /;"	d	file:
WHERE_PARTIALIDX	testdocs/sqlite3.c	/^#define WHERE_PARTIALIDX /;"	d	file:
WHERE_SEEK_TABLE	testdocs/sqlite3.c	/^#define WHERE_SEEK_TABLE /;"	d	file:
WHERE_SEEK_UNIQ_TABLE	testdocs/sqlite3.c	/^#define WHERE_SEEK_UNIQ_TABLE /;"	d	file:
WHERE_SKIPSCAN	testdocs/sqlite3.c	/^#define WHERE_SKIPSCAN /;"	d	file:
WHERE_SORTBYGROUP	testdocs/sqlite3.c	/^#define WHERE_SORTBYGROUP /;"	d	file:
WHERE_TOP_LIMIT	testdocs/sqlite3.c	/^#define WHERE_TOP_LIMIT /;"	d	file:
WHERE_UNQ_WANTED	testdocs/sqlite3.c	/^#define WHERE_UNQ_WANTED /;"	d	file:
WHERE_USE_LIMIT	testdocs/sqlite3.c	/^#define WHERE_USE_LIMIT /;"	d	file:
WHERE_VIRTUALTABLE	testdocs/sqlite3.c	/^#define WHERE_VIRTUALTABLE /;"	d	file:
WHERE_WANT_DISTINCT	testdocs/sqlite3.c	/^#define WHERE_WANT_DISTINCT /;"	d	file:
WINCE_DELETION_ATTEMPTS	testdocs/sqlite3.c	/^#define WINCE_DELETION_ATTEMPTS /;"	d	file:
WINFILE_PERSIST_WAL	testdocs/sqlite3.c	/^#define WINFILE_PERSIST_WAL /;"	d	file:
WINFILE_PSOW	testdocs/sqlite3.c	/^#define WINFILE_PSOW /;"	d	file:
WINFILE_RDONLY	testdocs/sqlite3.c	/^#define WINFILE_RDONLY /;"	d	file:
WINMEM_MAGIC1	testdocs/sqlite3.c	/^#define WINMEM_MAGIC1 /;"	d	file:
WINMEM_MAGIC2	testdocs/sqlite3.c	/^#define WINMEM_MAGIC2 /;"	d	file:
WINSHM_RDLCK	testdocs/sqlite3.c	/^#define WINSHM_RDLCK /;"	d	file:
WINSHM_UNLCK	testdocs/sqlite3.c	/^#define WINSHM_UNLCK /;"	d	file:
WINSHM_WRLCK	testdocs/sqlite3.c	/^#define WINSHM_WRLCK /;"	d	file:
WIN_SHM_BASE	testdocs/sqlite3.c	/^#define WIN_SHM_BASE /;"	d	file:
WIN_SHM_DMS	testdocs/sqlite3.c	/^#define WIN_SHM_DMS /;"	d	file:
WO_ALL	testdocs/sqlite3.c	/^#define WO_ALL /;"	d	file:
WO_AND	testdocs/sqlite3.c	/^#define WO_AND /;"	d	file:
WO_EQ	testdocs/sqlite3.c	/^#define WO_EQ /;"	d	file:
WO_EQUIV	testdocs/sqlite3.c	/^#define WO_EQUIV /;"	d	file:
WO_GE	testdocs/sqlite3.c	/^#define WO_GE /;"	d	file:
WO_GT	testdocs/sqlite3.c	/^#define WO_GT /;"	d	file:
WO_IN	testdocs/sqlite3.c	/^#define WO_IN /;"	d	file:
WO_IS	testdocs/sqlite3.c	/^#define WO_IS /;"	d	file:
WO_ISNULL	testdocs/sqlite3.c	/^#define WO_ISNULL /;"	d	file:
WO_LE	testdocs/sqlite3.c	/^#define WO_LE /;"	d	file:
WO_LT	testdocs/sqlite3.c	/^#define WO_LT /;"	d	file:
WO_MATCH	testdocs/sqlite3.c	/^#define WO_MATCH /;"	d	file:
WO_NOOP	testdocs/sqlite3.c	/^#define WO_NOOP /;"	d	file:
WO_OR	testdocs/sqlite3.c	/^#define WO_OR /;"	d	file:
WO_SINGLE	testdocs/sqlite3.c	/^#define WO_SINGLE /;"	d	file:
WRC_Abort	testdocs/sqlite3.c	/^#define WRC_Abort /;"	d	file:
WRC_Continue	testdocs/sqlite3.c	/^#define WRC_Continue /;"	d	file:
WRC_Prune	testdocs/sqlite3.c	/^#define WRC_Prune /;"	d	file:
WRITE_LOCK	testdocs/sqlite3.c	/^#define WRITE_LOCK /;"	d	file:
WRITE_UTF16BE	testdocs/sqlite3.c	/^#define WRITE_UTF16BE(/;"	d	file:
WRITE_UTF16LE	testdocs/sqlite3.c	/^#define WRITE_UTF16LE(/;"	d	file:
WRITE_UTF8	testdocs/sqlite3.c	/^#define WRITE_UTF8(/;"	d	file:
Wal	testdocs/sqlite3.c	/^struct Wal {$/;"	s	file:
Wal	testdocs/sqlite3.c	/^typedef struct Wal Wal;$/;"	t	typeref:struct:Wal	file:
WalCkptInfo	testdocs/sqlite3.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	testdocs/sqlite3.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	typeref:struct:WalCkptInfo	file:
WalIndexHdr	testdocs/sqlite3.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	testdocs/sqlite3.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	typeref:struct:WalIndexHdr	file:
WalIterator	testdocs/sqlite3.c	/^struct WalIterator {$/;"	s	file:
WalIterator	testdocs/sqlite3.c	/^typedef struct WalIterator WalIterator;$/;"	t	typeref:struct:WalIterator	file:
WalSegment	testdocs/sqlite3.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:
WalWriter	testdocs/sqlite3.c	/^typedef struct WalWriter {$/;"	s	file:
WalWriter	testdocs/sqlite3.c	/^} WalWriter;$/;"	t	typeref:struct:WalWriter	file:
Walker	testdocs/sqlite3.c	/^struct Walker {$/;"	s	file:
Walker	testdocs/sqlite3.c	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker	file:
WhereAndInfo	testdocs/sqlite3.c	/^struct WhereAndInfo {$/;"	s	file:
WhereAndInfo	testdocs/sqlite3.c	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	typeref:struct:WhereAndInfo	file:
WhereClause	testdocs/sqlite3.c	/^struct WhereClause {$/;"	s	file:
WhereClause	testdocs/sqlite3.c	/^typedef struct WhereClause WhereClause;$/;"	t	typeref:struct:WhereClause	file:
WhereInfo	testdocs/sqlite3.c	/^struct WhereInfo {$/;"	s	file:
WhereInfo	testdocs/sqlite3.c	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo	file:
WhereLevel	testdocs/sqlite3.c	/^struct WhereLevel {$/;"	s	file:
WhereLevel	testdocs/sqlite3.c	/^typedef struct WhereLevel WhereLevel;$/;"	t	typeref:struct:WhereLevel	file:
WhereLoop	testdocs/sqlite3.c	/^struct WhereLoop {$/;"	s	file:
WhereLoop	testdocs/sqlite3.c	/^typedef struct WhereLoop WhereLoop;$/;"	t	typeref:struct:WhereLoop	file:
WhereLoopBuilder	testdocs/sqlite3.c	/^struct WhereLoopBuilder {$/;"	s	file:
WhereLoopBuilder	testdocs/sqlite3.c	/^typedef struct WhereLoopBuilder WhereLoopBuilder;$/;"	t	typeref:struct:WhereLoopBuilder	file:
WhereMaskSet	testdocs/sqlite3.c	/^struct WhereMaskSet {$/;"	s	file:
WhereMaskSet	testdocs/sqlite3.c	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	typeref:struct:WhereMaskSet	file:
WhereOrCost	testdocs/sqlite3.c	/^struct WhereOrCost {$/;"	s	file:
WhereOrCost	testdocs/sqlite3.c	/^typedef struct WhereOrCost WhereOrCost;$/;"	t	typeref:struct:WhereOrCost	file:
WhereOrInfo	testdocs/sqlite3.c	/^struct WhereOrInfo {$/;"	s	file:
WhereOrInfo	testdocs/sqlite3.c	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	typeref:struct:WhereOrInfo	file:
WhereOrSet	testdocs/sqlite3.c	/^struct WhereOrSet {$/;"	s	file:
WhereOrSet	testdocs/sqlite3.c	/^typedef struct WhereOrSet WhereOrSet;$/;"	t	typeref:struct:WhereOrSet	file:
WherePath	testdocs/sqlite3.c	/^struct WherePath {$/;"	s	file:
WherePath	testdocs/sqlite3.c	/^typedef struct WherePath WherePath;$/;"	t	typeref:struct:WherePath	file:
WhereScan	testdocs/sqlite3.c	/^struct WhereScan {$/;"	s	file:
WhereScan	testdocs/sqlite3.c	/^typedef struct WhereScan WhereScan;$/;"	t	typeref:struct:WhereScan	file:
WhereTerm	testdocs/sqlite3.c	/^struct WhereTerm {$/;"	s	file:
WhereTerm	testdocs/sqlite3.c	/^typedef struct WhereTerm WhereTerm;$/;"	t	typeref:struct:WhereTerm	file:
With	testdocs/sqlite3.c	/^struct With {$/;"	s	file:
With	testdocs/sqlite3.c	/^typedef struct With With;$/;"	t	typeref:struct:With	file:
XN_EXPR	testdocs/sqlite3.c	/^#define XN_EXPR /;"	d	file:
XN_ROWID	testdocs/sqlite3.c	/^#define XN_ROWID /;"	d	file:
Y	testdocs/sqlite3.c	/^  int Y, M, D;        \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
YYACTIONTYPE	testdocs/sqlite3.c	/^#define YYACTIONTYPE /;"	d	file:
YYCODETYPE	testdocs/sqlite3.c	/^#define YYCODETYPE /;"	d	file:
YYFALLBACK	testdocs/sqlite3.c	/^#define YYFALLBACK /;"	d	file:
YYMALLOCARGTYPE	testdocs/sqlite3.c	/^# define YYMALLOCARGTYPE /;"	d	file:
YYMALLOCARGTYPE	testdocs/sqlite3.c	/^#define YYMALLOCARGTYPE /;"	d	file:
YYMINORTYPE	testdocs/sqlite3.c	/^} YYMINORTYPE;$/;"	t	typeref:union:__anon33	file:
YYNOCODE	testdocs/sqlite3.c	/^#define YYNOCODE /;"	d	file:
YYNOERRORRECOVERY	testdocs/sqlite3.c	/^#define YYNOERRORRECOVERY /;"	d	file:
YYNRULE	testdocs/sqlite3.c	/^#define YYNRULE /;"	d	file:
YYNSTATE	testdocs/sqlite3.c	/^#define YYNSTATE /;"	d	file:
YYPARSEFREENEVERNULL	testdocs/sqlite3.c	/^#define YYPARSEFREENEVERNULL /;"	d	file:
YYSTACKDEPTH	testdocs/sqlite3.c	/^#define YYSTACKDEPTH /;"	d	file:
YYWILDCARD	testdocs/sqlite3.c	/^#define YYWILDCARD /;"	d	file:
YY_ACCEPT_ACTION	testdocs/sqlite3.c	/^#define YY_ACCEPT_ACTION /;"	d	file:
YY_ACTTAB_COUNT	testdocs/sqlite3.c	/^#define YY_ACTTAB_COUNT /;"	d	file:
YY_ERROR_ACTION	testdocs/sqlite3.c	/^#define YY_ERROR_ACTION /;"	d	file:
YY_MAX_REDUCE	testdocs/sqlite3.c	/^#define YY_MAX_REDUCE /;"	d	file:
YY_MAX_SHIFT	testdocs/sqlite3.c	/^#define YY_MAX_SHIFT /;"	d	file:
YY_MAX_SHIFTREDUCE	testdocs/sqlite3.c	/^#define YY_MAX_SHIFTREDUCE /;"	d	file:
YY_MIN_REDUCE	testdocs/sqlite3.c	/^#define YY_MIN_REDUCE /;"	d	file:
YY_MIN_SHIFTREDUCE	testdocs/sqlite3.c	/^#define YY_MIN_SHIFTREDUCE /;"	d	file:
YY_NO_ACTION	testdocs/sqlite3.c	/^#define YY_NO_ACTION /;"	d	file:
YY_REDUCE_COUNT	testdocs/sqlite3.c	/^#define YY_REDUCE_COUNT /;"	d	file:
YY_REDUCE_MAX	testdocs/sqlite3.c	/^#define YY_REDUCE_MAX /;"	d	file:
YY_REDUCE_MIN	testdocs/sqlite3.c	/^#define YY_REDUCE_MIN /;"	d	file:
YY_REDUCE_USE_DFLT	testdocs/sqlite3.c	/^#define YY_REDUCE_USE_DFLT /;"	d	file:
YY_SHIFT_COUNT	testdocs/sqlite3.c	/^#define YY_SHIFT_COUNT /;"	d	file:
YY_SHIFT_MAX	testdocs/sqlite3.c	/^#define YY_SHIFT_MAX /;"	d	file:
YY_SHIFT_MIN	testdocs/sqlite3.c	/^#define YY_SHIFT_MIN /;"	d	file:
YY_SHIFT_USE_DFLT	testdocs/sqlite3.c	/^#define YY_SHIFT_USE_DFLT /;"	d	file:
_BSD_SOURCE	testdocs/sqlite3.c	/^# define _BSD_SOURCE$/;"	d	file:
_CRT_RAND_S	testdocs/sqlite3.c	/^#  define _CRT_RAND_S$/;"	d	file:
_FILE_OFFSET_BITS	testdocs/sqlite3.c	/^#   define _FILE_OFFSET_BITS /;"	d	file:
_FTS3_HASH_H_	testdocs/sqlite3.c	/^#define _FTS3_HASH_H_$/;"	d	file:
_FTS3_TOKENIZER_H_	testdocs/sqlite3.c	/^#define _FTS3_TOKENIZER_H_$/;"	d	file:
_FTS5INT_H	testdocs/sqlite3.c	/^#define _FTS5INT_H$/;"	d	file:
_FTS5_H	testdocs/sqlite3.c	/^#define _FTS5_H$/;"	d	file:
_FTSINT_H	testdocs/sqlite3.c	/^#define _FTSINT_H$/;"	d	file:
_GNU_SOURCE	testdocs/sqlite3.c	/^# define _GNU_SOURCE$/;"	d	file:
_LARGEFILE_SOURCE	testdocs/sqlite3.c	/^# define _LARGEFILE_SOURCE /;"	d	file:
_LARGE_FILE	testdocs/sqlite3.c	/^# define _LARGE_FILE /;"	d	file:
_OS_COMMON_H_	testdocs/sqlite3.c	/^#define _OS_COMMON_H_$/;"	d	file:
_POSIX_C_SOURCE	buf.c	/^#define _POSIX_C_SOURCE /;"	d	file:
_SQLITE3RBU_H	testdocs/sqlite3.c	/^#define _SQLITE3RBU_H$/;"	d	file:
_SQLITE3RTREE_H_	testdocs/sqlite3.c	/^#define _SQLITE3RTREE_H_$/;"	d	file:
_SQLITE_OS_H_	testdocs/sqlite3.c	/^#define _SQLITE_OS_H_$/;"	d	file:
_USE_32BIT_TIME_T	testdocs/sqlite3.c	/^# define _USE_32BIT_TIME_T$/;"	d	file:
_XOPEN_SOURCE	testdocs/sqlite3.c	/^#  define _XOPEN_SOURCE /;"	d	file:
__SQLITESESSION_H_	testdocs/sqlite3.c	/^#define __SQLITESESSION_H_ /;"	d	file:
__declspec	testdocs/sqlite3.c	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
__declspec	testdocs/sqlite3.c	/^__declspec(dllexport)$/;"	f
_fts3ht	testdocs/sqlite3.c	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash	file:
_getopt_	stdc.h	/^static inline char* _getopt_(int* p_argc, char*** p_argv) {$/;"	f
_ht	testdocs/sqlite3.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:
_sqliteZone_	testdocs/sqlite3.c	/^static malloc_zone_t* _sqliteZone_;$/;"	v	file:
a	testdocs/sqlite3.c	/^  FuncDef *a[SQLITE_FUNC_HASH_SZ];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	file:
a	testdocs/sqlite3.c	/^  Stat4Sample *a;           \/* Array of mxSample Stat4Sample objects *\/$/;"	m	struct:Stat4Accum	file:
a	testdocs/sqlite3.c	/^  WhereLevel a[1];          \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo	file:
a	testdocs/sqlite3.c	/^  WhereOrCost a[N_OR_COST];   \/* Set of best costs *\/$/;"	m	struct:WhereOrSet	file:
a	testdocs/sqlite3.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:
a	testdocs/sqlite3.c	/^  char *a;                        \/* Pointer to allocation *\/$/;"	m	struct:Blob	file:
a	testdocs/sqlite3.c	/^  const u8 *a;                    \/* Buffer containing position list *\/$/;"	m	struct:Fts5LookaheadReader	file:
a	testdocs/sqlite3.c	/^  const u8 *a;                    \/* Position list to iterate through *\/$/;"	m	struct:Fts5PoslistReader	file:
a	testdocs/sqlite3.c	/^  const unsigned char *a;$/;"	m	struct:Fts5PhraseIter	file:
a	testdocs/sqlite3.c	/^  unsigned char *a;   \/* Gather entropy into this buffer *\/$/;"	m	struct:EntropyGatherer	file:
a	testdocs/sqlite3.c	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item	file:
a	testdocs/sqlite3.c	/^  } a[1];                  \/* One slot for each expression in the list *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item	file:
a	testdocs/sqlite3.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item	file:
a	testdocs/sqlite3.c	/^  } a[1];$/;"	m	struct:With	typeref:struct:With::Cte	file:
a	testdocs/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
aAction	testdocs/sqlite3.c	/^  u8 aAction[2];        \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	file:
aAll	testdocs/sqlite3.c	/^  char *aAll;                    \/* Array containing doclist (or NULL) *\/$/;"	m	struct:Fts3Doclist	file:
aAlloc	testdocs/sqlite3.c	/^  u8 *aAlloc;                 \/* Space for aKey if aBuffer and pMap wont work *\/$/;"	m	struct:PmaReader	file:
aAltMap	testdocs/sqlite3.c	/^  int *aAltMap;           \/* Mapping from table to index column numbers *\/$/;"	m	struct:VdbeCursor	file:
aAsciiTokenChar	testdocs/sqlite3.c	/^static unsigned char aAsciiTokenChar[128] = {$/;"	v	file:
aAvgEq	testdocs/sqlite3.c	/^  tRowcnt *aAvgEq;         \/* Average nEq values for keys not in aSample *\/$/;"	m	struct:Index	file:
aBest	testdocs/sqlite3.c	/^  Stat4Sample *aBest;       \/* Array of nCol best samples *\/$/;"	m	struct:Stat4Accum	file:
aBitmap	testdocs/sqlite3.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon24	file:
aBuf	testdocs/sqlite3.c	/^  char *aBuf;$/;"	m	struct:PorterContext	file:
aBuf	testdocs/sqlite3.c	/^  char aBuf[FTS5_PORTER_MAX_TOKEN + 64];$/;"	m	struct:PorterTokenizer	file:
aBuf	testdocs/sqlite3.c	/^  u8 *aBuf;                       \/* Pointer to changeset buffer *\/$/;"	m	struct:SessionBuffer	file:
aBuf	testdocs/sqlite3.c	/^  u8 *aBuf;$/;"	m	struct:sqlite3rbu	file:
aBuffer	testdocs/sqlite3.c	/^  char *aBuffer;                  \/* Buffer to merge doclists in *\/$/;"	m	struct:Fts3MultiSegReader	file:
aBuffer	testdocs/sqlite3.c	/^  u8 *aBuffer;                    \/* Pointer to write buffer *\/$/;"	m	struct:PmaWriter	file:
aBuffer	testdocs/sqlite3.c	/^  u8 *aBuffer;                \/* Current read buffer *\/$/;"	m	struct:PmaReader	file:
aCell	testdocs/sqlite3.c	/^  StatCell *aCell;                \/* Array of parsed cells *\/$/;"	m	struct:StatPage	file:
aCellIdx	testdocs/sqlite3.c	/^  u8 *aCellIdx;        \/* The cell index area *\/$/;"	m	struct:MemPage	file:
aChar	testdocs/sqlite3.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:
aCksum	testdocs/sqlite3.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:
aCnt	testdocs/sqlite3.c	/^  i64 *aCnt;$/;"	m	struct:Fts5VocabCursor	file:
aCol	testdocs/sqlite3.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	file:
aCol	testdocs/sqlite3.c	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col	file:
aCol	testdocs/sqlite3.c	/^  } aCol[1];            \/* One entry for each of nCol columns *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap	file:
aColCache	testdocs/sqlite3.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache	file:
aColExpr	testdocs/sqlite3.c	/^  ExprList *aColExpr;      \/* Column expressions *\/$/;"	m	struct:Index	file:
aColName	testdocs/sqlite3.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	file:
aColl	testdocs/sqlite3.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	file:
aCollSeq	testdocs/sqlite3.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	file:
aColmask	testdocs/sqlite3.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	file:
aColumnSize	testdocs/sqlite3.c	/^  int *aColumnSize;               \/* Values for xColumnSize() *\/$/;"	m	struct:Fts5Cursor	file:
aConstraint	testdocs/sqlite3.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:
aConstraint	testdocs/sqlite3.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	file:
aConstraintUsage	testdocs/sqlite3.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
aCoord	testdocs/sqlite3.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];  \/* Bounding box coordinates *\/$/;"	m	struct:RtreeCell	file:
aCoord	testdocs/sqlite3.c	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
aCounter	testdocs/sqlite3.c	/^  u32 aCounter[5];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	file:
aCtrl	testdocs/sqlite3.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:
aData	testdocs/sqlite3.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:
aData	testdocs/sqlite3.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:
aData	testdocs/sqlite3.c	/^  char *aData;$/;"	m	struct:PendingList	file:
aData	testdocs/sqlite3.c	/^  u8 *aData;                      \/* Pointer to buffer containing changeset *\/$/;"	m	struct:SessionInput	file:
aData	testdocs/sqlite3.c	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage	file:
aDataEnd	testdocs/sqlite3.c	/^  u8 *aDataEnd;        \/* One byte past the end of usable data *\/$/;"	m	struct:MemPage	file:
aDataOfst	testdocs/sqlite3.c	/^  u8 *aDataOfst;       \/* Same as aData for leaves.  aData+4 for interior *\/$/;"	m	struct:MemPage	file:
aDb	testdocs/sqlite3.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	file:
aDbStatic	testdocs/sqlite3.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	file:
aDigits	testdocs/sqlite3.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aDlidx	testdocs/sqlite3.c	/^  Fts5DlidxWriter *aDlidx;        \/* Array of Fts5DlidxWriter objects *\/$/;"	m	struct:Fts5SegWriter	file:
aDoc	testdocs/sqlite3.c	/^  i64 *aDoc;$/;"	m	struct:Fts5VocabCursor	file:
aDoclist	testdocs/sqlite3.c	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor	file:
aDoclist	testdocs/sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
aDoclist	testdocs/sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:
aDoclist	testdocs/sqlite3.c	/^  const char *aDoclist;           \/* Pointer to doclist *\/$/;"	m	struct:NodeReader	file:
aEntry	testdocs/sqlite3.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:
aEof	testdocs/sqlite3.c	/^  u8 *aEof;                       \/* Pointer to 1 byte past end of doclist *\/$/;"	m	struct:Fts5DoclistIter	file:
aExt	testdocs/sqlite3.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:
aExtension	testdocs/sqlite3.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	file:
aFile	testdocs/sqlite3.c	/^  SorterFile aFile[2];            \/* aFile[0] for reading, [1] for writing *\/$/;"	m	struct:IncrMerger	file:
aFirst	testdocs/sqlite3.c	/^  Fts5CResult *aFirst;            \/* Current merge state (see above) *\/$/;"	m	struct:Fts5Iter	file:
aFirst	testdocs/sqlite3.c	/^  int *aFirst;                    \/* Array of first token in each sentence *\/$/;"	m	struct:Fts5SFinder	file:
aFold	testdocs/sqlite3.c	/^  char *aFold;                    \/* Buffer to fold text into *\/$/;"	m	struct:Unicode61Tokenizer	file:
aFrame	testdocs/sqlite3.c	/^  RbuFrame *aFrame;$/;"	m	struct:sqlite3rbu	file:
aFrameCksum	testdocs/sqlite3.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:
aFreq	testdocs/sqlite3.c	/^  double *aFreq;                  \/* Array used to calculate phrase freq. *\/$/;"	m	struct:Fts5Bm25Data	file:
aFunc	testdocs/sqlite3.c	/^  Hash aFunc;                   \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	file:
aFunc	testdocs/sqlite3.c	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func	file:
aHardLimit	testdocs/sqlite3.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	testdocs/sqlite3.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon24	file:
aHash	testdocs/sqlite3.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/$/;"	m	struct:Rtree	file:
aIDF	testdocs/sqlite3.c	/^  double *aIDF;                   \/* IDF for each phrase *\/$/;"	m	struct:Fts5Bm25Data	file:
aIdx	testdocs/sqlite3.c	/^  int aIdx[1];                    \/* Offsets into aPoslist for current row *\/$/;"	m	struct:Fts5Sorter	file:
aInLoop	testdocs/sqlite3.c	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon27::__anon28	typeref:struct:WhereLevel::__anon27::__anon28::InLoop	file:
aIndex	testdocs/sqlite3.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:
aIndex	testdocs/sqlite3.c	/^  } *aIndex;$/;"	m	struct:Fts3Table	typeref:struct:Fts3Table::Fts3Index	file:
aInput	testdocs/sqlite3.c	/^  const unsigned char *aInput;    \/* Input text being tokenized *\/$/;"	m	struct:unicode_cursor	file:
aInst	testdocs/sqlite3.c	/^  int *aInst;                     \/* 3 integers per phrase instance *\/$/;"	m	struct:Fts5Cursor	file:
aInstIter	testdocs/sqlite3.c	/^  Fts5PoslistReader *aInstIter;   \/* One for each phrase *\/$/;"	m	struct:Fts5Cursor	file:
aJournalMagic	testdocs/sqlite3.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aKey	testdocs/sqlite3.c	/^  u8 *aKey;                   \/* Pointer to current key *\/$/;"	m	struct:PmaReader	file:
aLTerm	testdocs/sqlite3.c	/^  WhereTerm **aLTerm;   \/* WhereTerms used *\/$/;"	m	struct:WhereLoop	file:
aLTermSpace	testdocs/sqlite3.c	/^  WhereTerm *aLTermSpace[3];  \/* Initial aLTerm[] space *\/$/;"	m	struct:WhereLoop	file:
aLabel	testdocs/sqlite3.c	/^  int *aLabel;         \/* Space to hold the labels *\/$/;"	m	struct:Parse	file:
aLevel	testdocs/sqlite3.c	/^  Fts5StructureLevel aLevel[1];   \/* Array of nLevel level objects *\/$/;"	m	struct:Fts5Structure	file:
aLimit	testdocs/sqlite3.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	file:
aLock	testdocs/sqlite3.c	/^  u8 aLock[SQLITE_SHM_NLOCK];     \/* Reserved space for locks *\/$/;"	m	struct:WalCkptInfo	file:
aLoop	testdocs/sqlite3.c	/^  WhereLoop **aLoop;    \/* Array of WhereLoop objects implementing this path *\/$/;"	m	struct:WherePath	file:
aLvl	testdocs/sqlite3.c	/^  Fts5DlidxLvl aLvl[1];$/;"	m	struct:Fts5DlidxIter	file:
aMI	testdocs/sqlite3.c	/^  u32 *aMI;                  \/* See above *\/$/;"	m	struct:Fts3Expr	file:
aMap	testdocs/sqlite3.c	/^  u8 *aMap;                   \/* Pointer to mapping of entire file *\/$/;"	m	struct:PmaReader	file:
aMatchinfo	testdocs/sqlite3.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:
aMatchinfo	testdocs/sqlite3.c	/^  u32 aMatchinfo[1];$/;"	m	struct:MatchinfoBuffer	file:
aMem	testdocs/sqlite3.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aMem	testdocs/sqlite3.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	file:
aMem	testdocs/sqlite3.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	file:
aMem	testdocs/sqlite3.c	/^  sqlite3_value *aMem;    \/* First of nMem value in the unpacked pKey *\/$/;"	m	struct:BtreePayload	file:
aMemory	testdocs/sqlite3.c	/^  u8 *aMemory;                    \/* If non-NULL, bulk memory to hold pList *\/$/;"	m	struct:SorterList	file:
aModule	testdocs/sqlite3.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	file:
aNew	testdocs/sqlite3.c	/^  Mem *aNew;                      \/* Array of new.* values *\/$/;"	m	struct:PreUpdate	file:
aNode	testdocs/sqlite3.c	/^  JsonNode *aNode;   \/* Array of nodes containing the parse *\/$/;"	m	struct:JsonParse	file:
aNode	testdocs/sqlite3.c	/^  RtreeNode *aNode[RTREE_CACHE_SZ]; \/* Rtree node cache *\/$/;"	m	struct:RtreeCursor	file:
aNode	testdocs/sqlite3.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:
aNode	testdocs/sqlite3.c	/^  const char *aNode;$/;"	m	struct:NodeReader	file:
aNodeWriter	testdocs/sqlite3.c	/^  NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT];$/;"	m	struct:IncrmergeWriter	file:
aOffset	testdocs/sqlite3.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:
aOffset	testdocs/sqlite3.c	/^  u32 *aOffset;           \/* Pointer to aType[nField] *\/$/;"	m	struct:VdbeCursor	file:
aOnce	testdocs/sqlite3.c	/^  u8 *aOnce;                    \/* Array of OP_Once flags *\/$/;"	m	struct:SubProgram	file:
aOnce	testdocs/sqlite3.c	/^  u8 *aOnce;              \/* Bitmask used by OP_Once *\/$/;"	m	struct:VdbeFrame	file:
aOp	testdocs/sqlite3.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOp	testdocs/sqlite3.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	file:
aOp	testdocs/sqlite3.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	file:
aOrderBy	testdocs/sqlite3.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	file:
aOverflow	testdocs/sqlite3.c	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor	file:
aOvfl	testdocs/sqlite3.c	/^  u32 *aOvfl;                     \/* Array of overflow page numbers *\/$/;"	m	struct:StatCell	file:
aPadding	testdocs/sqlite3.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:
aPage	testdocs/sqlite3.c	/^  StatPage aPage[32];$/;"	m	struct:StatCursor	file:
aParam	testdocs/sqlite3.c	/^  RtreeDValue aParam[1];      \/* Values for parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:
aParam	testdocs/sqlite3.c	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
aParam	testdocs/sqlite3.c	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
aPgRef	testdocs/sqlite3.c	/^  u8 *aPgRef;       \/* 1 bit per page in the db (see above) *\/$/;"	m	struct:IntegrityCk	file:
aPgno	testdocs/sqlite3.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:
aPhrase	testdocs/sqlite3.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:
aPoint	testdocs/sqlite3.c	/^  RtreeSearchPoint *aPoint;         \/* Priority queue for search points *\/$/;"	m	struct:RtreeCursor	file:
aPool	testdocs/sqlite3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:
aPopulator	testdocs/sqlite3.c	/^  Fts5PoslistPopulator *aPopulator;$/;"	m	struct:Fts5ExprCtx	file:
aPoslist	testdocs/sqlite3.c	/^  const u8 *aPoslist;             \/* Position lists for current row *\/$/;"	m	struct:Fts5Sorter	file:
aPoslist	testdocs/sqlite3.c	/^  u8 *aPoslist;$/;"	m	struct:Fts5DoclistIter	file:
aPragmaName	testdocs/sqlite3.c	/^static const PragmaName aPragmaName[] = {$/;"	v	file:
aPrefix	testdocs/sqlite3.c	/^  int *aPrefix;                   \/* Sizes in bytes of nPrefix prefix indexes *\/$/;"	m	struct:Fts5Config	file:
aPrefix	testdocs/sqlite3.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	testdocs/sqlite3.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:
aReadr	testdocs/sqlite3.c	/^  PmaReader *aReadr;         \/* Array of PmaReaders to merge data from *\/$/;"	m	struct:MergeEngine	file:
aRecord	testdocs/sqlite3.c	/^  u8 *aRecord;                    \/* Buffer containing old.* record *\/$/;"	m	struct:SessionChange	file:
aRecord	testdocs/sqlite3.c	/^  u8 *aRecord;                    \/* old.* database record *\/$/;"	m	struct:PreUpdate	file:
aRef	testdocs/sqlite3.c	/^  u8 aRef[3];$/;"	m	struct:MatchinfoBuffer	file:
aRegion	testdocs/sqlite3.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:
aRow	testdocs/sqlite3.c	/^  const u8 *aRow;         \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	file:
aRowid	testdocs/sqlite3.c	/^    u8 *aRowid;                     \/* Key for WITHOUT ROWID tables *\/$/;"	m	union:Stat4Sample::__anon26	file:
aRowidOffset	testdocs/sqlite3.c	/^  int *aRowidOffset;              \/* Array of offset to rowid fields *\/$/;"	m	struct:Fts5SegIter	file:
aSalt	testdocs/sqlite3.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:
aSample	testdocs/sqlite3.c	/^  IndexSample *aSample;    \/* Samples of the left-most key *\/$/;"	m	struct:Index	file:
aSavepoint	testdocs/sqlite3.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:
aScan	testdocs/sqlite3.c	/^  ScanStatus *aScan;      \/* Scan definitions for sqlite3_stmt_scanstatus() *\/$/;"	m	struct:Vdbe	file:
aSeg	testdocs/sqlite3.c	/^  Fts5SegIter aSeg[1];            \/* Array of segment iterators *\/$/;"	m	struct:Fts5Iter	file:
aSeg	testdocs/sqlite3.c	/^  Fts5StructureSegment *aSeg;     \/* Array of segments. aSeg[0] is oldest. *\/$/;"	m	struct:Fts5StructureLevel	file:
aSegment	testdocs/sqlite3.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:
aSemName	testdocs/sqlite3.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:
aSlot	testdocs/sqlite3.c	/^  Fts5HashEntry **aSlot;          \/* Array of hash slots *\/$/;"	m	struct:Fts5Hash	file:
aSortOrder	testdocs/sqlite3.c	/^  u8 *aSortOrder;          \/* for each column: True==DESC, False==ASC *\/$/;"	m	struct:Index	file:
aSortOrder	testdocs/sqlite3.c	/^  u8 *aSortOrder;     \/* Sort order for each column. *\/$/;"	m	struct:KeyInfo	file:
aStat	testdocs/sqlite3.c	/^  int aStat[3];               \/* Total cache hits, misses and writes *\/$/;"	m	struct:Pager	file:
aStat	testdocs/sqlite3.c	/^  } *aStat;$/;"	m	struct:Fts3auxCursor	typeref:struct:Fts3auxCursor::Fts3auxColstats	file:
aStatic	testdocs/sqlite3.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStatic	testdocs/sqlite3.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStmt	testdocs/sqlite3.c	/^  sqlite3_stmt *aStmt[11];$/;"	m	struct:Fts5Storage	file:
aStmt	testdocs/sqlite3.c	/^  sqlite3_stmt *aStmt[40];$/;"	m	struct:Fts3Table	file:
aSyscall	testdocs/sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:unix_syscall	file:
aSyscall	testdocs/sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:win_syscall	file:
aTableLock	testdocs/sqlite3.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	file:
aTask	testdocs/sqlite3.c	/^  SortSubtask aTask[1];           \/* One or more subtasks *\/$/;"	m	struct:VdbeSorter	file:
aTempReg	testdocs/sqlite3.c	/^  int aTempReg[8];        \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	file:
aTerm	testdocs/sqlite3.c	/^  Fts5ExprTerm aTerm[1];          \/* Terms that make up this phrase *\/$/;"	m	struct:Fts5ExprPhrase	file:
aTerm	testdocs/sqlite3.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:
aToken	testdocs/sqlite3.c	/^  Fts3PhraseToken aToken[1]; \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
aTokenChar	testdocs/sqlite3.c	/^  unsigned char aTokenChar[128];  \/* ASCII range token characters *\/$/;"	m	struct:Unicode61Tokenizer	file:
aTokenChar	testdocs/sqlite3.c	/^  unsigned char aTokenChar[128];$/;"	m	struct:AsciiTokenizer	file:
aTotalSize	testdocs/sqlite3.c	/^  i64 *aTotalSize;                \/* Total sizes of each column *\/$/;"	m	struct:Fts5Storage	file:
aTree	testdocs/sqlite3.c	/^  int *aTree;                \/* Current state of incremental merge *\/$/;"	m	struct:MergeEngine	file:
aType	testdocs/sqlite3.c	/^  u32 aType[1];           \/* Type values record decode.  MUST BE LAST *\/$/;"	m	struct:VdbeCursor	file:
aUp	testdocs/sqlite3.c	/^  u32 *aUp;          \/* Index of parent of each node *\/$/;"	m	struct:JsonParse	file:
aVTrans	testdocs/sqlite3.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	file:
aVar	testdocs/sqlite3.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	file:
aWalData	testdocs/sqlite3.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:
aXformType	testdocs/sqlite3.c	/^} aXformType[] = {$/;"	v	typeref:struct:__anon19	file:
aaOutput	testdocs/sqlite3.c	/^  char *aaOutput[16];             \/* Malloc'd output buffers *\/$/;"	m	struct:TermSelect	file:
abIndexed	testdocs/sqlite3.c	/^  u8 *abIndexed;                  \/* Array of flags, set on indexed & PK cols *\/$/;"	m	struct:RbuObjIter	file:
abNotNull	testdocs/sqlite3.c	/^  u8 *abNotNull;                  \/* Array of flags, set on NOT NULL columns *\/$/;"	m	struct:RbuObjIter	file:
abNotindexed	testdocs/sqlite3.c	/^  u8 *abNotindexed;               \/* True for 'notindexed' columns *\/$/;"	m	struct:Fts3Table	file:
abPK	testdocs/sqlite3.c	/^  u8 *abPK;                       \/* Array of primary key flags *\/$/;"	m	struct:SessionTable	file:
abPK	testdocs/sqlite3.c	/^  u8 *abPK;                       \/* Boolean array - true if column is in PK *\/$/;"	m	struct:SessionApplyCtx	file:
abPK	testdocs/sqlite3.c	/^  u8 *abPK;                       \/* Primary key array *\/$/;"	m	struct:sqlite3_changeset_iter	file:
abTblPk	testdocs/sqlite3.c	/^  u8 *abTblPk;                    \/* Array of flags, set on target PK columns *\/$/;"	m	struct:RbuObjIter	file:
abUnindexed	testdocs/sqlite3.c	/^  u8 *abUnindexed;                \/* True for unindexed columns *\/$/;"	m	struct:Fts5Config	file:
absFunc	testdocs/sqlite3.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
accError	testdocs/sqlite3.c	/^  u8   accError;       \/* STRACCUM_NOMEM or STRACCUM_TOOBIG *\/$/;"	m	struct:StrAccum	file:
accessPayload	testdocs/sqlite3.c	/^static int accessPayload($/;"	f	file:
accessPayloadChecked	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int accessPayloadChecked($/;"	f	file:
actionName	testdocs/sqlite3.c	/^static const char *actionName(u8 action){$/;"	f	file:
addAggInfoColumn	testdocs/sqlite3.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addAggInfoFunc	testdocs/sqlite3.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addArgumentToVtab	testdocs/sqlite3.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:
addColOffset	testdocs/sqlite3.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	file:
addModuleArgument	testdocs/sqlite3.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:
addToBlockedList	testdocs/sqlite3.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:
addToSavepointBitvecs	testdocs/sqlite3.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:
addToVTrans	testdocs/sqlite3.c	/^static void addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:
addWhereTerm	testdocs/sqlite3.c	/^static void addWhereTerm($/;"	f	file:
addrBody	testdocs/sqlite3.c	/^  int addrBody;         \/* Beginning of the body of this loop *\/$/;"	m	struct:WhereLevel	file:
addrBrk	testdocs/sqlite3.c	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel	file:
addrCont	testdocs/sqlite3.c	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel	file:
addrCrTab	testdocs/sqlite3.c	/^  int addrCrTab;       \/* Address of OP_CreateTable opcode on CREATE TABLE *\/$/;"	m	struct:Parse	file:
addrExplain	testdocs/sqlite3.c	/^  int addrExplain;                \/* OP_Explain for loop *\/$/;"	m	struct:ScanStatus	file:
addrFillSub	testdocs/sqlite3.c	/^    int addrFillSub;  \/* Address of subroutine to manifest a subquery *\/$/;"	m	struct:SrcList::SrcList_item	file:
addrFirst	testdocs/sqlite3.c	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel	file:
addrInTop	testdocs/sqlite3.c	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon27::__anon28::InLoop	file:
addrLikeRep	testdocs/sqlite3.c	/^  int addrLikeRep;      \/* LIKE range processing address *\/$/;"	m	struct:WhereLevel	file:
addrLoop	testdocs/sqlite3.c	/^  int addrLoop;                   \/* Address of "loops" counter *\/$/;"	m	struct:ScanStatus	file:
addrNxt	testdocs/sqlite3.c	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel	file:
addrOpenEphm	testdocs/sqlite3.c	/^  int addrOpenEphm[2];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	file:
addrSkip	testdocs/sqlite3.c	/^  int addrSkip;         \/* Jump here for next iteration of skip-scan *\/$/;"	m	struct:WhereLevel	file:
addrSortIndex	testdocs/sqlite3.c	/^  int addrSortIndex;    \/* Address of the OP_SorterOpen or OP_OpenEphemeral *\/$/;"	m	struct:SortCtx	file:
addrTnct	testdocs/sqlite3.c	/^  int addrTnct;   \/* Address of OP_OpenEphemeral opcode for tabTnct *\/$/;"	m	struct:DistinctCtx	file:
addrVisit	testdocs/sqlite3.c	/^  int addrVisit;                  \/* Address of "rows visited" counter *\/$/;"	m	struct:ScanStatus	file:
addrVisit	testdocs/sqlite3.c	/^  int addrVisit;        \/* Address at which row is visited *\/$/;"	m	struct:WhereLevel	file:
adjustStats	testdocs/sqlite3.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:
affinity	testdocs/sqlite3.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	file:
affinity	testdocs/sqlite3.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	file:
afpCheckReservedLock	testdocs/sqlite3.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
afpClose	testdocs/sqlite3.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:
afpLock	testdocs/sqlite3.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
afpLockingContext	testdocs/sqlite3.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	testdocs/sqlite3.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	typeref:struct:afpLockingContext	file:
afpSetLock	testdocs/sqlite3.c	/^static int afpSetLock($/;"	f	file:
afpUnlock	testdocs/sqlite3.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
afpfsByteRangeLock2FSCTL	testdocs/sqlite3.c	/^#define afpfsByteRangeLock2FSCTL /;"	d	file:
aggregate_context	testdocs/sqlite3.c	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	file:
aggregate_count	testdocs/sqlite3.c	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
ai	testdocs/sqlite3.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::p4union	file:
aiClass	testdocs/sqlite3.c	/^static const unsigned char aiClass[] = {$/;"	v	file:
aiCol	testdocs/sqlite3.c	/^    int *aiCol;                               \/* array of column indexes *\/$/;"	m	union:Walker::__anon17	file:
aiCol	testdocs/sqlite3.c	/^  int aiCol[1];$/;"	m	struct:Fts5Colset	file:
aiColumn	testdocs/sqlite3.c	/^  i16 *aiColumn;           \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	file:
aiColumn	testdocs/sqlite3.c	/^  i16 aiColumn[11];          \/* Corresponding column number in the eq-class *\/$/;"	m	struct:WhereScan	file:
aiCur	testdocs/sqlite3.c	/^  int aiCur[11];             \/* Cursors in the equivalence class *\/$/;"	m	struct:WhereScan	file:
aiCurOnePass	testdocs/sqlite3.c	/^  int aiCurOnePass[2];      \/* OP_OpenWrite cursors for the ONEPASS opt *\/$/;"	m	struct:WhereInfo	file:
aiException	testdocs/sqlite3.c	/^  int *aiException;$/;"	m	struct:Unicode61Tokenizer	file:
aiException	testdocs/sqlite3.c	/^  int *aiException;$/;"	m	struct:unicode_tokenizer	file:
aiFreelist	testdocs/sqlite3.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:
aiHash	testdocs/sqlite3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:
aiIdx	testdocs/sqlite3.c	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH-1];     \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor	file:
aiOvfl	testdocs/sqlite3.c	/^  u16 aiOvfl[4];       \/* Insert the i-th overflow cell before the aiOvfl-th$/;"	m	struct:MemPage	file:
aiRowEst	testdocs/sqlite3.c	/^  tRowcnt *aiRowEst;       \/* Non-logarithmic stat1 data for this index *\/$/;"	m	struct:Index	file:
aiRowLogEst	testdocs/sqlite3.c	/^  LogEst *aiRowLogEst;     \/* From ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	file:
aiSmall	testdocs/sqlite3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:
aiSrcOrder	testdocs/sqlite3.c	/^  int *aiSrcOrder;                \/* src table col -> target table col *\/$/;"	m	struct:RbuObjIter	file:
alarmBusy	testdocs/sqlite3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:
alarmThreshold	testdocs/sqlite3.c	/^  sqlite3_int64 alarmThreshold; \/* The soft heap limit *\/$/;"	m	struct:Mem0Global	file:
allSpaces	testdocs/sqlite3.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:
allocSpace	testdocs/sqlite3.c	/^static void *allocSpace($/;"	f	file:
allocVdbe	testdocs/sqlite3.c	/^static SQLITE_NOINLINE Vdbe *allocVdbe(Parse *pParse){$/;"	f	file:
allocateBtreePage	testdocs/sqlite3.c	/^static int allocateBtreePage($/;"	f	file:
allocateCursor	testdocs/sqlite3.c	/^static VdbeCursor *allocateCursor($/;"	f	file:
allocateIndexInfo	testdocs/sqlite3.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:
allocateSpace	testdocs/sqlite3.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:
allocateTempSpace	testdocs/sqlite3.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:
allowedOp	testdocs/sqlite3.c	/^static int allowedOp(int op){$/;"	f	file:
anDLt	testdocs/sqlite3.c	/^  tRowcnt *anDLt;                 \/* sqlite_stat4.nDLt *\/$/;"	m	struct:Stat4Sample	file:
anDLt	testdocs/sqlite3.c	/^  tRowcnt *anDLt;   \/* Est. number of distinct keys less than this sample *\/$/;"	m	struct:IndexSample	file:
anEq	testdocs/sqlite3.c	/^  tRowcnt *anEq;                  \/* sqlite_stat4.nEq *\/$/;"	m	struct:Stat4Sample	file:
anEq	testdocs/sqlite3.c	/^  tRowcnt *anEq;    \/* Est. number of rows where the key equals this sample *\/$/;"	m	struct:IndexSample	file:
anExec	testdocs/sqlite3.c	/^  i64 *anExec;            \/* Event counters from parent frame *\/$/;"	m	struct:VdbeFrame	file:
anExec	testdocs/sqlite3.c	/^  i64 *anExec;            \/* Number of times each op has been executed *\/$/;"	m	struct:Vdbe	file:
anLt	testdocs/sqlite3.c	/^  tRowcnt *anLt;                  \/* sqlite_stat4.nLt *\/$/;"	m	struct:Stat4Sample	file:
anLt	testdocs/sqlite3.c	/^  tRowcnt *anLt;    \/* Est. number of rows where key is less than this sample *\/$/;"	m	struct:IndexSample	file:
anOutput	testdocs/sqlite3.c	/^  int anOutput[16];               \/* Size each output buffer in bytes *\/$/;"	m	struct:TermSelect	file:
anQueue	testdocs/sqlite3.c	/^  u32 anQueue[RTREE_MAX_DEPTH+1];   \/* Number of queued entries by iLevel *\/$/;"	m	struct:RtreeCursor	file:
anQueue	testdocs/sqlite3.c	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
anStat	testdocs/sqlite3.c	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	file:
analysisInfo	testdocs/sqlite3.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	testdocs/sqlite3.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	typeref:struct:analysisInfo	file:
analysisLoader	testdocs/sqlite3.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
analyzeAggregate	testdocs/sqlite3.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:
analyzeAggregatesInSelect	testdocs/sqlite3.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeDatabase	testdocs/sqlite3.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:
analyzeOneTable	testdocs/sqlite3.c	/^static void analyzeOneTable($/;"	f	file:
analyzeTable	testdocs/sqlite3.c	/^static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){$/;"	f	file:
apArg	testdocs/sqlite3.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	file:
apArg	testdocs/sqlite3.c	/^  sqlite3_value **apArg;   \/* The argument values *\/$/;"	m	struct:PrintfArguments	file:
apCell	testdocs/sqlite3.c	/^  u8 **apCell;            \/* All cells begin balanced *\/$/;"	m	struct:CellArray	file:
apChange	testdocs/sqlite3.c	/^  SessionChange **apChange;       \/* Hash table buckets *\/$/;"	m	struct:SessionTable	file:
apChild	testdocs/sqlite3.c	/^  Fts5ExprNode *apChild[1];       \/* Array of child nodes *\/$/;"	m	struct:Fts5ExprNode	file:
apCsr	testdocs/sqlite3.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	file:
apCsr	testdocs/sqlite3.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	file:
apExprPhrase	testdocs/sqlite3.c	/^  Fts5ExprPhrase **apExprPhrase;  \/* Pointers to phrase objects *\/$/;"	m	struct:Fts5Expr	file:
apHash	testdocs/sqlite3.c	/^  Fts5TermsetEntry *apHash[512];$/;"	m	struct:Fts5Termset	file:
apHash	testdocs/sqlite3.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:
apOvfl	testdocs/sqlite3.c	/^  u8 *apOvfl[4];       \/* Pointers to the body of overflow cells *\/$/;"	m	struct:MemPage	file:
apPage	testdocs/sqlite3.c	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH]; \/* Pages from root to current page *\/$/;"	m	struct:BtCursor	file:
apPhrase	testdocs/sqlite3.c	/^  Fts5ExprPhrase **apPhrase;      \/* Array of all phrases *\/$/;"	m	struct:Fts5Parse	file:
apPhrase	testdocs/sqlite3.c	/^  Fts5ExprPhrase *apPhrase[1];    \/* Array of phrase pointers *\/$/;"	m	struct:Fts5ExprNearset	file:
apRankArg	testdocs/sqlite3.c	/^  sqlite3_value **apRankArg;      \/* Array of trailing arguments *\/$/;"	m	struct:Fts5Cursor	file:
apRegion	testdocs/sqlite3.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
apSegment	testdocs/sqlite3.c	/^  Fts3SegReader **apSegment;      \/* Array of Fts3SegReader objects *\/$/;"	m	struct:Fts3MultiSegReader	file:
apShm	testdocs/sqlite3.c	/^  char **apShm;                   \/* Array of mmap'd *-shm regions *\/$/;"	m	struct:rbu_file	file:
apSqlParam	testdocs/sqlite3.c	/^  sqlite3_value **apSqlParam;       \/* Original SQL values of parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
apSqlParam	testdocs/sqlite3.c	/^  sqlite3_value **apSqlParam; \/* Original SQL parameter values *\/$/;"	m	struct:RtreeMatchArg	file:
apSub	testdocs/sqlite3.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon24	file:
apSub	testdocs/sqlite3.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:
apTrigger	testdocs/sqlite3.c	/^  Trigger *apTrigger[2];\/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	file:
apValue	testdocs/sqlite3.c	/^  sqlite3_value **apValue;        \/* old.* and new.* values *\/$/;"	m	struct:sqlite3_changeset_iter	file:
apVtabLock	testdocs/sqlite3.c	/^  Table **apVtabLock;       \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	file:
apWiData	testdocs/sqlite3.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:
api	testdocs/sqlite3.c	/^  fts5_api api;                   \/* User visible part of object (see fts5.h) *\/$/;"	m	struct:Fts5Global	file:
apiOomError	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int apiOomError(sqlite3 *db){$/;"	f	file:
applyAffinity	testdocs/sqlite3.c	/^static void applyAffinity($/;"	f	file:
applyNumericAffinity	testdocs/sqlite3.c	/^static void applyNumericAffinity(Mem *pRec, int bTryForInt){$/;"	f	file:
approx	testdocs/sqlite3.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:
argc	testdocs/sqlite3.c	/^  u8 argc;                \/* Number of arguments *\/$/;"	m	struct:sqlite3_context	file:
argv	testdocs/sqlite3.c	/^  sqlite3_value *argv[1]; \/* Argument set *\/$/;"	m	struct:sqlite3_context	file:
argvIndex	testdocs/sqlite3.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
asciiFold	testdocs/sqlite3.c	/^static void asciiFold(char *aOut, const char *aIn, int nByte){$/;"	f	file:
assertCellInfo	testdocs/sqlite3.c	/^  #define assertCellInfo(/;"	d	file:
assertCellInfo	testdocs/sqlite3.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:
assertColumnName	testdocs/sqlite3.c	/^# define assertColumnName(/;"	d	file:
assertColumnName	testdocs/sqlite3.c	/^static void assertColumnName(sqlite3_stmt *pStmt, int iCol, const char *zName){$/;"	f	file:
assertMutexHeld	testdocs/sqlite3.c	/^#define assertMutexHeld(/;"	d	file:
assertParentIndex	testdocs/sqlite3.c	/^#  define assertParentIndex(/;"	d	file:
assertParentIndex	testdocs/sqlite3.c	/^static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){$/;"	f	file:
assertTruncateConstraint	testdocs/sqlite3.c	/^# define assertTruncateConstraint(/;"	d	file:
assertTruncateConstraint	testdocs/sqlite3.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:
assertTruncateConstraintCb	testdocs/sqlite3.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:
assert_nc	testdocs/sqlite3.c	/^# define assert_nc(/;"	d	file:
assert_pager_state	testdocs/sqlite3.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:
atEOF	testdocs/sqlite3.c	/^  u8 atEOF;                         \/* True if at end of search *\/$/;"	m	struct:RtreeCursor	file:
atf_init	atf.h	/^void atf_init(int argc, char** argv) {$/;"	f
atf_print_results	atf.h	/^int atf_print_results(void) {$/;"	f
atf_test_assert	atf.h	/^bool atf_test_assert(bool success, char* expr, char* file, int line) {$/;"	f
atf_test_fail	atf.h	/^void atf_test_fail(char* expr, char* file, int line) {$/;"	f
atf_test_start	atf.h	/^void atf_test_start(char* file, unsigned int line, char* name) {$/;"	f
attachBackupObject	testdocs/sqlite3.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:
attachFunc	testdocs/sqlite3.c	/^static void attachFunc($/;"	f	file:
auth	testdocs/sqlite3.c	/^  sqlite3_userauth auth;        \/* User authentication information *\/$/;"	m	struct:sqlite3	file:
authLevel	testdocs/sqlite3.c	/^  u8 authLevel;                 \/* Current authentication level *\/$/;"	m	struct:sqlite3_userauth	file:
autoCommit	testdocs/sqlite3.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	file:
autoIncBegin	testdocs/sqlite3.c	/^# define autoIncBegin(/;"	d	file:
autoIncBegin	testdocs/sqlite3.c	/^static int autoIncBegin($/;"	f	file:
autoIncStep	testdocs/sqlite3.c	/^# define autoIncStep(/;"	d	file:
autoIncStep	testdocs/sqlite3.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:
autoIncrementEnd	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void autoIncrementEnd(Parse *pParse){$/;"	f	file:
autoVacuum	testdocs/sqlite3.c	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
autoVacuumCommit	testdocs/sqlite3.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:
auto_extension	testdocs/sqlite3.c	/^  int (*auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:
autolockIoFinder	testdocs/sqlite3.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	testdocs/sqlite3.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:
avgFinalize	testdocs/sqlite3.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:
avgdl	testdocs/sqlite3.c	/^  double avgdl;                   \/* Average number of tokens in each row *\/$/;"	m	struct:Fts5Bm25Data	file:
azArg	testdocs/sqlite3.c	/^  char *azArg[2];           \/* Value of the argument and schema *\/$/;"	m	struct:PragmaVtabCursor	file:
azCol	testdocs/sqlite3.c	/^  char **azCol;                   \/* Column names *\/$/;"	m	struct:Fts5Config	file:
azCol	testdocs/sqlite3.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:
azCol	testdocs/sqlite3.c	/^  const char **azCol;             \/* Array of column names *\/$/;"	m	struct:SessionApplyCtx	file:
azCol	testdocs/sqlite3.c	/^  const char **azCol;             \/* Column names *\/$/;"	m	struct:SessionTable	file:
azColl	testdocs/sqlite3.c	/^  const char **azColl;     \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	file:
azColumn	testdocs/sqlite3.c	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table	file:
azCompileOpt	testdocs/sqlite3.c	/^static const char * const azCompileOpt[] = {$/;"	v	file:
azFileLock	testdocs/sqlite3.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:
azModuleArg	testdocs/sqlite3.c	/^  char **azModuleArg;  \/* 0: module 1: schema 2: vtab name 3...: args *\/$/;"	m	struct:Table	file:
azResult	testdocs/sqlite3.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:
azTblCol	testdocs/sqlite3.c	/^  char **azTblCol;                \/* Array of unquoted target column names *\/$/;"	m	struct:RbuObjIter	file:
azTblType	testdocs/sqlite3.c	/^  char **azTblType;               \/* Array of target column types *\/$/;"	m	struct:RbuObjIter	file:
b	testdocs/sqlite3.c	/^  const unsigned char *b;$/;"	m	struct:Fts5PhraseIter	file:
b	testdocs/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
b	testdocs/waf	/^	def b(x):$/;"	f	function:b
b	testdocs/waf	/^def b(x):$/;"	f
bAutoAttach	testdocs/sqlite3.c	/^  int bAutoAttach;                \/* True to auto-attach tables *\/$/;"	m	struct:sqlite3_session	file:
bBenignMalloc	testdocs/sqlite3.c	/^  u8 bBenignMalloc;             \/* Do not require OOMs if true *\/$/;"	m	struct:sqlite3	file:
bBusy	testdocs/sqlite3.c	/^  u8 bBusy;            \/* Prevent endless loops on corrupt database files *\/$/;"	m	struct:MemPage	file:
bCleanup	testdocs/sqlite3.c	/^  int bCleanup;                   \/* True in "cleanup" state *\/$/;"	m	struct:RbuObjIter	file:
bColumnsize	testdocs/sqlite3.c	/^  int bColumnsize;                \/* "columnsize=" option value (dflt==1) *\/$/;"	m	struct:Fts5Config	file:
bConstraint	testdocs/sqlite3.c	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable	file:
bContent	testdocs/sqlite3.c	/^  u8 bContent;                    \/* Set content-flag (detail=none mode) *\/$/;"	m	struct:Fts5HashEntry	file:
bCoreMutex	testdocs/sqlite3.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bDeclared	testdocs/sqlite3.c	/^  int bDeclared;      \/* True after sqlite3_declare_vtab() is called *\/$/;"	m	struct:VtabCtx	file:
bDeferConstraints	testdocs/sqlite3.c	/^  int bDeferConstraints;          \/* True to defer constraints *\/$/;"	m	struct:SessionApplyCtx	file:
bDeferred	testdocs/sqlite3.c	/^  u8 bDeferred;              \/* True if this expression is entirely deferred *\/$/;"	m	struct:Fts3Expr	file:
bDel	testdocs/sqlite3.c	/^  u8 bDel;                        \/* Set delete-flag @ iSzPoslist *\/$/;"	m	struct:Fts5HashEntry	file:
bDel	testdocs/sqlite3.c	/^  u8 bDel;                        \/* True if the delete flag is set *\/$/;"	m	struct:Fts5SegIter	file:
bDelete	testdocs/sqlite3.c	/^  int bDelete;                    \/* Current write is a delete *\/$/;"	m	struct:Fts5Index	file:
bDesc	testdocs/sqlite3.c	/^  int bDesc;                      \/* Iterate in descending rowid order *\/$/;"	m	struct:Fts5Expr	file:
bDesc	testdocs/sqlite3.c	/^  int bDesc;                      \/* True for "ORDER BY rowid DESC" queries *\/$/;"	m	struct:Fts5Cursor	file:
bDesc	testdocs/sqlite3.c	/^  u8 bDesc;                       \/* True to sort in descending order *\/$/;"	m	struct:Fts3Cursor	file:
bDescIdx	testdocs/sqlite3.c	/^  u8 bDescIdx;                    \/* True if doclists are in reverse order *\/$/;"	m	struct:Fts3Table	file:
bDestLocked	testdocs/sqlite3.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:
bDisable	testdocs/sqlite3.c	/^  u32 bDisable;           \/* Only operate the lookaside when zero *\/$/;"	m	struct:Lookaside	file:
bDoTruncate	testdocs/sqlite3.c	/^  u8 bDoTruncate;       \/* True to truncate db on commit *\/$/;"	m	struct:BtShared	file:
bDone	testdocs/sqlite3.c	/^  int bDone;                      \/* Set if thread is finished but not joined *\/$/;"	m	struct:SortSubtask	file:
bEnable	testdocs/sqlite3.c	/^  int bEnable;                    \/* True if currently recording *\/$/;"	m	struct:sqlite3_session	file:
bEof	testdocs/sqlite3.c	/^  int bEof;                       \/* Set to true after xInput finished *\/$/;"	m	struct:SessionInput	file:
bEof	testdocs/sqlite3.c	/^  int bEof;                       \/* Set to true when merge is finished *\/$/;"	m	struct:IncrMerger	file:
bEof	testdocs/sqlite3.c	/^  int bEof;                       \/* True at EOF *\/$/;"	m	struct:Fts5ExprNode	file:
bEof	testdocs/sqlite3.c	/^  int bEof;                       \/* True if this cursor is at EOF *\/$/;"	m	struct:Fts5VocabCursor	file:
bEof	testdocs/sqlite3.c	/^  int bEof;                     \/* At EOF already *\/$/;"	m	struct:Fts5DlidxLvl	file:
bEof	testdocs/sqlite3.c	/^  u8 bEof;                        \/* Set to true at EOF *\/$/;"	m	struct:Fts5PoslistReader	file:
bEof	testdocs/sqlite3.c	/^  u8 bEof;                   \/* True this expression is at EOF already *\/$/;"	m	struct:Fts3Expr	file:
bEof	testdocs/sqlite3.c	/^  u8 bEof;$/;"	m	struct:Fts5IndexIter	file:
bErr	testdocs/sqlite3.c	/^  u8 bErr;                 \/* True if an error has been encountered *\/$/;"	m	struct:JsonString	file:
bExclusive	testdocs/sqlite3.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:
bFirst	testdocs/sqlite3.c	/^  int bFirst;                     \/* True if token must appear at position 0 *\/$/;"	m	struct:Fts3PhraseToken	file:
bFirstRowidInDoclist	testdocs/sqlite3.c	/^  u8 bFirstRowidInDoclist;        \/* True if next rowid is first in doclist *\/$/;"	m	struct:Fts5SegWriter	file:
bFirstRowidInPage	testdocs/sqlite3.c	/^  u8 bFirstRowidInPage;           \/* True if next rowid is first in page *\/$/;"	m	struct:Fts5SegWriter	file:
bFirstTermInPage	testdocs/sqlite3.c	/^  u8 bFirstTermInPage;            \/* True if next term will be first in leaf *\/$/;"	m	struct:Fts5SegWriter	file:
bFlag	testdocs/sqlite3.c	/^  u8 bFlag;                       \/* For client use (any custom purpose) *\/$/;"	m	struct:Fts5PoslistReader	file:
bFreeList	testdocs/sqlite3.c	/^  int bFreeList;                 \/* True if pList should be sqlite3_free()d *\/$/;"	m	struct:Fts3Doclist	file:
bFts4	testdocs/sqlite3.c	/^  int bFts4;                          \/* True to allow FTS4-only syntax *\/$/;"	m	struct:ParseContext	file:
bFts4	testdocs/sqlite3.c	/^  u8 bFts4;                       \/* True for FTS4, false for FTS3 *\/$/;"	m	struct:Fts3Table	file:
bFullMutex	testdocs/sqlite3.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bGlobal	testdocs/sqlite3.c	/^  int bGlobal;                    \/* Set if global data is loaded *\/$/;"	m	struct:MatchinfoBuffer	file:
bHasDocsize	testdocs/sqlite3.c	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table	file:
bHasStat	testdocs/sqlite3.c	/^  u8 bHasStat;                    \/* True if %_stat table exists (2==unknown) *\/$/;"	m	struct:Fts3Table	file:
bIgnore	testdocs/sqlite3.c	/^  int bIgnore;$/;"	m	struct:TokenDoclist	file:
bIgnoreSavepoint	testdocs/sqlite3.c	/^  u8 bIgnoreSavepoint;            \/* True to ignore xSavepoint invocations *\/$/;"	m	struct:Fts3Table	file:
bIncr	testdocs/sqlite3.c	/^  int bIncr;                 \/* True if doclist is loaded incrementally *\/$/;"	m	struct:Fts3Phrase	file:
bIndirect	testdocs/sqlite3.c	/^  int bIndirect;                  \/* True if all changes are indirect *\/$/;"	m	struct:sqlite3_session	file:
bIndirect	testdocs/sqlite3.c	/^  int bIndirect;                  \/* True if current change was indirect *\/$/;"	m	struct:sqlite3_changeset_iter	file:
bIndirect	testdocs/sqlite3.c	/^  int bIndirect;                  \/* True if this change is "indirect" *\/$/;"	m	struct:SessionChange	file:
bIsReader	testdocs/sqlite3.c	/^  bft bIsReader:1;        \/* True for statements that read *\/$/;"	m	struct:Vdbe	file:
bLine	testdocs/sqlite3.c	/^  u8  bLine[100];         \/* Draw vertical in column i if bLine[i] is true *\/$/;"	m	struct:TreeView	file:
bLocaltimeFault	testdocs/sqlite3.c	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config	file:
bLookup	testdocs/sqlite3.c	/^  int bLookup;                    \/* True if a lookup of a single entry. *\/$/;"	m	struct:Fts3MultiSegReader	file:
bLookup	testdocs/sqlite3.c	/^  u8 bLookup;                     \/* True for a lookup only *\/$/;"	m	struct:Fts3SegReader	file:
bMalloced	testdocs/sqlite3.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	file:
bMemstat	testdocs/sqlite3.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	file:
bMiss	testdocs/sqlite3.c	/^  int bMiss;$/;"	m	struct:Fts5PoslistPopulator	file:
bNoDiscard	testdocs/sqlite3.c	/^  int bNoDiscard;                 \/* If true, discard no data *\/$/;"	m	struct:SessionInput	file:
bNoIncrDoclist	testdocs/sqlite3.c	/^  int bNoIncrDoclist;$/;"	m	struct:Fts3Table	file:
bNoLeafData	testdocs/sqlite3.c	/^  u8 bNoLeafData;                 \/* If true, store 0 for segment size *\/$/;"	m	struct:IncrmergeWriter	file:
bNoLock	testdocs/sqlite3.c	/^  BOOL bNoLock;                      \/* Non-zero if locking is disabled. *\/$/;"	m	struct:winVfsAppData	file:
bNolock	testdocs/sqlite3.c	/^  u8 bNolock;                     \/* True to fail EXCLUSIVE locks *\/$/;"	m	struct:rbu_file	file:
bNomatch	testdocs/sqlite3.c	/^  int bNomatch;                   \/* True if entry is not a match *\/$/;"	m	struct:Fts5ExprNode	file:
bOk	testdocs/sqlite3.c	/^  int bOk;                        \/* True if ok to populate *\/$/;"	m	struct:Fts5PoslistPopulator	file:
bOpenUri	testdocs/sqlite3.c	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config	file:
bOrderedInnerLoop	testdocs/sqlite3.c	/^  u8 bOrderedInnerLoop;     \/* True if only the inner-most loop is ordered *\/$/;"	m	struct:WhereInfo	file:
bOrderedInnerLoop	testdocs/sqlite3.c	/^  u8 bOrderedInnerLoop; \/* ORDER BY correctly sorts the inner loop *\/$/;"	m	struct:SortCtx	file:
bOwned	testdocs/sqlite3.c	/^  BOOL bOwned;  \/* Do we own the heap (i.e. destroy it on shutdown)? *\/$/;"	m	struct:winMemData	file:
bPatch	testdocs/sqlite3.c	/^  int bPatch;                     \/* True to accumulate patchsets *\/$/;"	m	struct:sqlite3_changegroup	file:
bPatchset	testdocs/sqlite3.c	/^  int bPatchset;                  \/* True if this is a patchset *\/$/;"	m	struct:sqlite3_changeset_iter	file:
bPending	testdocs/sqlite3.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:
bPoint	testdocs/sqlite3.c	/^  u8 bPoint;                        \/* True if sPoint is valid *\/$/;"	m	struct:RtreeCursor	file:
bPrefix	testdocs/sqlite3.c	/^  int bPrefix;                    \/* True for a prefix term *\/$/;"	m	struct:Fts5ExprTerm	file:
bPrefixIndex	testdocs/sqlite3.c	/^  int bPrefixIndex;               \/* True to use prefix-indexes *\/$/;"	m	struct:Fts5Config	file:
bPrevDelete	testdocs/sqlite3.c	/^  int bPrevDelete;                \/* True if last operation was a delete *\/$/;"	m	struct:Fts3Table	file:
bPrevValid	testdocs/sqlite3.c	/^  int bPrevValid;                 \/* True if iPrev is valid *\/$/;"	m	struct:Fts5DlidxWriter	file:
bProcessLock	testdocs/sqlite3.c	/^  unsigned char bProcessLock;     \/* An exclusive process lock is held *\/$/;"	m	struct:unixInodeInfo	file:
bPurgeable	testdocs/sqlite3.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:
bPurgeable	testdocs/sqlite3.c	/^  u8 bPurgeable;                      \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:
bRecursive	testdocs/sqlite3.c	/^  u8 bRecursive;             \/* True for json_tree().  False for json_each() *\/$/;"	m	struct:JsonEachCursor	file:
bRemoveDiacritic	testdocs/sqlite3.c	/^  int bRemoveDiacritic;           \/* True if remove_diacritics=1 is set *\/$/;"	m	struct:Unicode61Tokenizer	file:
bRemoveDiacritic	testdocs/sqlite3.c	/^  int bRemoveDiacritic;$/;"	m	struct:unicode_tokenizer	file:
bReserved	testdocs/sqlite3.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:
bRestart	testdocs/sqlite3.c	/^  int bRestart;$/;"	m	struct:Fts3MultiSegReader	file:
bRev	testdocs/sqlite3.c	/^  int bRev;                       \/* True to iterate in reverse order *\/$/;"	m	struct:Fts5Iter	file:
bSeekStmt	testdocs/sqlite3.c	/^  u8 bSeekStmt;                   \/* True if pStmt is a seek *\/$/;"	m	struct:Fts3Cursor	file:
bSkipEmpty	testdocs/sqlite3.c	/^  u8 bSkipEmpty;                  \/* True to skip deleted entries *\/$/;"	m	struct:Fts5Iter	file:
bSpanIsTab	testdocs/sqlite3.c	/^    unsigned bSpanIsTab :1; \/* zSpan holds DB.TABLE.COLUMN *\/$/;"	m	struct:ExprList::ExprList_item	file:
bStart	testdocs/sqlite3.c	/^  u8 bStart;                 \/* True if iDocid is valid *\/$/;"	m	struct:Fts3Expr	file:
bStatic	testdocs/sqlite3.c	/^  u8 bStatic;              \/* True if zBuf is static space *\/$/;"	m	struct:JsonString	file:
bSyncSet	testdocs/sqlite3.c	/^  u8 bSyncSet;         \/* True if "PRAGMA synchronous=N" has been run *\/$/;"	m	struct:Db	file:
bTermEq	testdocs/sqlite3.c	/^  u8 bTermEq;                     \/* True if the terms are equal *\/$/;"	m	struct:Fts5CResult	file:
bTotalsValid	testdocs/sqlite3.c	/^  int bTotalsValid;               \/* True if nTotalRow\/aTotalSize[] are valid *\/$/;"	m	struct:Fts5Storage	file:
bUnderPressure	testdocs/sqlite3.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:
bUnique	testdocs/sqlite3.c	/^  int bUnique;                    \/* Current index is unique *\/$/;"	m	struct:RbuObjIter	file:
bUnordered	testdocs/sqlite3.c	/^  unsigned bUnordered:1;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index	file:
bUseCis	testdocs/sqlite3.c	/^  int bUseCis;                      \/* Use covering indices for full-scans *\/$/;"	m	struct:Sqlite3Config	file:
bUseFetch	testdocs/sqlite3.c	/^  u8 bUseFetch;               \/* True to use xFetch() *\/$/;"	m	struct:Pager	file:
bUsePMA	testdocs/sqlite3.c	/^  u8 bUsePMA;                     \/* True if one or more PMAs created *\/$/;"	m	struct:VdbeSorter	file:
bUseThread	testdocs/sqlite3.c	/^  int bUseThread;                 \/* True to use a bg thread for this object *\/$/;"	m	struct:IncrMerger	file:
bUseThreads	testdocs/sqlite3.c	/^  u8 bUseThreads;                 \/* True to use background threads *\/$/;"	m	struct:VdbeSorter	file:
bVarOnly	testdocs/sqlite3.c	/^  int bVarOnly;       \/* Check for variable references only *\/$/;"	m	struct:DbFixer	file:
backtrace	testdocs/sqlite3.c	/^# define backtrace(/;"	d	file:
backtrace_symbols_fd	testdocs/sqlite3.c	/^# define backtrace_symbols_fd(/;"	d	file:
backupOnePage	testdocs/sqlite3.c	/^static int backupOnePage($/;"	f	file:
backupTruncateFile	testdocs/sqlite3.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:
backupUpdate	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void backupUpdate($/;"	f	file:
backup_finish	testdocs/sqlite3.c	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_init	testdocs/sqlite3.c	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
backup_pagecount	testdocs/sqlite3.c	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_remaining	testdocs/sqlite3.c	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_step	testdocs/sqlite3.c	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	file:
balance	testdocs/sqlite3.c	/^static int balance(BtCursor *pCur){$/;"	f	file:
balance_deeper	testdocs/sqlite3.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:
balance_nonroot	testdocs/sqlite3.c	/^static int balance_nonroot($/;"	f	file:
balance_quick	testdocs/sqlite3.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:
base	testdocs/sqlite3.c	/^  Fts5IndexIter base;             \/* Base class containing output vars *\/$/;"	m	struct:Fts5Iter	file:
base	testdocs/sqlite3.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:
base	testdocs/sqlite3.c	/^  sqlite3_file base;              \/* sqlite3_file methods *\/$/;"	m	struct:rbu_file	file:
base	testdocs/sqlite3.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:
base	testdocs/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:
base	testdocs/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:
base	testdocs/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:unicode_tokenizer	file:
base	testdocs/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:unicode_cursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_vfs base;               \/* rbu VFS shim methods *\/$/;"	m	struct:rbu_vfs	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxTable	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokTable	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts5Table	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab base;          \/* Base class.  Must be first *\/$/;"	m	struct:Rtree	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab base;        \/* Base class.  Must be first *\/$/;"	m	struct:PragmaVtab	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab base;$/;"	m	struct:Fts5VocabTable	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab base;$/;"	m	struct:StatTable	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab_cursor base;         \/* Base class.  Must be first *\/$/;"	m	struct:RtreeCursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxCursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokCursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts5Cursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab_cursor base;  \/* Base class - must be first *\/$/;"	m	struct:JsonEachCursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab_cursor base; \/* Base class.  Must be first *\/$/;"	m	struct:PragmaVtabCursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:Fts5VocabCursor	file:
base	testdocs/sqlite3.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:StatCursor	file:
beg	edit.h	/^            size_t beg; \/* offset in the file where insertion started *\/$/;"	m	struct:Log::__anon2::__anon3
beg	edit.h	/^    size_t beg;$/;"	m	struct:__anon6
bft	testdocs/sqlite3.c	/^typedef unsigned bft;  \/* Bit Field Type *\/$/;"	t	file:
bigEndCksum	testdocs/sqlite3.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:
binCollFunc	testdocs/sqlite3.c	/^static int binCollFunc($/;"	f	file:
binaryCompareP5	testdocs/sqlite3.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:
binaryToUnaryIfNull	testdocs/sqlite3.c	/^  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){$/;"	f	file:
bindText	testdocs/sqlite3.c	/^static int bindText($/;"	f	file:
bind_blob	testdocs/sqlite3.c	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_blob64	testdocs/sqlite3.c	/^  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
bind_double	testdocs/sqlite3.c	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	file:
bind_int	testdocs/sqlite3.c	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_int64	testdocs/sqlite3.c	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
bind_null	testdocs/sqlite3.c	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_count	testdocs/sqlite3.c	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_index	testdocs/sqlite3.c	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_name	testdocs/sqlite3.c	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_text	testdocs/sqlite3.c	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text16	testdocs/sqlite3.c	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text64	testdocs/sqlite3.c	/^  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
bind_value	testdocs/sqlite3.c	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
bind_zeroblob	testdocs/sqlite3.c	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_zeroblob64	testdocs/sqlite3.c	/^  int (*bind_zeroblob64)(sqlite3_stmt*, int, sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
bldFlags	testdocs/sqlite3.c	/^  unsigned int bldFlags;    \/* SQLITE_BLDF_* flags *\/$/;"	m	struct:WhereLoopBuilder	file:
blobGrowBuffer	testdocs/sqlite3.c	/^static void blobGrowBuffer(Blob *pBlob, int nMin, int *pRc){$/;"	f	file:
blobReadWrite	testdocs/sqlite3.c	/^static int blobReadWrite($/;"	f	file:
blobSeekToRow	testdocs/sqlite3.c	/^static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){$/;"	f	file:
blob_bytes	testdocs/sqlite3.c	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_close	testdocs/sqlite3.c	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_open	testdocs/sqlite3.c	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,$/;"	m	struct:sqlite3_api_routines	file:
blob_read	testdocs/sqlite3.c	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blob_reopen	testdocs/sqlite3.c	/^  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
blob_write	testdocs/sqlite3.c	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
block	testdocs/sqlite3.c	/^  Blob block;                     \/* Current block image *\/$/;"	m	struct:NodeWriter	file:
btree	testdocs/sqlite3.c	/^    } btree;$/;"	m	union:WhereLoop::__anon29	typeref:struct:WhereLoop::__anon29::__anon30	file:
btreeClearHasContent	testdocs/sqlite3.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:
btreeCreateTable	testdocs/sqlite3.c	/^static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){$/;"	f	file:
btreeCursor	testdocs/sqlite3.c	/^static int btreeCursor($/;"	f	file:
btreeDropTable	testdocs/sqlite3.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:
btreeEndTransaction	testdocs/sqlite3.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:
btreeEnterAll	testdocs/sqlite3.c	/^static void SQLITE_NOINLINE btreeEnterAll(sqlite3 *db){$/;"	f	file:
btreeGetHasContent	testdocs/sqlite3.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreeGetPage	testdocs/sqlite3.c	/^static int btreeGetPage($/;"	f	file:
btreeGetUnusedPage	testdocs/sqlite3.c	/^static int btreeGetUnusedPage($/;"	f	file:
btreeHeapInsert	testdocs/sqlite3.c	/^static void btreeHeapInsert(u32 *aHeap, u32 x){$/;"	f	file:
btreeHeapPull	testdocs/sqlite3.c	/^static int btreeHeapPull(u32 *aHeap, u32 *pOut){$/;"	f	file:
btreeInitPage	testdocs/sqlite3.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:
btreeIntegrity	testdocs/sqlite3.c	/^#define btreeIntegrity(/;"	d	file:
btreeInvokeBusyHandler	testdocs/sqlite3.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:
btreeLeaveAll	testdocs/sqlite3.c	/^static void SQLITE_NOINLINE btreeLeaveAll(sqlite3 *db){$/;"	f	file:
btreeLockCarefully	testdocs/sqlite3.c	/^static void SQLITE_NOINLINE btreeLockCarefully(Btree *p){$/;"	f	file:
btreeMask	testdocs/sqlite3.c	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	file:
btreeMoveto	testdocs/sqlite3.c	/^static int btreeMoveto($/;"	f	file:
btreeNext	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int btreeNext(BtCursor *pCur, int *pRes){$/;"	f	file:
btreePageFromDbPage	testdocs/sqlite3.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:
btreePageLookup	testdocs/sqlite3.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreePagecount	testdocs/sqlite3.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:
btreeParseCell	testdocs/sqlite3.c	/^static void btreeParseCell($/;"	f	file:
btreeParseCellAdjustSizeForOverflow	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void btreeParseCellAdjustSizeForOverflow($/;"	f	file:
btreeParseCellPtr	testdocs/sqlite3.c	/^static void btreeParseCellPtr($/;"	f	file:
btreeParseCellPtrIndex	testdocs/sqlite3.c	/^static void btreeParseCellPtrIndex($/;"	f	file:
btreeParseCellPtrNoPayload	testdocs/sqlite3.c	/^static void btreeParseCellPtrNoPayload($/;"	f	file:
btreePrevious	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int btreePrevious(BtCursor *pCur, int *pRes){$/;"	f	file:
btreeReleaseAllCursorPages	testdocs/sqlite3.c	/^static void btreeReleaseAllCursorPages(BtCursor *pCur){$/;"	f	file:
btreeRestoreCursorPosition	testdocs/sqlite3.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:
btreeSetHasContent	testdocs/sqlite3.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btsFlags	testdocs/sqlite3.c	/^  u16 btsFlags;         \/* Boolean parameters.  See BTS_* macros below *\/$/;"	m	struct:BtShared	file:
btterm	testdocs/sqlite3.c	/^  Fts5Buffer btterm;              \/* Next term to insert into %_idx table *\/$/;"	m	struct:Fts5SegWriter	file:
buf	edit.h	/^    uint8_t* buf; \/* memory mapped byte buffer *\/$/;"	m	struct:__anon1
buf	testdocs/sqlite3.c	/^  Fts5Buffer buf;                 \/* Buffer containing leaf data *\/$/;"	m	struct:Fts5PageWriter	file:
buf	testdocs/sqlite3.c	/^  Fts5Buffer buf;                 \/* Buffer containing page data *\/$/;"	m	struct:Fts5DlidxWriter	file:
buf	testdocs/sqlite3.c	/^  SessionBuffer buf;              \/* Current read buffer *\/$/;"	m	struct:SessionInput	file:
buf_bol	buf.c	/^size_t buf_bol(Buf* buf, size_t off) {$/;"	f
buf_bow	buf.c	/^size_t buf_bow(Buf* buf, size_t off) {$/;"	f
buf_byline	buf.c	/^size_t buf_byline(Buf* buf, size_t pos, int count) {$/;"	f
buf_byrune	buf.c	/^size_t buf_byrune(Buf* buf, size_t pos, int count) {$/;"	f
buf_byword	buf.c	/^size_t buf_byword(Buf* buf, size_t off, int count) {$/;"	f
buf_change	buf.c	/^size_t buf_change(Buf* buf, size_t beg, size_t end) {$/;"	f
buf_chomp	buf.c	/^void buf_chomp(Buf* buf) {$/;"	f
buf_delete	buf.c	/^size_t buf_delete(Buf* buf, size_t beg, size_t end) {$/;"	f
buf_end	buf.c	/^size_t buf_end(Buf* buf) {$/;"	f
buf_eol	buf.c	/^size_t buf_eol(Buf* buf, size_t off) {$/;"	f
buf_eow	buf.c	/^size_t buf_eow(Buf* buf, size_t off) {$/;"	f
buf_findstr	buf.c	/^void buf_findstr(Buf* buf, int dir, char* str, size_t* beg, size_t* end) {$/;"	f
buf_get	buf.c	/^Rune buf_get(Buf* buf, size_t off) {$/;"	f
buf_getblock	buf.c	/^void buf_getblock(Buf* buf, Rune first, Rune last, Sel* sel) {$/;"	f
buf_getcol	buf.c	/^size_t buf_getcol(Buf* buf, size_t pos) {$/;"	f
buf_getln	buf.c	/^size_t buf_getln(Buf* buf, size_t off) {$/;"	f
buf_getword	buf.c	/^void buf_getword(Buf* buf, bool (*isword)(Rune), Sel* sel) {$/;"	f
buf_init	buf.c	/^void buf_init(Buf* buf, void (*errfn)(char*)) {$/;"	f
buf_insert	buf.c	/^size_t buf_insert(Buf* buf, bool fmt, size_t off, Rune rune) {$/;"	f
buf_iseol	buf.c	/^bool buf_iseol(Buf* buf, size_t off) {$/;"	f
buf_lastins	buf.c	/^void buf_lastins(Buf* buf, size_t* beg, size_t* end) {$/;"	f
buf_load	buf.c	/^size_t buf_load(Buf* buf, char* path) {$/;"	f
buf_logclear	buf.c	/^void buf_logclear(Buf* buf) {$/;"	f
buf_loglock	buf.c	/^void buf_loglock(Buf* buf) {$/;"	f
buf_lscan	buf.c	/^size_t buf_lscan(Buf* buf, size_t pos, Rune r) {$/;"	f
buf_redo	buf.c	/^void buf_redo(Buf* buf, Sel* sel) {$/;"	f
buf_reload	buf.c	/^void buf_reload(Buf* buf) {$/;"	f
buf_resize	buf.c	/^static void buf_resize(Buf* buf, size_t sz) {$/;"	f	file:
buf_rscan	buf.c	/^size_t buf_rscan(Buf* buf, size_t pos, Rune r) {$/;"	f
buf_save	buf.c	/^void buf_save(Buf* buf) {$/;"	f
buf_setcol	buf.c	/^size_t buf_setcol(Buf* buf, size_t pos, size_t col) {$/;"	f
buf_setln	buf.c	/^size_t buf_setln(Buf* buf, size_t line) {$/;"	f
buf_text_eq	testbuf.c	/^static bool buf_text_eq(char* str) {$/;"	f	file:
buf_undo	buf.c	/^void buf_undo(Buf* buf, Sel* sel) {$/;"	f
bufend	edit.h	/^    Rune* bufend;         \/* end of the data buffer *\/$/;"	m	struct:__anon5
bufsize	edit.h	/^    size_t bufsize;       \/* size of the buffer in runes *\/$/;"	m	struct:__anon5
bufstart	edit.h	/^    Rune* bufstart;       \/* start of the data buffer *\/$/;"	m	struct:__anon5
busy	testdocs/sqlite3.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
busyHandler	testdocs/sqlite3.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	file:
busyTimeout	testdocs/sqlite3.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	file:
busy_handler	testdocs/sqlite3.c	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
busy_timeout	testdocs/sqlite3.c	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	file:
cId	testdocs/sqlite3.c	/^  char cId;             \/* Symbolic ID of this loop for debugging use *\/$/;"	m	struct:WhereLoop	file:
cType	testdocs/sqlite3.c	/^static const char cType[] = {$/;"	v	file:
cacheCtr	testdocs/sqlite3.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	file:
cacheEntryClear	testdocs/sqlite3.c	/^static void cacheEntryClear(Parse *pParse, int i){$/;"	f	file:
cacheStatus	testdocs/sqlite3.c	/^  u32 cacheStatus;        \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	file:
cache_size	testdocs/sqlite3.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	file:
cachedCellSize	testdocs/sqlite3.c	/^static u16 cachedCellSize(CellArray *p, int N){$/;"	f	file:
callCollNeeded	testdocs/sqlite3.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:
callFinaliser	testdocs/sqlite3.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:
callStatGet	testdocs/sqlite3.c	/^static void callStatGet(Vdbe *v, int regStat4, int iParam, int regOut){$/;"	f	file:
cancel_auto_extension	testdocs/sqlite3.c	/^  int (*cancel_auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:
cannotBeFunction	testdocs/sqlite3.c	/^static int cannotBeFunction(Parse *pParse, struct SrcList_item *pFrom){$/;"	f	file:
cb	testdocs/sqlite3.c	/^  RtreeGeomCallback cb;       \/* Info about the callback functions *\/$/;"	m	struct:RtreeMatchArg	file:
cdateFunc	testdocs/sqlite3.c	/^static void cdateFunc($/;"	f	file:
cellArea	testdocs/sqlite3.c	/^static RtreeDValue cellArea(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellContains	testdocs/sqlite3.c	/^static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cellGrowth	testdocs/sqlite3.c	/^static RtreeDValue cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){$/;"	f	file:
cellMargin	testdocs/sqlite3.c	/^static RtreeDValue cellMargin(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellOffset	testdocs/sqlite3.c	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage	file:
cellOverlap	testdocs/sqlite3.c	/^static RtreeDValue cellOverlap($/;"	f	file:
cellSize	testdocs/sqlite3.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:
cellSizePtr	testdocs/sqlite3.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellSizePtrNoPayload	testdocs/sqlite3.c	/^static u16 cellSizePtrNoPayload(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellUnion	testdocs/sqlite3.c	/^static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
chain	testdocs/sqlite3.c	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
chain	testdocs/sqlite3.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	file:
changeCntOn	testdocs/sqlite3.c	/^  bft changeCntOn:1;      \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	file:
changeCountDone	testdocs/sqlite3.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:
changeTempStorage	testdocs/sqlite3.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:
changes	testdocs/sqlite3.c	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
changes	testdocs/sqlite3.c	/^static void changes($/;"	f	file:
charFunc	testdocs/sqlite3.c	/^static void charFunc($/;"	f	file:
charMap	testdocs/sqlite3.c	/^# define charMap(/;"	d	file:
charset	testdocs/sqlite3.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:
charstorunes	buf.c	/^Rune* charstorunes(char* str) {$/;"	f
check	stdc.h	/^#define check(/;"	d
checkActiveVdbeCnt	testdocs/sqlite3.c	/^#define checkActiveVdbeCnt(/;"	d	file:
checkActiveVdbeCnt	testdocs/sqlite3.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:
checkAppendMsg	testdocs/sqlite3.c	/^static void checkAppendMsg($/;"	f	file:
checkColumnOverlap	testdocs/sqlite3.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:
checkConstraintExprNode	testdocs/sqlite3.c	/^static int checkConstraintExprNode(Walker *pWalker, Expr *pExpr){$/;"	f	file:
checkConstraintUnchanged	testdocs/sqlite3.c	/^static int checkConstraintUnchanged(Expr *pExpr, int *aiChng, int chngRowid){$/;"	f	file:
checkList	testdocs/sqlite3.c	/^static void checkList($/;"	f	file:
checkListProperties	testdocs/sqlite3.c	/^# define checkListProperties(/;"	d	file:
checkListProperties	testdocs/sqlite3.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:
checkPage	testdocs/sqlite3.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:
checkProfileCallback	testdocs/sqlite3.c	/^# define checkProfileCallback(/;"	d	file:
checkPtrmap	testdocs/sqlite3.c	/^static void checkPtrmap($/;"	f	file:
checkReadTransaction	testdocs/sqlite3.c	/^static int checkReadTransaction(sqlite3 *db, Btree *p){$/;"	f	file:
checkRef	testdocs/sqlite3.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage){$/;"	f	file:
checkSavepointCount	testdocs/sqlite3.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:
checkSchema	testdocs/sqlite3.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	file:
checkTreePage	testdocs/sqlite3.c	/^static int checkTreePage($/;"	f	file:
childPtrSize	testdocs/sqlite3.c	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage	file:
ckBase	testdocs/sqlite3.c	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse	file:
ckptLock	testdocs/sqlite3.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:
ckptSyncFlags	testdocs/sqlite3.c	/^  u8 ckptSyncFlags;           \/* SYNC_NORMAL or SYNC_FULL for checkpoint *\/$/;"	m	struct:Pager	file:
cksum	testdocs/sqlite3.c	/^  u64 cksum;$/;"	m	struct:Fts5IntegrityCtx	file:
cksumInit	testdocs/sqlite3.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:
clearAllSharedCacheTableLocks	testdocs/sqlite3.c	/^  #define clearAllSharedCacheTableLocks(/;"	d	file:
clearAllSharedCacheTableLocks	testdocs/sqlite3.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
clearCell	testdocs/sqlite3.c	/^static int clearCell($/;"	f	file:
clearDatabasePage	testdocs/sqlite3.c	/^static int clearDatabasePage($/;"	f	file:
clearSelect	testdocs/sqlite3.c	/^static void clearSelect(sqlite3 *db, Select *p, int bFree){$/;"	f	file:
clearYMD_HMS_TZ	testdocs/sqlite3.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:
clear_bindings	testdocs/sqlite3.c	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
close	testdocs/sqlite3.c	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
closeAllCursors	testdocs/sqlite3.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:
closeCursorsInFrame	testdocs/sqlite3.c	/^static void closeCursorsInFrame(Vdbe *p){$/;"	f	file:
closePendingFds	testdocs/sqlite3.c	/^static void closePendingFds(unixFile *pFile){$/;"	f	file:
closeUnixFile	testdocs/sqlite3.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:
close_v2	testdocs/sqlite3.c	/^  int (*close_v2)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
cnt	testdocs/sqlite3.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:
cnt	testdocs/sqlite3.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:
cnt	testdocs/sqlite3.c	/^  u32 cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	file:
codeAllEqualityTerms	testdocs/sqlite3.c	/^static int codeAllEqualityTerms($/;"	f	file:
codeApplyAffinity	testdocs/sqlite3.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:
codeAttach	testdocs/sqlite3.c	/^static void codeAttach($/;"	f	file:
codeCompare	testdocs/sqlite3.c	/^static int codeCompare($/;"	f	file:
codeCursorHint	testdocs/sqlite3.c	/^# define codeCursorHint(/;"	d	file:
codeCursorHint	testdocs/sqlite3.c	/^static void codeCursorHint($/;"	f	file:
codeCursorHintCheckExpr	testdocs/sqlite3.c	/^static int codeCursorHintCheckExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
codeCursorHintFixExpr	testdocs/sqlite3.c	/^static int codeCursorHintFixExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
codeCursorHintIsOrFunction	testdocs/sqlite3.c	/^static int codeCursorHintIsOrFunction(Walker *pWalker, Expr *pExpr){$/;"	f	file:
codeDeferredSeek	testdocs/sqlite3.c	/^static void codeDeferredSeek($/;"	f	file:
codeDistinct	testdocs/sqlite3.c	/^static void codeDistinct($/;"	f	file:
codeEqualityTerm	testdocs/sqlite3.c	/^static int codeEqualityTerm($/;"	f	file:
codeExprOrVector	testdocs/sqlite3.c	/^static void codeExprOrVector(Parse *pParse, Expr *p, int iReg, int nReg){$/;"	f	file:
codeInteger	testdocs/sqlite3.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:
codeOffset	testdocs/sqlite3.c	/^static void codeOffset($/;"	f	file:
codeReal	testdocs/sqlite3.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:
codeRowTrigger	testdocs/sqlite3.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:
codeTableLocks	testdocs/sqlite3.c	/^  #define codeTableLocks(/;"	d	file:
codeTableLocks	testdocs/sqlite3.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:
codeTriggerProgram	testdocs/sqlite3.c	/^static int codeTriggerProgram($/;"	f	file:
codeVectorCompare	testdocs/sqlite3.c	/^static void codeVectorCompare($/;"	f	file:
col	edit.h	/^    size_t col;$/;"	m	struct:__anon6
colFlags	testdocs/sqlite3.c	/^  u8 colFlags;     \/* Boolean properties.  See COLFLAG_ defines below *\/$/;"	m	struct:Column	file:
colNamesSet	testdocs/sqlite3.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	file:
colUsed	testdocs/sqlite3.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	file:
colUsed	testdocs/sqlite3.c	/^  sqlite3_uint64 colUsed;    \/* Input: Mask of columns used by statement *\/$/;"	m	struct:sqlite3_index_info	file:
collationMatch	testdocs/sqlite3.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:
collation_needed	testdocs/sqlite3.c	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
collation_needed16	testdocs/sqlite3.c	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
columnIndex	testdocs/sqlite3.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:
columnMallocFailure	testdocs/sqlite3.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:
columnMem	testdocs/sqlite3.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:
columnName	testdocs/sqlite3.c	/^static const void *columnName($/;"	f	file:
columnNullValue	testdocs/sqlite3.c	/^static const Mem *columnNullValue(void){$/;"	f	file:
columnType	testdocs/sqlite3.c	/^# define columnType(/;"	d	file:
columnTypeImpl	testdocs/sqlite3.c	/^static const char *columnTypeImpl($/;"	f	file:
column_blob	testdocs/sqlite3.c	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes	testdocs/sqlite3.c	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes16	testdocs/sqlite3.c	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_count	testdocs/sqlite3.c	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name	testdocs/sqlite3.c	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name16	testdocs/sqlite3.c	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype	testdocs/sqlite3.c	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype16	testdocs/sqlite3.c	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_double	testdocs/sqlite3.c	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int	testdocs/sqlite3.c	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int64	testdocs/sqlite3.c	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_name	testdocs/sqlite3.c	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_name16	testdocs/sqlite3.c	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name	testdocs/sqlite3.c	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name16	testdocs/sqlite3.c	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name	testdocs/sqlite3.c	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name16	testdocs/sqlite3.c	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_text	testdocs/sqlite3.c	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_text16	testdocs/sqlite3.c	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_type	testdocs/sqlite3.c	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_value	testdocs/sqlite3.c	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
columnsInIndex	testdocs/sqlite3.c	/^static Bitmask columnsInIndex(Index *pIdx){$/;"	f	file:
commit_hook	testdocs/sqlite3.c	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
compare2pow63	testdocs/sqlite3.c	/^static int compare2pow63(const char *zNum, int incr){$/;"	f	file:
compareInfo	testdocs/sqlite3.c	/^struct compareInfo {$/;"	s	file:
comparisonAffinity	testdocs/sqlite3.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:
compileoption_get	testdocs/sqlite3.c	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	file:
compileoption_used	testdocs/sqlite3.c	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
compileoptiongetFunc	testdocs/sqlite3.c	/^static void compileoptiongetFunc($/;"	f	file:
compileoptionusedFunc	testdocs/sqlite3.c	/^static void compileoptionusedFunc($/;"	f	file:
complete	testdocs/sqlite3.c	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	file:
complete16	testdocs/sqlite3.c	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	file:
computeCellSize	testdocs/sqlite3.c	/^static SQLITE_NOINLINE u16 computeCellSize(CellArray *p, int N){$/;"	f	file:
computeHMS	testdocs/sqlite3.c	/^static void computeHMS(DateTime *p){$/;"	f	file:
computeJD	testdocs/sqlite3.c	/^static void computeJD(DateTime *p){$/;"	f	file:
computeLimitRegisters	testdocs/sqlite3.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:
computeNumericType	testdocs/sqlite3.c	/^static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){$/;"	f	file:
computeYMD	testdocs/sqlite3.c	/^static void computeYMD(DateTime *p){$/;"	f	file:
computeYMD_HMS	testdocs/sqlite3.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:
concat	stdc.h	/^#define concat(/;"	d
conchFile	testdocs/sqlite3.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchFilePath	testdocs/sqlite3.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchHeld	testdocs/sqlite3.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:
connectionIsBusy	testdocs/sqlite3.c	/^static int connectionIsBusy(sqlite3 *db){$/;"	f	file:
constraintName	testdocs/sqlite3.c	/^  Token constraintName;\/* Name of the constraint currently being parsed *\/$/;"	m	struct:Parse	file:
constraints	testdocs/sqlite3.c	/^  SessionBuffer constraints;      \/* Deferred constraints are stored here *\/$/;"	m	struct:SessionApplyCtx	file:
constructAutomaticIndex	testdocs/sqlite3.c	/^static void constructAutomaticIndex($/;"	f	file:
container_of	stdc.h	/^    #define container_of(/;"	d
contextMalloc	testdocs/sqlite3.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:
context_db_handle	testdocs/sqlite3.c	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
convertCompoundSelectToSubquery	testdocs/sqlite3.c	/^static int convertCompoundSelectToSubquery(Walker *pWalker, Select *p){$/;"	f	file:
convertToWithoutRowidTable	testdocs/sqlite3.c	/^static void convertToWithoutRowidTable(Parse *pParse, Table *pTab){$/;"	f	file:
cookieMask	testdocs/sqlite3.c	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	file:
copyKey	testdocs/sqlite3.c	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash	file:
copyNodeContent	testdocs/sqlite3.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:
copyPayload	testdocs/sqlite3.c	/^static int copyPayload($/;"	f	file:
copy_stemmer	testdocs/sqlite3.c	/^static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
corruptSchema	testdocs/sqlite3.c	/^static void corruptSchema($/;"	f	file:
costMult	testdocs/sqlite3.c	/^  LogEst costMult;     \/* Cost multiplier for using this table *\/$/;"	m	struct:Table	file:
count	testdocs/sqlite3.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	file:
count	testdocs/sqlite3.c	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
count	testdocs/sqlite3.c	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash	file:
count	testdocs/sqlite3.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	file:
countFinalize	testdocs/sqlite3.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:
countStep	testdocs/sqlite3.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
countValidCursors	testdocs/sqlite3.c	/^static int countValidCursors(BtShared *pBt, int wrOnly){$/;"	f	file:
covered	testdocs/sqlite3.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:
createAggContext	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void *createAggContext(sqlite3_context *p, int nByte){$/;"	f	file:
createCollation	testdocs/sqlite3.c	/^static int createCollation($/;"	f	file:
createMask	testdocs/sqlite3.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
createModule	testdocs/sqlite3.c	/^static int createModule($/;"	f	file:
createTableStmt	testdocs/sqlite3.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:
create_collation	testdocs/sqlite3.c	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation16	testdocs/sqlite3.c	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation_v2	testdocs/sqlite3.c	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function	testdocs/sqlite3.c	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function16	testdocs/sqlite3.c	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function_v2	testdocs/sqlite3.c	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_module	testdocs/sqlite3.c	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	file:
create_module_v2	testdocs/sqlite3.c	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,$/;"	m	struct:sqlite3_api_routines	file:
crlf	edit.h	/^    int crlf;             \/* tracks whether the file uses dos style line endings *\/$/;"	m	struct:__anon5
csr	testdocs/sqlite3.c	/^  Fts3MultiSegReader csr;        \/* Must be right after "base" *\/$/;"	m	struct:Fts3auxCursor	file:
csrflags	testdocs/sqlite3.c	/^  int csrflags;                   \/* Mask of cursor flags (see below) *\/$/;"	m	struct:Fts5Cursor	file:
ctimeFunc	testdocs/sqlite3.c	/^static void ctimeFunc($/;"	f	file:
ctimestampFunc	testdocs/sqlite3.c	/^static void ctimestampFunc($/;"	f	file:
ctrlFlags	testdocs/sqlite3.c	/^  u8 ctrlFlags;           \/* Flags.  See WINFILE_* below *\/$/;"	m	struct:winFile	file:
ctrlFlags	testdocs/sqlite3.c	/^  unsigned short int ctrlFlags;       \/* Behavioral bits.  UNIXFILE_* flags *\/$/;"	m	struct:unixFile	file:
curFlags	testdocs/sqlite3.c	/^  u8 curFlags;              \/* zero or more BTCF_* flags defined below *\/$/;"	m	struct:BtCursor	file:
curIntKey	testdocs/sqlite3.c	/^  u8 curIntKey;             \/* Value of apPage[0]->intKey *\/$/;"	m	struct:BtCursor	file:
curPagerFlags	testdocs/sqlite3.c	/^  u8 curPagerFlags;         \/* Flags to send to sqlite3PagerGet() *\/$/;"	m	struct:BtCursor	file:
current	testdocs/sqlite3.c	/^  Stat4Sample current;      \/* Current row as a Stat4Sample *\/$/;"	m	struct:Stat4Accum	file:
currentCount	testdocs/sqlite3.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:
currentOut	testdocs/sqlite3.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
currentTimeFunc	testdocs/sqlite3.c	/^static void currentTimeFunc($/;"	f	file:
cursorHoldsMutex	testdocs/sqlite3.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:
cursorOwnsBtShared	testdocs/sqlite3.c	/^static int cursorOwnsBtShared(BtCursor *p){$/;"	f	file:
cwd	testdocs/waf	/^cwd = os.getcwd()$/;"	v
cycles	testdocs/sqlite3.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	file:
data	edit.h	/^    } data;$/;"	m	struct:Log	typeref:union:Log::__anon2
data	testdocs/sqlite3.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	file:
data	testdocs/sqlite3.c	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
data_count	testdocs/sqlite3.c	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
databaseIsUnmoved	testdocs/sqlite3.c	/^static int databaseIsUnmoved(Pager *pPager){$/;"	f	file:
dateFunc	testdocs/sqlite3.c	/^static void dateFunc($/;"	f	file:
datetimeError	testdocs/sqlite3.c	/^static void datetimeError(DateTime *p){$/;"	f	file:
datetimeFunc	testdocs/sqlite3.c	/^static void datetimeFunc($/;"	f	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;                    \/* Associated database connection *\/$/;"	m	struct:Fts5Global	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;                    \/* Database connection *\/$/;"	m	struct:VdbeSorter	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;                    \/* Database handle *\/$/;"	m	struct:Fts5Config	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;                    \/* Database handle *\/$/;"	m	struct:Fts5VocabTable	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;                    \/* Database handle session is attached to *\/$/;"	m	struct:sqlite3_session	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;              \/* Database connection, for malloc() *\/$/;"	m	struct:Stat4Accum	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;              \/* The database connection to which it belongs *\/$/;"	m	struct:PragmaVtab	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:sqlite3_value	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon16	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:SessionApplyCtx	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:StatTable	file:
db	testdocs/sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:
dbFileSize	testdocs/sqlite3.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:
dbFileVers	testdocs/sqlite3.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:
dbHintSize	testdocs/sqlite3.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:
dbMain	testdocs/sqlite3.c	/^  sqlite3 *dbMain;                \/* target database handle *\/$/;"	m	struct:sqlite3rbu	file:
dbMallocRawFinish	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void *dbMallocRawFinish(sqlite3 *db, u64 n){$/;"	f	file:
dbOptFlags	testdocs/sqlite3.c	/^  u16 dbOptFlags;               \/* Flags to enable\/disable optimizations *\/$/;"	m	struct:sqlite3	file:
dbOrigSize	testdocs/sqlite3.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:
dbPath	testdocs/sqlite3.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:
dbPath	testdocs/sqlite3.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:
dbRbu	testdocs/sqlite3.c	/^  sqlite3 *dbRbu;                 \/* rbu database handle *\/$/;"	m	struct:sqlite3rbu	file:
dbReallocFinish	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void *dbReallocFinish(sqlite3 *db, void *p, u64 n){$/;"	f	file:
dbSize	testdocs/sqlite3.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:
dbUpdate	testdocs/sqlite3.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:
db_cacheflush	testdocs/sqlite3.c	/^  int (*db_cacheflush)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_config	testdocs/sqlite3.c	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	file:
db_filename	testdocs/sqlite3.c	/^  const char *(*db_filename)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
db_handle	testdocs/sqlite3.c	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
db_mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_readonly	testdocs/sqlite3.c	/^  int (*db_readonly)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
db_release_memory	testdocs/sqlite3.c	/^  int (*db_release_memory)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_status	testdocs/sqlite3.c	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
debug	stdc.h	/^    #define debug(/;"	d
debugMutexAlloc	testdocs/sqlite3.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:
debugMutexEnd	testdocs/sqlite3.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexEnter	testdocs/sqlite3.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:
debugMutexFree	testdocs/sqlite3.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:
debugMutexHeld	testdocs/sqlite3.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexInit	testdocs/sqlite3.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexLeave	testdocs/sqlite3.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:
debugMutexNotheld	testdocs/sqlite3.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexTry	testdocs/sqlite3.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:
declareVtab	testdocs/sqlite3.c	/^  u8 declareVtab;           \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	file:
declare_vtab	testdocs/sqlite3.c	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
decodeFlags	testdocs/sqlite3.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:
decodeIntArray	testdocs/sqlite3.c	/^static void decodeIntArray($/;"	f	file:
default_rc	testdocs/sqlite3.c	/^  i8 default_rc;      \/* Comparison result if keys are equal *\/$/;"	m	struct:UnpackedRecord	file:
deferredMoveto	testdocs/sqlite3.c	/^  u8 deferredMoveto;      \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	file:
defragmentPage	testdocs/sqlite3.c	/^static int defragmentPage(MemPage *pPage, int nMaxFrag){$/;"	f	file:
del	edit.h	/^        } del;$/;"	m	union:Log::__anon2	typeref:struct:Log::__anon2::__anon4
delete	buf.c	/^static void delete(Buf* buf, size_t off) {$/;"	f	file:
deleteCell	testdocs/sqlite3.c	/^static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){$/;"	f	file:
deleteTable	testdocs/sqlite3.c	/^static void SQLITE_NOINLINE deleteTable(sqlite3 *db, Table *pTable){$/;"	f	file:
delim	testdocs/sqlite3.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:
desc	testdocs/sqlite3.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
deserializeGeometry	testdocs/sqlite3.c	/^static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){$/;"	f	file:
destroyRootPage	testdocs/sqlite3.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:
destroyTable	testdocs/sqlite3.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:
detachFunc	testdocs/sqlite3.c	/^static void detachFunc($/;"	f	file:
dev	testdocs/sqlite3.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:
deviceCharacteristics	testdocs/sqlite3.c	/^  int deviceCharacteristics;          \/* Precomputed device characteristics *\/$/;"	m	struct:unixFile	file:
dfltLockMode	testdocs/sqlite3.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	file:
die	buf.c	/^void die(const char* msgfmt, ...) {$/;"	f
directMode	testdocs/sqlite3.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	file:
disableLookaside	testdocs/sqlite3.c	/^  u8 disableLookaside; \/* Number of times lookaside has been disabled *\/$/;"	m	struct:Parse	file:
disableLookaside	testdocs/sqlite3.c	/^static void disableLookaside(Parse *pParse){$/;"	f	file:
disableTerm	testdocs/sqlite3.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:
disableTriggers	testdocs/sqlite3.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	file:
disable_simulated_io_errors	testdocs/sqlite3.c	/^# define disable_simulated_io_errors(/;"	d	file:
disable_simulated_io_errors	testdocs/sqlite3.c	/^void disable_simulated_io_errors(void){$/;"	f
disallow	testdocs/sqlite3.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon20	file:
disconnectAllVtab	testdocs/sqlite3.c	/^static void disconnectAllVtab(sqlite3 *db){$/;"	f	file:
displayComment	testdocs/sqlite3.c	/^static int displayComment($/;"	f	file:
displayP4	testdocs/sqlite3.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:
displayP4Expr	testdocs/sqlite3.c	/^static void displayP4Expr(StrAccum *p, Expr *pExpr){$/;"	f	file:
doNotSpill	testdocs/sqlite3.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:
doWalCallbacks	testdocs/sqlite3.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:
doclist	testdocs/sqlite3.c	/^  Fts3Doclist doclist;$/;"	m	struct:Fts3Phrase	file:
doingRerun	testdocs/sqlite3.c	/^  bft doingRerun:1;       \/* True if rerunning after an auto-reprepare *\/$/;"	m	struct:Vdbe	file:
done	testdocs/sqlite3.c	/^    unsigned done :1;       \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	file:
done	testdocs/sqlite3.c	/^  int done;                      \/* Set to true when thread finishes *\/$/;"	m	struct:SQLiteThread	file:
dotlockCheckReservedLock	testdocs/sqlite3.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
dotlockClose	testdocs/sqlite3.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:
dotlockLock	testdocs/sqlite3.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
dotlockUnlock	testdocs/sqlite3.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
double	testdocs/sqlite3.c	/^# define double /;"	d	file:
double	testdocs/sqlite3.c	/^# undef double$/;"	d	file:
doubleConsonant	testdocs/sqlite3.c	/^static int doubleConsonant(const char *z){$/;"	f	file:
doubleToInt64	testdocs/sqlite3.c	/^static SQLITE_NOINLINE i64 doubleToInt64(double r){$/;"	f	file:
downgradeAllSharedCacheTableLocks	testdocs/sqlite3.c	/^  #define downgradeAllSharedCacheTableLocks(/;"	d	file:
downgradeAllSharedCacheTableLocks	testdocs/sqlite3.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
dropCell	testdocs/sqlite3.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:
dupedExprNodeSize	testdocs/sqlite3.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:
dupedExprSize	testdocs/sqlite3.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:
dupedExprStructSize	testdocs/sqlite3.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:
eCode	testdocs/sqlite3.c	/^  u8 eCode;                                 \/* A small processing code *\/$/;"	m	struct:Walker	file:
eContent	testdocs/sqlite3.c	/^  int eContent;                   \/* An FTS5_CONTENT value *\/$/;"	m	struct:Fts5Config	file:
eCoordType	testdocs/sqlite3.c	/^  u8 eCoordType;              \/* RTREE_COORD_REAL32 or RTREE_COORD_INT32 *\/$/;"	m	struct:Rtree	file:
eCreate	testdocs/sqlite3.c	/^  u8 eCreate;                         \/* eCreate value for for xFetch() *\/$/;"	m	struct:PCache	file:
eCurType	testdocs/sqlite3.c	/^  u8 eCurType;            \/* One of the CURTYPE_* values above *\/$/;"	m	struct:VdbeCursor	file:
eDest	testdocs/sqlite3.c	/^  u8 eDest;            \/* How to dispose of the results.  On of SRT_* above. *\/$/;"	m	struct:SelectDest	file:
eDetail	testdocs/sqlite3.c	/^  int eDetail;                    \/* Copy of Fts5Config.eDetail *\/$/;"	m	struct:Fts5Hash	file:
eDetail	testdocs/sqlite3.c	/^  int eDetail;                    \/* FTS5_DETAIL_XXX value *\/$/;"	m	struct:Fts5Config	file:
eDistinct	testdocs/sqlite3.c	/^  u8 eDistinct;             \/* One of the WHERE_DISTINCT_* values *\/$/;"	m	struct:WhereInfo	file:
eEndLoopOp	testdocs/sqlite3.c	/^        u8 eEndLoopOp;         \/* IN Loop terminator. OP_Next or OP_Prev *\/$/;"	m	struct:WhereLevel::__anon27::__anon28::InLoop	file:
eEvalmode	testdocs/sqlite3.c	/^  int eEvalmode;                  \/* An FTS3_EVAL_XX constant *\/$/;"	m	struct:Fts3Cursor	file:
eFWErr	testdocs/sqlite3.c	/^  int eFWErr;                     \/* Non-zero if in an error state *\/$/;"	m	struct:PmaWriter	file:
eFileLock	testdocs/sqlite3.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:
eFileLock	testdocs/sqlite3.c	/^  unsigned char eFileLock;        \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:
eLock	testdocs/sqlite3.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:
eLock	testdocs/sqlite3.c	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock	file:
eMatchOp	testdocs/sqlite3.c	/^  u8 eMatchOp;            \/* Op for vtab MATCH\/LIKE\/GLOB\/REGEXP terms *\/$/;"	m	struct:WhereTerm	file:
eOnePass	testdocs/sqlite3.c	/^  u8 eOnePass;              \/* ONEPASS_OFF, or _SINGLE, or _MULTI *\/$/;"	m	struct:WhereInfo	file:
eOperator	testdocs/sqlite3.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:
eOrconf	testdocs/sqlite3.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	file:
eParentWithin	testdocs/sqlite3.c	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
ePlan	testdocs/sqlite3.c	/^  int ePlan;                      \/* FTS5_PLAN_XXX value *\/$/;"	m	struct:Fts5Cursor	file:
ePragTyp	testdocs/sqlite3.c	/^  u8 ePragTyp;             \/* PragTyp_XXX value *\/$/;"	m	struct:PragmaName	file:
eSearch	testdocs/sqlite3.c	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor	file:
eStage	testdocs/sqlite3.c	/^  int eStage;                     \/* Value of RBU_STATE_STAGE field *\/$/;"	m	struct:sqlite3rbu	file:
eStage	testdocs/sqlite3.c	/^  int eStage;$/;"	m	struct:RbuState	file:
eState	testdocs/sqlite3.c	/^  int eState;                     \/* 0==closed, 1==open, 2==synced *\/$/;"	m	struct:Fts5TransactionState	file:
eState	testdocs/sqlite3.c	/^  int eState;                     \/* See above *\/$/;"	m	struct:PoslistCallbackCtx	file:
eState	testdocs/sqlite3.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:
eState	testdocs/sqlite3.c	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor	file:
eSubtype	testdocs/sqlite3.c	/^  u8  eSubtype;       \/* Subtype for this value *\/$/;"	m	struct:sqlite3_value	file:
eTnctType	testdocs/sqlite3.c	/^  u8 eTnctType;   \/* One of the WHERE_DISTINCT_* operators *\/$/;"	m	struct:DistinctCtx	file:
eTriggerOp	testdocs/sqlite3.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	file:
eType	testdocs/sqlite3.c	/^  int eType;                      \/* FTS5_VOCAB_COL or ROW *\/$/;"	m	struct:Fts5VocabTable	file:
eType	testdocs/sqlite3.c	/^  int eType;                      \/* Node type *\/$/;"	m	struct:Fts5ExprNode	file:
eType	testdocs/sqlite3.c	/^  int eType;                      \/* Table type - an RBU_PK_XXX value *\/$/;"	m	struct:RbuObjIter	file:
eType	testdocs/sqlite3.c	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr	file:
eType	testdocs/sqlite3.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:
eType	testdocs/sqlite3.c	/^  u8 eType;                  \/* Type of top-level element *\/$/;"	m	struct:JsonEachCursor	file:
eType	testdocs/sqlite3.c	/^  u8 eType;              \/* One of the JSON_ type values *\/$/;"	m	struct:JsonNode	file:
eType	testdocs/sqlite3.c	/^  u8 eType;           \/* Transformation type code *\/$/;"	m	struct:__anon19	file:
eVal	testdocs/sqlite3.c	/^  int eVal;$/;"	m	struct:Fts5Enum	file:
eWithin	testdocs/sqlite3.c	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
eWithin	testdocs/sqlite3.c	/^  u8 eWithin;            \/* PARTLY_WITHIN or FULLY_WITHIN *\/$/;"	m	struct:RtreeSearchPoint	file:
ebcdicToAscii	testdocs/sqlite3.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
editPage	testdocs/sqlite3.c	/^static int editPage($/;"	f	file:
enable_shared_cache	testdocs/sqlite3.c	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	file:
enable_simulated_io_errors	testdocs/sqlite3.c	/^# define enable_simulated_io_errors(/;"	d	file:
enable_simulated_io_errors	testdocs/sqlite3.c	/^void enable_simulated_io_errors(void){$/;"	f
enc	testdocs/sqlite3.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:sqlite3_value	file:
enc	testdocs/sqlite3.c	/^  u8 enc;                       \/* Text encoding *\/$/;"	m	struct:sqlite3	file:
enc	testdocs/sqlite3.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	file:
enc	testdocs/sqlite3.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	file:
enc	testdocs/sqlite3.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	file:
end	edit.h	/^            size_t end; \/* offset in the file where insertion ended *\/$/;"	m	struct:Log::__anon2::__anon3
end	edit.h	/^    size_t end;$/;"	m	struct:__anon6
endpoint	testdocs/sqlite3.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:
enlargeAndAppend	testdocs/sqlite3.c	/^static void SQLITE_NOINLINE enlargeAndAppend(StrAccum *p, const char *z, int N){$/;"	f	file:
enterMutex	testdocs/sqlite3.c	/^static void enterMutex(void){$/;"	f	file:
eqSeen	testdocs/sqlite3.c	/^  u8 eqSeen;          \/* True if an equality comparison has been seen *\/$/;"	m	struct:UnpackedRecord	file:
err	testdocs/waf	/^def err(m):$/;"	f
errCode	testdocs/sqlite3.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	file:
errCode	testdocs/sqlite3.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:
errCode	testdocs/sqlite3.c	/^  u8 errCode;         \/* Error detected by xRecordCompare (CORRUPT or NOMEM) *\/$/;"	m	struct:UnpackedRecord	file:
errMask	testdocs/sqlite3.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	file:
errMsg	testdocs/sqlite3.c	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk	file:
errcode	testdocs/sqlite3.c	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	file:
errfn	edit.h	/^    void (*errfn)(char*); \/* callback for error messages *\/$/;"	m	struct:__anon5
errlogFunc	testdocs/sqlite3.c	/^static void errlogFunc($/;"	f	file:
errmsg	testdocs/sqlite3.c	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errmsg16	testdocs/sqlite3.c	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errnostr	stdc.h	/^#define errnostr(/;"	d
errorAction	testdocs/sqlite3.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	file:
errstr	testdocs/sqlite3.c	/^  const char *(*errstr)(int);$/;"	m	struct:sqlite3_api_routines	file:
estLog	testdocs/sqlite3.c	/^static LogEst estLog(LogEst N){$/;"	f	file:
estimateIndexWidth	testdocs/sqlite3.c	/^static void estimateIndexWidth(Index *pIdx){$/;"	f	file:
estimateTableWidth	testdocs/sqlite3.c	/^static void estimateTableWidth(Table *pTab){$/;"	f	file:
estimatedCost	testdocs/sqlite3.c	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	file:
estimatedRows	testdocs/sqlite3.c	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	file:
etBUFSIZE	testdocs/sqlite3.c	/^#define etBUFSIZE /;"	d	file:
etByte	testdocs/sqlite3.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	testdocs/sqlite3.c	/^#define etCHARX /;"	d	file:
etDECIMAL	testdocs/sqlite3.c	/^#define etDECIMAL /;"	d	file:
etDYNSTRING	testdocs/sqlite3.c	/^#define etDYNSTRING /;"	d	file:
etEXP	testdocs/sqlite3.c	/^#define etEXP /;"	d	file:
etFLOAT	testdocs/sqlite3.c	/^#define etFLOAT /;"	d	file:
etGENERIC	testdocs/sqlite3.c	/^#define etGENERIC /;"	d	file:
etINVALID	testdocs/sqlite3.c	/^#define etINVALID /;"	d	file:
etORDINAL	testdocs/sqlite3.c	/^#define etORDINAL /;"	d	file:
etPERCENT	testdocs/sqlite3.c	/^#define etPERCENT /;"	d	file:
etPOINTER	testdocs/sqlite3.c	/^#define etPOINTER /;"	d	file:
etRADIX	testdocs/sqlite3.c	/^#define etRADIX /;"	d	file:
etSIZE	testdocs/sqlite3.c	/^#define etSIZE /;"	d	file:
etSQLESCAPE	testdocs/sqlite3.c	/^#define etSQLESCAPE /;"	d	file:
etSQLESCAPE2	testdocs/sqlite3.c	/^#define etSQLESCAPE2 /;"	d	file:
etSQLESCAPE3	testdocs/sqlite3.c	/^#define etSQLESCAPE3 /;"	d	file:
etSRCLIST	testdocs/sqlite3.c	/^#define etSRCLIST /;"	d	file:
etSTRING	testdocs/sqlite3.c	/^#define etSTRING /;"	d	file:
etTOKEN	testdocs/sqlite3.c	/^#define etTOKEN /;"	d	file:
et_getdigit	testdocs/sqlite3.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:
et_info	testdocs/sqlite3.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	testdocs/sqlite3.c	/^} et_info;$/;"	t	typeref:struct:et_info	file:
exclMask	testdocs/sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:
exclMask	testdocs/sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:
exclMask	testdocs/sqlite3.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:
exclusiveMode	testdocs/sqlite3.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:
exclusiveMode	testdocs/sqlite3.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:
exec	testdocs/sqlite3.c	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	file:
execSql	testdocs/sqlite3.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
execSqlF	testdocs/sqlite3.c	/^static int execSqlF(sqlite3 *db, char **pzErrMsg, const char *zSql, ...){$/;"	f	file:
expand_tabs	edit.h	/^    bool expand_tabs;     \/* tracks current mode *\/$/;"	m	struct:__anon5
expanded_sql	testdocs/sqlite3.c	/^  char *(*expanded_sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
expired	testdocs/sqlite3.c	/^  bft expired:1;          \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	file:
expired	testdocs/sqlite3.c	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
explain	testdocs/sqlite3.c	/^  bft explain:2;          \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	file:
explain	testdocs/sqlite3.c	/^  u8 explain;               \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	file:
explainAppendTerm	testdocs/sqlite3.c	/^static void explainAppendTerm($/;"	f	file:
explainComposite	testdocs/sqlite3.c	/^# define explainComposite(/;"	d	file:
explainComposite	testdocs/sqlite3.c	/^static void explainComposite($/;"	f	file:
explainIndexColumnName	testdocs/sqlite3.c	/^static const char *explainIndexColumnName(Index *pIdx, int i){$/;"	f	file:
explainIndexRange	testdocs/sqlite3.c	/^static void explainIndexRange(StrAccum *pStr, WhereLoop *pLoop){$/;"	f	file:
explainSetInteger	testdocs/sqlite3.c	/^# define explainSetInteger(/;"	d	file:
explainSimpleCount	testdocs/sqlite3.c	/^# define explainSimpleCount(/;"	d	file:
explainSimpleCount	testdocs/sqlite3.c	/^static void explainSimpleCount($/;"	f	file:
explainTempTable	testdocs/sqlite3.c	/^# define explainTempTable(/;"	d	file:
explainTempTable	testdocs/sqlite3.c	/^static void explainTempTable(Parse *pParse, const char *zUsage){$/;"	f	file:
expmask	testdocs/sqlite3.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	file:
exprAlwaysFalse	testdocs/sqlite3.c	/^static int exprAlwaysFalse(Expr *p){$/;"	f	file:
exprAlwaysTrue	testdocs/sqlite3.c	/^static int exprAlwaysTrue(Expr *p){$/;"	f	file:
exprAnalyze	testdocs/sqlite3.c	/^static void exprAnalyze($/;"	f	file:
exprAnalyzeOrTerm	testdocs/sqlite3.c	/^static void exprAnalyzeOrTerm($/;"	f	file:
exprCodeBetween	testdocs/sqlite3.c	/^static void exprCodeBetween($/;"	f	file:
exprCodeSubselect	testdocs/sqlite3.c	/^static int exprCodeSubselect(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprCodeVector	testdocs/sqlite3.c	/^static int exprCodeVector(Parse *pParse, Expr *p, int *piFreeable){$/;"	f	file:
exprCommute	testdocs/sqlite3.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprDup	testdocs/sqlite3.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int dupFlags, u8 **pzBuffer){$/;"	f	file:
exprINAffinity	testdocs/sqlite3.c	/^static char *exprINAffinity(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprIdxCover	testdocs/sqlite3.c	/^static int exprIdxCover(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprIsConst	testdocs/sqlite3.c	/^static int exprIsConst(Expr *p, int initFlag, int iCur){$/;"	f	file:
exprListDeleteNN	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void exprListDeleteNN(sqlite3 *db, ExprList *pList){$/;"	f	file:
exprMightBeIndexed	testdocs/sqlite3.c	/^static int exprMightBeIndexed($/;"	f	file:
exprMightBeIndexed2	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int exprMightBeIndexed2($/;"	f	file:
exprNodeIsConstant	testdocs/sqlite3.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprNodeIsConstantOrGroupBy	testdocs/sqlite3.c	/^static int exprNodeIsConstantOrGroupBy(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprNot	testdocs/sqlite3.c	/^  static void exprNot(Parse *pParse, int doNot, ExprSpan *pSpan){$/;"	f	file:
exprProbability	testdocs/sqlite3.c	/^static int exprProbability(Expr *p){$/;"	f	file:
exprSelectUsage	testdocs/sqlite3.c	/^static Bitmask exprSelectUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:
exprSetHeight	testdocs/sqlite3.c	/^#define exprSetHeight(/;"	d	file:
exprSetHeight	testdocs/sqlite3.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:
exprSrcCount	testdocs/sqlite3.c	/^static int exprSrcCount(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprStructSize	testdocs/sqlite3.c	/^static int exprStructSize(Expr *p){$/;"	f	file:
exprTableColumn	testdocs/sqlite3.c	/^static Expr *exprTableColumn($/;"	f	file:
exprTableRegister	testdocs/sqlite3.c	/^static Expr *exprTableRegister($/;"	f	file:
exprToRegister	testdocs/sqlite3.c	/^static void exprToRegister(Expr *p, int iReg){$/;"	f	file:
exprToString	testdocs/sqlite3.c	/^static char *exprToString(Fts3Expr *pExpr, char *zBuf){$/;"	f	file:
exprVectorRegister	testdocs/sqlite3.c	/^static int exprVectorRegister($/;"	f	file:
extended_errcode	testdocs/sqlite3.c	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
extended_result_codes	testdocs/sqlite3.c	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
extraSync	testdocs/sqlite3.c	/^  u8 extraSync;               \/* sync directory after journal delete *\/$/;"	m	struct:Pager	file:
f	testdocs/sqlite3.c	/^  RtreeValue f;      \/* Floating point value *\/$/;"	m	union:RtreeCoord	file:
fErrorOrAux	testdocs/sqlite3.c	/^  u8 fErrorOrAux;         \/* isError!=0 or pVdbe->pAuxData modified *\/$/;"	m	struct:sqlite3_context	file:
fcntlSizeHint	testdocs/sqlite3.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:
fd	testdocs/sqlite3.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:
fd	testdocs/sqlite3.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:
fd	testdocs/sqlite3.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:
fdatasync	testdocs/sqlite3.c	/^# define fdatasync /;"	d	file:
fetchPayload	testdocs/sqlite3.c	/^static const void *fetchPayload($/;"	f	file:
fg	testdocs/sqlite3.c	/^    } fg;$/;"	m	struct:SrcList::SrcList_item	typeref:struct:SrcList::SrcList_item::__anon14	file:
file	testdocs/sqlite3.c	/^  SorterFile file;                \/* Temp file for level-0 PMAs *\/$/;"	m	struct:SortSubtask	file:
file2	testdocs/sqlite3.c	/^  SorterFile file2;               \/* Space for other PMAs *\/$/;"	m	struct:SortSubtask	file:
fileChunkSize	testdocs/sqlite3.c	/^#define fileChunkSize(/;"	d	file:
fileHasMoved	testdocs/sqlite3.c	/^static int fileHasMoved(unixFile *pFile){$/;"	f	file:
fileId	testdocs/sqlite3.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:
file_control	testdocs/sqlite3.c	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	file:
file_format	testdocs/sqlite3.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	file:
fillInCell	testdocs/sqlite3.c	/^static int fillInCell($/;"	f	file:
fillInUnixFile	testdocs/sqlite3.c	/^static int fillInUnixFile($/;"	f	file:
filter	testdocs/sqlite3.c	/^  Fts3SegFilter filter;$/;"	m	struct:Fts3auxCursor	file:
finalDbSize	testdocs/sqlite3.c	/^static Pgno finalDbSize(BtShared *pBt, Pgno nOrig, Pgno nFree){$/;"	f	file:
finalize	testdocs/sqlite3.c	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
finalizeAggFunctions	testdocs/sqlite3.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
findBtree	testdocs/sqlite3.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:
findCell	testdocs/sqlite3.c	/^#define findCell(/;"	d	file:
findCellPastPtr	testdocs/sqlite3.c	/^#define findCellPastPtr(/;"	d	file:
findCollSeqEntry	testdocs/sqlite3.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:
findCreateFileMode	testdocs/sqlite3.c	/^static int findCreateFileMode($/;"	f	file:
findElementWithHash	testdocs/sqlite3.c	/^static HashElem *findElementWithHash($/;"	f	file:
findIndexCol	testdocs/sqlite3.c	/^static int findIndexCol($/;"	f	file:
findIndexOrPrimaryKey	testdocs/sqlite3.c	/^static Index *findIndexOrPrimaryKey($/;"	f	file:
findInodeInfo	testdocs/sqlite3.c	/^static int findInodeInfo($/;"	f	file:
findLeafNode	testdocs/sqlite3.c	/^static int findLeafNode($/;"	f	file:
findNextHostParameter	testdocs/sqlite3.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:
findReusableFd	testdocs/sqlite3.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:
findRightmost	testdocs/sqlite3.c	/^static Select *findRightmost(Select *p){$/;"	f	file:
find_lib	testdocs/waf	/^def find_lib():$/;"	f
finder_type	testdocs/sqlite3.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
first	testdocs/sqlite3.c	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash	file:
first	testdocs/sqlite3.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	file:
fixBoundingBox	testdocs/sqlite3.c	/^static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
fixLeafParent	testdocs/sqlite3.c	/^static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){$/;"	f	file:
fixpy2	testdocs/waf	/^		import fixpy2$/;"	i
fkActionTrigger	testdocs/sqlite3.c	/^static Trigger *fkActionTrigger($/;"	f	file:
fkChildIsModified	testdocs/sqlite3.c	/^static int fkChildIsModified($/;"	f	file:
fkLookupParent	testdocs/sqlite3.c	/^static void fkLookupParent($/;"	f	file:
fkParentIsModified	testdocs/sqlite3.c	/^static int fkParentIsModified($/;"	f	file:
fkScanChildren	testdocs/sqlite3.c	/^static void fkScanChildren($/;"	f	file:
fkTriggerDelete	testdocs/sqlite3.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:
fkeyHash	testdocs/sqlite3.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	file:
flag	testdocs/sqlite3.c	/^  char flag;$/;"	m	struct:MatchInfo	file:
flags	testdocs/sqlite3.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:
flags	testdocs/sqlite3.c	/^  int flags;                      \/* Mask of configuration flags *\/$/;"	m	struct:Fts5SegIter	file:
flags	testdocs/sqlite3.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:MemJournal	file:
flags	testdocs/sqlite3.c	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3	file:
flags	testdocs/sqlite3.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:
flags	testdocs/sqlite3.c	/^  int flags;$/;"	m	struct:Fts3SegFilter	file:
flags	testdocs/sqlite3.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	file:
flags	testdocs/sqlite3.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:sqlite3_value	file:
flags	testdocs/sqlite3.c	/^  u32 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	file:
flags	testdocs/sqlite3.c	/^  u8 flags;                       \/* Copy of flags byte *\/$/;"	m	struct:StatPage	file:
flattenSubquery	testdocs/sqlite3.c	/^static int flattenSubquery($/;"	f	file:
float	testdocs/sqlite3.c	/^# define float /;"	d	file:
floatSwap	testdocs/sqlite3.c	/^static u64 floatSwap(u64 in){$/;"	f	file:
flockCheckReservedLock	testdocs/sqlite3.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
flockClose	testdocs/sqlite3.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:
flockLock	testdocs/sqlite3.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flockUnlock	testdocs/sqlite3.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
fmtinfo	testdocs/sqlite3.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	testdocs/sqlite3.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:
free	testdocs/sqlite3.c	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	file:
freeCursorConstraints	testdocs/sqlite3.c	/^static void freeCursorConstraints(RtreeCursor *pCsr){$/;"	f	file:
freeEphemeralFunction	testdocs/sqlite3.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:
freeIndex	testdocs/sqlite3.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:
freeP4	testdocs/sqlite3.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:
freeP4FuncCtx	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void freeP4FuncCtx(sqlite3 *db, sqlite3_context *p){$/;"	f	file:
freeP4Mem	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void freeP4Mem(sqlite3 *db, Mem *p){$/;"	f	file:
freePage	testdocs/sqlite3.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:
freePage2	testdocs/sqlite3.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:
freeSpace	testdocs/sqlite3.c	/^static int freeSpace(MemPage *pPage, u16 iStart, u16 iSize){$/;"	f	file:
freeTempSpace	testdocs/sqlite3.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:
free_table	testdocs/sqlite3.c	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	file:
fsFlags	testdocs/sqlite3.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:
fts3AllocateSegdirIdx	testdocs/sqlite3.c	/^static int fts3AllocateSegdirIdx($/;"	f	file:
fts3AppendToNode	testdocs/sqlite3.c	/^static int fts3AppendToNode($/;"	f	file:
fts3Appendf	testdocs/sqlite3.c	/^static void fts3Appendf($/;"	f	file:
fts3BeginMethod	testdocs/sqlite3.c	/^static int fts3BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3BestIndexMethod	testdocs/sqlite3.c	/^static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts3BestSnippet	testdocs/sqlite3.c	/^static int fts3BestSnippet($/;"	f	file:
fts3BinCompare	testdocs/sqlite3.c	/^static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3BinHash	testdocs/sqlite3.c	/^static int fts3BinHash(const void *pKey, int nKey){$/;"	f	file:
fts3ChecksumEntry	testdocs/sqlite3.c	/^static u64 fts3ChecksumEntry($/;"	f	file:
fts3ChecksumIndex	testdocs/sqlite3.c	/^static u64 fts3ChecksumIndex($/;"	f	file:
fts3CloseMethod	testdocs/sqlite3.c	/^static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3ColumnFilter	testdocs/sqlite3.c	/^static void fts3ColumnFilter($/;"	f	file:
fts3ColumnMethod	testdocs/sqlite3.c	/^static int fts3ColumnMethod($/;"	f	file:
fts3ColumnlistCopy	testdocs/sqlite3.c	/^static void fts3ColumnlistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3ColumnlistCount	testdocs/sqlite3.c	/^static int fts3ColumnlistCount(char **ppCollist){$/;"	f	file:
fts3CommitMethod	testdocs/sqlite3.c	/^static int fts3CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3CompareElemByTerm	testdocs/sqlite3.c	/^static int SQLITE_CDECL fts3CompareElemByTerm($/;"	f	file:
fts3ConnectMethod	testdocs/sqlite3.c	/^static int fts3ConnectMethod($/;"	f	file:
fts3ContentColumns	testdocs/sqlite3.c	/^static int fts3ContentColumns($/;"	f	file:
fts3CreateMethod	testdocs/sqlite3.c	/^static int fts3CreateMethod($/;"	f	file:
fts3CreateTables	testdocs/sqlite3.c	/^static int fts3CreateTables(Fts3Table *p){$/;"	f	file:
fts3CursorFinalizeStmt	testdocs/sqlite3.c	/^static void fts3CursorFinalizeStmt(Fts3Cursor *pCsr){$/;"	f	file:
fts3CursorSeek	testdocs/sqlite3.c	/^static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f	file:
fts3CursorSeekStmt	testdocs/sqlite3.c	/^static int fts3CursorSeekStmt(Fts3Cursor *pCsr){$/;"	f	file:
fts3DatabasePageSize	testdocs/sqlite3.c	/^static void fts3DatabasePageSize(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DbExec	testdocs/sqlite3.c	/^static void fts3DbExec($/;"	f	file:
fts3DeclareVtab	testdocs/sqlite3.c	/^static void fts3DeclareVtab(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DecodeIntArray	testdocs/sqlite3.c	/^static void fts3DecodeIntArray($/;"	f	file:
fts3DeleteAll	testdocs/sqlite3.c	/^static int fts3DeleteAll(Fts3Table *p, int bContent){$/;"	f	file:
fts3DeleteByRowid	testdocs/sqlite3.c	/^static int fts3DeleteByRowid($/;"	f	file:
fts3DeleteSegdir	testdocs/sqlite3.c	/^static int fts3DeleteSegdir($/;"	f	file:
fts3DeleteSegment	testdocs/sqlite3.c	/^static int fts3DeleteSegment($/;"	f	file:
fts3DeleteTerms	testdocs/sqlite3.c	/^static void fts3DeleteTerms($/;"	f	file:
fts3DestroyMethod	testdocs/sqlite3.c	/^static int fts3DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DisconnectMethod	testdocs/sqlite3.c	/^static int fts3DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DoAutoincrmerge	testdocs/sqlite3.c	/^static int fts3DoAutoincrmerge($/;"	f	file:
fts3DoIncrmerge	testdocs/sqlite3.c	/^static int fts3DoIncrmerge($/;"	f	file:
fts3DoIntegrityCheck	testdocs/sqlite3.c	/^static int fts3DoIntegrityCheck($/;"	f	file:
fts3DoOptimize	testdocs/sqlite3.c	/^static int fts3DoOptimize(Fts3Table *p, int bReturnDone){$/;"	f	file:
fts3DoRebuild	testdocs/sqlite3.c	/^static int fts3DoRebuild(Fts3Table *p){$/;"	f	file:
fts3DocidRange	testdocs/sqlite3.c	/^static sqlite3_int64 fts3DocidRange(sqlite3_value *pVal, i64 iDefault){$/;"	f	file:
fts3DoclistCountDocids	testdocs/sqlite3.c	/^static int fts3DoclistCountDocids(char *aList, int nList){$/;"	f	file:
fts3DoclistOrMerge	testdocs/sqlite3.c	/^static int fts3DoclistOrMerge($/;"	f	file:
fts3DoclistPhraseMerge	testdocs/sqlite3.c	/^static int fts3DoclistPhraseMerge($/;"	f	file:
fts3EncodeIntArray	testdocs/sqlite3.c	/^static void fts3EncodeIntArray($/;"	f	file:
fts3EofMethod	testdocs/sqlite3.c	/^static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3EvalAllocateReaders	testdocs/sqlite3.c	/^static void fts3EvalAllocateReaders($/;"	f	file:
fts3EvalAverageDocsize	testdocs/sqlite3.c	/^static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){$/;"	f	file:
fts3EvalDeferredPhrase	testdocs/sqlite3.c	/^static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalDlPhraseNext	testdocs/sqlite3.c	/^static void fts3EvalDlPhraseNext($/;"	f	file:
fts3EvalGatherStats	testdocs/sqlite3.c	/^static int fts3EvalGatherStats($/;"	f	file:
fts3EvalIncrPhraseNext	testdocs/sqlite3.c	/^static int fts3EvalIncrPhraseNext($/;"	f	file:
fts3EvalInvalidatePoslist	testdocs/sqlite3.c	/^static void fts3EvalInvalidatePoslist(Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalNearTest	testdocs/sqlite3.c	/^static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){$/;"	f	file:
fts3EvalNearTrim	testdocs/sqlite3.c	/^static int fts3EvalNearTrim($/;"	f	file:
fts3EvalNext	testdocs/sqlite3.c	/^static int fts3EvalNext(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalNextRow	testdocs/sqlite3.c	/^static void fts3EvalNextRow($/;"	f	file:
fts3EvalPhraseLoad	testdocs/sqlite3.c	/^static int fts3EvalPhraseLoad($/;"	f	file:
fts3EvalPhraseMergeToken	testdocs/sqlite3.c	/^static int fts3EvalPhraseMergeToken($/;"	f	file:
fts3EvalPhraseNext	testdocs/sqlite3.c	/^static int fts3EvalPhraseNext($/;"	f	file:
fts3EvalPhraseStart	testdocs/sqlite3.c	/^static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){$/;"	f	file:
fts3EvalRestart	testdocs/sqlite3.c	/^static void fts3EvalRestart($/;"	f	file:
fts3EvalSelectDeferred	testdocs/sqlite3.c	/^static int fts3EvalSelectDeferred($/;"	f	file:
fts3EvalStart	testdocs/sqlite3.c	/^static int fts3EvalStart(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalStartReaders	testdocs/sqlite3.c	/^static void fts3EvalStartReaders($/;"	f	file:
fts3EvalTestExpr	testdocs/sqlite3.c	/^static int fts3EvalTestExpr($/;"	f	file:
fts3EvalTokenCosts	testdocs/sqlite3.c	/^static void fts3EvalTokenCosts($/;"	f	file:
fts3EvalUpdateCounts	testdocs/sqlite3.c	/^static void fts3EvalUpdateCounts(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprBalance	testdocs/sqlite3.c	/^static int fts3ExprBalance(Fts3Expr **pp, int nMaxDepth){$/;"	f	file:
fts3ExprCheckDepth	testdocs/sqlite3.c	/^static int fts3ExprCheckDepth(Fts3Expr *p, int nMaxDepth){$/;"	f	file:
fts3ExprGlobalHitsCb	testdocs/sqlite3.c	/^static int fts3ExprGlobalHitsCb($/;"	f	file:
fts3ExprIterate	testdocs/sqlite3.c	/^static int fts3ExprIterate($/;"	f	file:
fts3ExprIterate2	testdocs/sqlite3.c	/^static int fts3ExprIterate2($/;"	f	file:
fts3ExprLHitGather	testdocs/sqlite3.c	/^static void fts3ExprLHitGather($/;"	f	file:
fts3ExprLHits	testdocs/sqlite3.c	/^static void fts3ExprLHits($/;"	f	file:
fts3ExprLoadDoclists	testdocs/sqlite3.c	/^static int fts3ExprLoadDoclists($/;"	f	file:
fts3ExprLoadDoclistsCb	testdocs/sqlite3.c	/^static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprLocalHitsCb	testdocs/sqlite3.c	/^static int fts3ExprLocalHitsCb($/;"	f	file:
fts3ExprParse	testdocs/sqlite3.c	/^static int fts3ExprParse($/;"	f	file:
fts3ExprParseUnbalanced	testdocs/sqlite3.c	/^static int fts3ExprParseUnbalanced($/;"	f	file:
fts3ExprPhraseCount	testdocs/sqlite3.c	/^static int fts3ExprPhraseCount(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprPhraseCountCb	testdocs/sqlite3.c	/^static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTermOffsetInit	testdocs/sqlite3.c	/^static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTest	testdocs/sqlite3.c	/^static void fts3ExprTest($/;"	f	file:
fts3FilterMethod	testdocs/sqlite3.c	/^static int fts3FilterMethod($/;"	f	file:
fts3FindElementByHash	testdocs/sqlite3.c	/^static Fts3HashElem *fts3FindElementByHash($/;"	f	file:
fts3FindFunctionMethod	testdocs/sqlite3.c	/^static int fts3FindFunctionMethod($/;"	f	file:
fts3FreeExprNode	testdocs/sqlite3.c	/^static void fts3FreeExprNode(Fts3Expr *p){$/;"	f	file:
fts3FunctionArg	testdocs/sqlite3.c	/^static int fts3FunctionArg($/;"	f	file:
fts3GetDeltaPosition	testdocs/sqlite3.c	/^static void fts3GetDeltaPosition(char **pp, int *piPos){$/;"	f	file:
fts3GetDeltaVarint	testdocs/sqlite3.c	/^static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetDeltaVarint3	testdocs/sqlite3.c	/^static void fts3GetDeltaVarint3($/;"	f	file:
fts3GetMatchinfo	testdocs/sqlite3.c	/^static void fts3GetMatchinfo($/;"	f	file:
fts3GetReverseVarint	testdocs/sqlite3.c	/^static void fts3GetReverseVarint($/;"	f	file:
fts3GetVarint32	testdocs/sqlite3.c	/^#define fts3GetVarint32(/;"	d	file:
fts3Getint	testdocs/sqlite3.c	/^static int fts3Getint(const char **pz){$/;"	f	file:
fts3GobbleInt	testdocs/sqlite3.c	/^static int fts3GobbleInt(const char **pp, int *pnOut){$/;"	f	file:
fts3HashClear	testdocs/sqlite3.c	/^#define fts3HashClear /;"	d	file:
fts3HashCount	testdocs/sqlite3.c	/^#define fts3HashCount(/;"	d	file:
fts3HashData	testdocs/sqlite3.c	/^#define fts3HashData(/;"	d	file:
fts3HashFind	testdocs/sqlite3.c	/^#define fts3HashFind /;"	d	file:
fts3HashFindElem	testdocs/sqlite3.c	/^#define fts3HashFindElem /;"	d	file:
fts3HashFirst	testdocs/sqlite3.c	/^#define fts3HashFirst(/;"	d	file:
fts3HashFree	testdocs/sqlite3.c	/^static void fts3HashFree(void *p){$/;"	f	file:
fts3HashInit	testdocs/sqlite3.c	/^#define fts3HashInit /;"	d	file:
fts3HashInsert	testdocs/sqlite3.c	/^#define fts3HashInsert /;"	d	file:
fts3HashInsertElement	testdocs/sqlite3.c	/^static void fts3HashInsertElement($/;"	f	file:
fts3HashKey	testdocs/sqlite3.c	/^#define fts3HashKey(/;"	d	file:
fts3HashKeysize	testdocs/sqlite3.c	/^#define fts3HashKeysize(/;"	d	file:
fts3HashMalloc	testdocs/sqlite3.c	/^static void *fts3HashMalloc(int n){$/;"	f	file:
fts3HashNext	testdocs/sqlite3.c	/^#define fts3HashNext(/;"	d	file:
fts3IncrmergeAppend	testdocs/sqlite3.c	/^static int fts3IncrmergeAppend($/;"	f	file:
fts3IncrmergeChomp	testdocs/sqlite3.c	/^static int fts3IncrmergeChomp($/;"	f	file:
fts3IncrmergeCsr	testdocs/sqlite3.c	/^static int fts3IncrmergeCsr($/;"	f	file:
fts3IncrmergeHintLoad	testdocs/sqlite3.c	/^static int fts3IncrmergeHintLoad(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeHintPop	testdocs/sqlite3.c	/^static int fts3IncrmergeHintPop(Blob *pHint, i64 *piAbsLevel, int *pnInput){$/;"	f	file:
fts3IncrmergeHintPush	testdocs/sqlite3.c	/^static void fts3IncrmergeHintPush($/;"	f	file:
fts3IncrmergeHintStore	testdocs/sqlite3.c	/^static int fts3IncrmergeHintStore(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeLoad	testdocs/sqlite3.c	/^static int fts3IncrmergeLoad($/;"	f	file:
fts3IncrmergeOutputIdx	testdocs/sqlite3.c	/^static int fts3IncrmergeOutputIdx($/;"	f	file:
fts3IncrmergePush	testdocs/sqlite3.c	/^static int fts3IncrmergePush($/;"	f	file:
fts3IncrmergeRelease	testdocs/sqlite3.c	/^static void fts3IncrmergeRelease($/;"	f	file:
fts3IncrmergeWriter	testdocs/sqlite3.c	/^static int fts3IncrmergeWriter($/;"	f	file:
fts3InitVtab	testdocs/sqlite3.c	/^static int fts3InitVtab($/;"	f	file:
fts3InsertData	testdocs/sqlite3.c	/^static int fts3InsertData($/;"	f	file:
fts3InsertDocsize	testdocs/sqlite3.c	/^static void fts3InsertDocsize($/;"	f	file:
fts3InsertTerms	testdocs/sqlite3.c	/^static int fts3InsertTerms($/;"	f	file:
fts3IntegrityCheck	testdocs/sqlite3.c	/^static int fts3IntegrityCheck(Fts3Table *p, int *pbOk){$/;"	f	file:
fts3IsAppendable	testdocs/sqlite3.c	/^static int fts3IsAppendable(Fts3Table *p, sqlite3_int64 iEnd, int *pbRes){$/;"	f	file:
fts3IsEmpty	testdocs/sqlite3.c	/^static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){$/;"	f	file:
fts3IsSpecialColumn	testdocs/sqlite3.c	/^static int fts3IsSpecialColumn($/;"	f	file:
fts3LcsIteratorAdvance	testdocs/sqlite3.c	/^static int fts3LcsIteratorAdvance(LcsIterator *pIter){$/;"	f	file:
fts3LogMerge	testdocs/sqlite3.c	/^#define fts3LogMerge(/;"	d	file:
fts3LogMerge	testdocs/sqlite3.c	/^static void fts3LogMerge(int nMerge, sqlite3_int64 iAbsLevel){$/;"	f	file:
fts3MIBufferAlloc	testdocs/sqlite3.c	/^static void (*fts3MIBufferAlloc(MatchinfoBuffer *p, u32 **paOut))(void*){$/;"	f	file:
fts3MIBufferFree	testdocs/sqlite3.c	/^static void fts3MIBufferFree(void *p){$/;"	f	file:
fts3MIBufferNew	testdocs/sqlite3.c	/^static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo){$/;"	f	file:
fts3MIBufferSetGlobal	testdocs/sqlite3.c	/^static void fts3MIBufferSetGlobal(MatchinfoBuffer *p){$/;"	f	file:
fts3MallocZero	testdocs/sqlite3.c	/^static void *fts3MallocZero(int nByte){$/;"	f	file:
fts3MatchinfoCheck	testdocs/sqlite3.c	/^static int fts3MatchinfoCheck($/;"	f	file:
fts3MatchinfoFunc	testdocs/sqlite3.c	/^static void fts3MatchinfoFunc($/;"	f	file:
fts3MatchinfoLcs	testdocs/sqlite3.c	/^static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){$/;"	f	file:
fts3MatchinfoLcsCb	testdocs/sqlite3.c	/^static int fts3MatchinfoLcsCb($/;"	f	file:
fts3MatchinfoSelectDoctotal	testdocs/sqlite3.c	/^static int fts3MatchinfoSelectDoctotal($/;"	f	file:
fts3MatchinfoSize	testdocs/sqlite3.c	/^static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){$/;"	f	file:
fts3MatchinfoValues	testdocs/sqlite3.c	/^static int fts3MatchinfoValues($/;"	f	file:
fts3Module	testdocs/sqlite3.c	/^static const sqlite3_module fts3Module = {$/;"	v	file:
fts3MsrBufferData	testdocs/sqlite3.c	/^static int fts3MsrBufferData($/;"	f	file:
fts3NextMethod	testdocs/sqlite3.c	/^static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3NodeAddTerm	testdocs/sqlite3.c	/^static int fts3NodeAddTerm($/;"	f	file:
fts3NodeFree	testdocs/sqlite3.c	/^static void fts3NodeFree(SegmentNode *pTree){$/;"	f	file:
fts3NodeWrite	testdocs/sqlite3.c	/^static int fts3NodeWrite($/;"	f	file:
fts3OffsetsFunc	testdocs/sqlite3.c	/^static void fts3OffsetsFunc($/;"	f	file:
fts3OpenMethod	testdocs/sqlite3.c	/^static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3OptimizeFunc	testdocs/sqlite3.c	/^static void fts3OptimizeFunc($/;"	f	file:
fts3PendingListAppend	testdocs/sqlite3.c	/^static int fts3PendingListAppend($/;"	f	file:
fts3PendingListAppendVarint	testdocs/sqlite3.c	/^static int fts3PendingListAppendVarint($/;"	f	file:
fts3PendingListDelete	testdocs/sqlite3.c	/^static void fts3PendingListDelete(PendingList *pList){$/;"	f	file:
fts3PendingTermsAdd	testdocs/sqlite3.c	/^static int fts3PendingTermsAdd($/;"	f	file:
fts3PendingTermsAddOne	testdocs/sqlite3.c	/^static int fts3PendingTermsAddOne($/;"	f	file:
fts3PendingTermsDocid	testdocs/sqlite3.c	/^static int fts3PendingTermsDocid($/;"	f	file:
fts3PoslistCopy	testdocs/sqlite3.c	/^static void fts3PoslistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3PoslistMerge	testdocs/sqlite3.c	/^static void fts3PoslistMerge($/;"	f	file:
fts3PoslistNearMerge	testdocs/sqlite3.c	/^static int fts3PoslistNearMerge($/;"	f	file:
fts3PoslistPhraseMerge	testdocs/sqlite3.c	/^static int fts3PoslistPhraseMerge($/;"	f	file:
fts3PrefixCompress	testdocs/sqlite3.c	/^static int fts3PrefixCompress($/;"	f	file:
fts3PrefixParameter	testdocs/sqlite3.c	/^static int fts3PrefixParameter($/;"	f	file:
fts3PromoteSegments	testdocs/sqlite3.c	/^static int fts3PromoteSegments($/;"	f	file:
fts3PutColNumber	testdocs/sqlite3.c	/^static int fts3PutColNumber(char **pp, int iCol){$/;"	f	file:
fts3PutDeltaVarint	testdocs/sqlite3.c	/^static void fts3PutDeltaVarint($/;"	f	file:
fts3PutDeltaVarint3	testdocs/sqlite3.c	/^static void fts3PutDeltaVarint3($/;"	f	file:
fts3QuoteId	testdocs/sqlite3.c	/^static char *fts3QuoteId(char const *zInput){$/;"	f	file:
fts3ReadEndBlockField	testdocs/sqlite3.c	/^static void fts3ReadEndBlockField($/;"	f	file:
fts3ReadExprList	testdocs/sqlite3.c	/^static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3ReadNextPos	testdocs/sqlite3.c	/^static void fts3ReadNextPos($/;"	f	file:
fts3ReallocOrFree	testdocs/sqlite3.c	/^static void *fts3ReallocOrFree(void *pOrig, int nNew){$/;"	f	file:
fts3Rehash	testdocs/sqlite3.c	/^static int fts3Rehash(Fts3Hash *pH, int new_size){$/;"	f	file:
fts3ReleaseMethod	testdocs/sqlite3.c	/^static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RemoveElementByHash	testdocs/sqlite3.c	/^static void fts3RemoveElementByHash($/;"	f	file:
fts3RemoveSegdirEntry	testdocs/sqlite3.c	/^static int fts3RemoveSegdirEntry($/;"	f	file:
fts3RenameMethod	testdocs/sqlite3.c	/^static int fts3RenameMethod($/;"	f	file:
fts3RepackSegdirLevel	testdocs/sqlite3.c	/^static int fts3RepackSegdirLevel($/;"	f	file:
fts3ReversePoslist	testdocs/sqlite3.c	/^static void fts3ReversePoslist(char *pStart, char **ppPoslist){$/;"	f	file:
fts3RollbackMethod	testdocs/sqlite3.c	/^static int fts3RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3RollbackToMethod	testdocs/sqlite3.c	/^static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RowidMethod	testdocs/sqlite3.c	/^static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts3SavepointMethod	testdocs/sqlite3.c	/^static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3ScanInteriorNode	testdocs/sqlite3.c	/^static int fts3ScanInteriorNode($/;"	f	file:
fts3SegReaderCmp	testdocs/sqlite3.c	/^static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderCursor	testdocs/sqlite3.c	/^static int fts3SegReaderCursor($/;"	f	file:
fts3SegReaderCursorAddZero	testdocs/sqlite3.c	/^static int fts3SegReaderCursorAddZero($/;"	f	file:
fts3SegReaderCursorAppend	testdocs/sqlite3.c	/^static int fts3SegReaderCursorAppend($/;"	f	file:
fts3SegReaderCursorFree	testdocs/sqlite3.c	/^static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){$/;"	f	file:
fts3SegReaderDoclistCmp	testdocs/sqlite3.c	/^static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderDoclistCmpRev	testdocs/sqlite3.c	/^static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderFirstDocid	testdocs/sqlite3.c	/^static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIncrRead	testdocs/sqlite3.c	/^static int fts3SegReaderIncrRead(Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIsPending	testdocs/sqlite3.c	/^#define fts3SegReaderIsPending(/;"	d	file:
fts3SegReaderIsRootOnly	testdocs/sqlite3.c	/^#define fts3SegReaderIsRootOnly(/;"	d	file:
fts3SegReaderNext	testdocs/sqlite3.c	/^static int fts3SegReaderNext($/;"	f	file:
fts3SegReaderNextDocid	testdocs/sqlite3.c	/^static int fts3SegReaderNextDocid($/;"	f	file:
fts3SegReaderRequire	testdocs/sqlite3.c	/^static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){$/;"	f	file:
fts3SegReaderSetEof	testdocs/sqlite3.c	/^static void fts3SegReaderSetEof(Fts3SegReader *pSeg){$/;"	f	file:
fts3SegReaderSort	testdocs/sqlite3.c	/^static void fts3SegReaderSort($/;"	f	file:
fts3SegReaderStart	testdocs/sqlite3.c	/^static int fts3SegReaderStart($/;"	f	file:
fts3SegReaderTermCmp	testdocs/sqlite3.c	/^static int fts3SegReaderTermCmp($/;"	f	file:
fts3SegWriterAdd	testdocs/sqlite3.c	/^static int fts3SegWriterAdd($/;"	f	file:
fts3SegWriterFlush	testdocs/sqlite3.c	/^static int fts3SegWriterFlush($/;"	f	file:
fts3SegWriterFree	testdocs/sqlite3.c	/^static void fts3SegWriterFree(SegmentWriter *pWriter){$/;"	f	file:
fts3SegmentIsMaxLevel	testdocs/sqlite3.c	/^static int fts3SegmentIsMaxLevel(Fts3Table *p, i64 iAbsLevel, int *pbMax){$/;"	f	file:
fts3SegmentMaxLevel	testdocs/sqlite3.c	/^static int fts3SegmentMaxLevel($/;"	f	file:
fts3SegmentMerge	testdocs/sqlite3.c	/^static int fts3SegmentMerge($/;"	f	file:
fts3SelectDocsize	testdocs/sqlite3.c	/^static int fts3SelectDocsize($/;"	f	file:
fts3SelectLeaf	testdocs/sqlite3.c	/^static int fts3SelectLeaf($/;"	f	file:
fts3SetEstimatedRows	testdocs/sqlite3.c	/^static void fts3SetEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){$/;"	f	file:
fts3SetHasStat	testdocs/sqlite3.c	/^static int fts3SetHasStat(Fts3Table *p){$/;"	f	file:
fts3SetUniqueFlag	testdocs/sqlite3.c	/^static void fts3SetUniqueFlag(sqlite3_index_info *pIdxInfo){$/;"	f	file:
fts3SnippetAdvance	testdocs/sqlite3.c	/^static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){$/;"	f	file:
fts3SnippetDetails	testdocs/sqlite3.c	/^static void fts3SnippetDetails($/;"	f	file:
fts3SnippetFindPositions	testdocs/sqlite3.c	/^static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3SnippetFunc	testdocs/sqlite3.c	/^static void fts3SnippetFunc($/;"	f	file:
fts3SnippetNextCandidate	testdocs/sqlite3.c	/^static int fts3SnippetNextCandidate(SnippetIter *pIter){$/;"	f	file:
fts3SnippetShift	testdocs/sqlite3.c	/^static int fts3SnippetShift($/;"	f	file:
fts3SnippetText	testdocs/sqlite3.c	/^static int fts3SnippetText($/;"	f	file:
fts3SpecialInsert	testdocs/sqlite3.c	/^static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){$/;"	f	file:
fts3SqlExec	testdocs/sqlite3.c	/^static void fts3SqlExec($/;"	f	file:
fts3SqlStmt	testdocs/sqlite3.c	/^static int fts3SqlStmt($/;"	f	file:
fts3StartNode	testdocs/sqlite3.c	/^static void fts3StartNode(Blob *pNode, int iHeight, sqlite3_int64 iChild){$/;"	f	file:
fts3StrCompare	testdocs/sqlite3.c	/^static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3StrHash	testdocs/sqlite3.c	/^static int fts3StrHash(const void *pKey, int nKey){$/;"	f	file:
fts3StringAppend	testdocs/sqlite3.c	/^static int fts3StringAppend($/;"	f	file:
fts3SyncMethod	testdocs/sqlite3.c	/^static int fts3SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3TermCmp	testdocs/sqlite3.c	/^static int fts3TermCmp($/;"	f	file:
fts3TermSegReaderCursor	testdocs/sqlite3.c	/^static int fts3TermSegReaderCursor($/;"	f	file:
fts3TermSelect	testdocs/sqlite3.c	/^static int fts3TermSelect($/;"	f	file:
fts3TermSelectFinishMerge	testdocs/sqlite3.c	/^static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){$/;"	f	file:
fts3TermSelectMerge	testdocs/sqlite3.c	/^static int fts3TermSelectMerge($/;"	f	file:
fts3TokenizerEnabled	testdocs/sqlite3.c	/^static int fts3TokenizerEnabled(sqlite3_context *context){$/;"	f	file:
fts3TokenizerFunc	testdocs/sqlite3.c	/^static void fts3TokenizerFunc($/;"	f	file:
fts3TreeFinishNode	testdocs/sqlite3.c	/^static int fts3TreeFinishNode($/;"	f	file:
fts3TruncateNode	testdocs/sqlite3.c	/^static int fts3TruncateNode($/;"	f	file:
fts3TruncateSegment	testdocs/sqlite3.c	/^static int fts3TruncateSegment($/;"	f	file:
fts3UpdateDocTotals	testdocs/sqlite3.c	/^static void fts3UpdateDocTotals($/;"	f	file:
fts3UpdateMethod	testdocs/sqlite3.c	/^static int fts3UpdateMethod($/;"	f	file:
fts3WriteExprList	testdocs/sqlite3.c	/^static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3WriteSegdir	testdocs/sqlite3.c	/^static int fts3WriteSegdir($/;"	f	file:
fts3WriteSegment	testdocs/sqlite3.c	/^static int fts3WriteSegment($/;"	f	file:
fts3Writelock	testdocs/sqlite3.c	/^static int fts3Writelock(Fts3Table *p){$/;"	f	file:
fts3_isalnum	testdocs/sqlite3.c	/^static int fts3_isalnum(int x){$/;"	f	file:
fts3auxBestIndexMethod	testdocs/sqlite3.c	/^static int fts3auxBestIndexMethod($/;"	f	file:
fts3auxCloseMethod	testdocs/sqlite3.c	/^static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxColumnMethod	testdocs/sqlite3.c	/^static int fts3auxColumnMethod($/;"	f	file:
fts3auxConnectMethod	testdocs/sqlite3.c	/^static int fts3auxConnectMethod($/;"	f	file:
fts3auxDisconnectMethod	testdocs/sqlite3.c	/^static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3auxEofMethod	testdocs/sqlite3.c	/^static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxFilterMethod	testdocs/sqlite3.c	/^static int fts3auxFilterMethod($/;"	f	file:
fts3auxGrowStatArray	testdocs/sqlite3.c	/^static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){$/;"	f	file:
fts3auxNextMethod	testdocs/sqlite3.c	/^static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxOpenMethod	testdocs/sqlite3.c	/^static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3auxRowidMethod	testdocs/sqlite3.c	/^static int fts3auxRowidMethod($/;"	f	file:
fts3isspace	testdocs/sqlite3.c	/^static int fts3isspace(char c){$/;"	f	file:
fts3tokBestIndexMethod	testdocs/sqlite3.c	/^static int fts3tokBestIndexMethod($/;"	f	file:
fts3tokCloseMethod	testdocs/sqlite3.c	/^static int fts3tokCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokColumnMethod	testdocs/sqlite3.c	/^static int fts3tokColumnMethod($/;"	f	file:
fts3tokConnectMethod	testdocs/sqlite3.c	/^static int fts3tokConnectMethod($/;"	f	file:
fts3tokDequoteArray	testdocs/sqlite3.c	/^static int fts3tokDequoteArray($/;"	f	file:
fts3tokDisconnectMethod	testdocs/sqlite3.c	/^static int fts3tokDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3tokEofMethod	testdocs/sqlite3.c	/^static int fts3tokEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokFilterMethod	testdocs/sqlite3.c	/^static int fts3tokFilterMethod($/;"	f	file:
fts3tokNextMethod	testdocs/sqlite3.c	/^static int fts3tokNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokOpenMethod	testdocs/sqlite3.c	/^static int fts3tokOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3tokQueryTokenizer	testdocs/sqlite3.c	/^static int fts3tokQueryTokenizer($/;"	f	file:
fts3tokResetCursor	testdocs/sqlite3.c	/^static void fts3tokResetCursor(Fts3tokCursor *pCsr){$/;"	f	file:
fts3tokRowidMethod	testdocs/sqlite3.c	/^static int fts3tokRowidMethod($/;"	f	file:
fts5AllocateSegid	testdocs/sqlite3.c	/^static int fts5AllocateSegid(Fts5Index *p, Fts5Structure *pStruct){$/;"	f	file:
fts5ApiCallback	testdocs/sqlite3.c	/^static void fts5ApiCallback($/;"	f	file:
fts5ApiColumnCount	testdocs/sqlite3.c	/^static int fts5ApiColumnCount(Fts5Context *pCtx){$/;"	f	file:
fts5ApiColumnSize	testdocs/sqlite3.c	/^static int fts5ApiColumnSize(Fts5Context *pCtx, int iCol, int *pnToken){$/;"	f	file:
fts5ApiColumnText	testdocs/sqlite3.c	/^static int fts5ApiColumnText($/;"	f	file:
fts5ApiColumnTotalSize	testdocs/sqlite3.c	/^static int fts5ApiColumnTotalSize($/;"	f	file:
fts5ApiGetAuxdata	testdocs/sqlite3.c	/^static void *fts5ApiGetAuxdata(Fts5Context *pCtx, int bClear){$/;"	f	file:
fts5ApiInst	testdocs/sqlite3.c	/^static int fts5ApiInst($/;"	f	file:
fts5ApiInstCount	testdocs/sqlite3.c	/^static int fts5ApiInstCount(Fts5Context *pCtx, int *pnInst){$/;"	f	file:
fts5ApiInvoke	testdocs/sqlite3.c	/^static void fts5ApiInvoke($/;"	f	file:
fts5ApiPhraseCount	testdocs/sqlite3.c	/^static int fts5ApiPhraseCount(Fts5Context *pCtx){$/;"	f	file:
fts5ApiPhraseFirst	testdocs/sqlite3.c	/^static int fts5ApiPhraseFirst($/;"	f	file:
fts5ApiPhraseFirstColumn	testdocs/sqlite3.c	/^static int fts5ApiPhraseFirstColumn($/;"	f	file:
fts5ApiPhraseNext	testdocs/sqlite3.c	/^static void fts5ApiPhraseNext($/;"	f	file:
fts5ApiPhraseNextColumn	testdocs/sqlite3.c	/^static void fts5ApiPhraseNextColumn($/;"	f	file:
fts5ApiPhraseSize	testdocs/sqlite3.c	/^static int fts5ApiPhraseSize(Fts5Context *pCtx, int iPhrase){$/;"	f	file:
fts5ApiQueryPhrase	testdocs/sqlite3.c	/^static int fts5ApiQueryPhrase($/;"	f	file:
fts5ApiRowCount	testdocs/sqlite3.c	/^static int fts5ApiRowCount(Fts5Context *pCtx, i64 *pnRow){$/;"	f	file:
fts5ApiRowid	testdocs/sqlite3.c	/^static sqlite3_int64 fts5ApiRowid(Fts5Context *pCtx){$/;"	f	file:
fts5ApiSetAuxdata	testdocs/sqlite3.c	/^static int fts5ApiSetAuxdata($/;"	f	file:
fts5ApiTokenize	testdocs/sqlite3.c	/^static int fts5ApiTokenize($/;"	f	file:
fts5ApiUserData	testdocs/sqlite3.c	/^static void *fts5ApiUserData(Fts5Context *pCtx){$/;"	f	file:
fts5AppendPoslist	testdocs/sqlite3.c	/^static void fts5AppendPoslist($/;"	f	file:
fts5AppendRowid	testdocs/sqlite3.c	/^static void fts5AppendRowid($/;"	f	file:
fts5AsciiAddExceptions	testdocs/sqlite3.c	/^static void fts5AsciiAddExceptions($/;"	f	file:
fts5AsciiCreate	testdocs/sqlite3.c	/^static int fts5AsciiCreate($/;"	f	file:
fts5AsciiDelete	testdocs/sqlite3.c	/^static void fts5AsciiDelete(Fts5Tokenizer *p){$/;"	f	file:
fts5AsciiTokenize	testdocs/sqlite3.c	/^static int fts5AsciiTokenize($/;"	f	file:
fts5AssertComparisonResult	testdocs/sqlite3.c	/^static void fts5AssertComparisonResult($/;"	f	file:
fts5AssertMultiIterSetup	testdocs/sqlite3.c	/^# define fts5AssertMultiIterSetup(/;"	d	file:
fts5AssertMultiIterSetup	testdocs/sqlite3.c	/^static void fts5AssertMultiIterSetup(Fts5Index *p, Fts5Iter *pIter){$/;"	f	file:
fts5BeginMethod	testdocs/sqlite3.c	/^static int fts5BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5BestIndexMethod	testdocs/sqlite3.c	/^static int fts5BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts5Bm25Function	testdocs/sqlite3.c	/^static void fts5Bm25Function($/;"	f	file:
fts5Bm25GetData	testdocs/sqlite3.c	/^static int fts5Bm25GetData($/;"	f	file:
fts5BufferAppendBlob	testdocs/sqlite3.c	/^#define fts5BufferAppendBlob(/;"	d	file:
fts5BufferAppendVarint	testdocs/sqlite3.c	/^#define fts5BufferAppendVarint(/;"	d	file:
fts5BufferCompare	testdocs/sqlite3.c	/^static int fts5BufferCompare(Fts5Buffer *pLeft, Fts5Buffer *pRight){$/;"	f	file:
fts5BufferCompareBlob	testdocs/sqlite3.c	/^static int fts5BufferCompareBlob($/;"	f	file:
fts5BufferFree	testdocs/sqlite3.c	/^#define fts5BufferFree(/;"	d	file:
fts5BufferGrow	testdocs/sqlite3.c	/^#define fts5BufferGrow(/;"	d	file:
fts5BufferSafeAppendBlob	testdocs/sqlite3.c	/^#define fts5BufferSafeAppendBlob(/;"	d	file:
fts5BufferSafeAppendVarint	testdocs/sqlite3.c	/^#define fts5BufferSafeAppendVarint(/;"	d	file:
fts5BufferSet	testdocs/sqlite3.c	/^#define fts5BufferSet(/;"	d	file:
fts5BufferSwap	testdocs/sqlite3.c	/^static void fts5BufferSwap(Fts5Buffer *p1, Fts5Buffer *p2){$/;"	f	file:
fts5BufferZero	testdocs/sqlite3.c	/^#define fts5BufferZero(/;"	d	file:
fts5CInstIterInit	testdocs/sqlite3.c	/^static int fts5CInstIterInit($/;"	f	file:
fts5CInstIterNext	testdocs/sqlite3.c	/^static int fts5CInstIterNext(CInstIter *pIter){$/;"	f	file:
fts5CacheInstArray	testdocs/sqlite3.c	/^static int fts5CacheInstArray(Fts5Cursor *pCsr){$/;"	f	file:
fts5CheckTransactionState	testdocs/sqlite3.c	/^# define fts5CheckTransactionState(/;"	d	file:
fts5CheckTransactionState	testdocs/sqlite3.c	/^static void fts5CheckTransactionState(Fts5Table *p, int op, int iSavepoint){$/;"	f	file:
fts5ChunkIterate	testdocs/sqlite3.c	/^static void fts5ChunkIterate($/;"	f	file:
fts5CloneColset	testdocs/sqlite3.c	/^static Fts5Colset *fts5CloneColset(int *pRc, Fts5Colset *pOrig){$/;"	f	file:
fts5CloseMethod	testdocs/sqlite3.c	/^static int fts5CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5CloseReader	testdocs/sqlite3.c	/^static void fts5CloseReader(Fts5Index *p){$/;"	f	file:
fts5ColumnMethod	testdocs/sqlite3.c	/^static int fts5ColumnMethod($/;"	f	file:
fts5ColumnSizeCb	testdocs/sqlite3.c	/^static int fts5ColumnSizeCb($/;"	f	file:
fts5CommitMethod	testdocs/sqlite3.c	/^static int fts5CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5ConfigDefaultTokenizer	testdocs/sqlite3.c	/^static int fts5ConfigDefaultTokenizer(Fts5Global *pGlobal, Fts5Config *pConfig){$/;"	f	file:
fts5ConfigGobbleWord	testdocs/sqlite3.c	/^static const char *fts5ConfigGobbleWord($/;"	f	file:
fts5ConfigMakeExprlist	testdocs/sqlite3.c	/^static int fts5ConfigMakeExprlist(Fts5Config *p){$/;"	f	file:
fts5ConfigParseColumn	testdocs/sqlite3.c	/^static int fts5ConfigParseColumn($/;"	f	file:
fts5ConfigParseSpecial	testdocs/sqlite3.c	/^static int fts5ConfigParseSpecial($/;"	f	file:
fts5ConfigSetEnum	testdocs/sqlite3.c	/^static int fts5ConfigSetEnum($/;"	f	file:
fts5ConfigSkipArgs	testdocs/sqlite3.c	/^static const char *fts5ConfigSkipArgs(const char *pIn){$/;"	f	file:
fts5ConfigSkipBareword	testdocs/sqlite3.c	/^static const char *fts5ConfigSkipBareword(const char *pIn){$/;"	f	file:
fts5ConfigSkipLiteral	testdocs/sqlite3.c	/^static const char *fts5ConfigSkipLiteral(const char *pIn){$/;"	f	file:
fts5ConfigSkipWhitespace	testdocs/sqlite3.c	/^static const char *fts5ConfigSkipWhitespace(const char *pIn){$/;"	f	file:
fts5ConnectMethod	testdocs/sqlite3.c	/^static int fts5ConnectMethod($/;"	f	file:
fts5CountCb	testdocs/sqlite3.c	/^static int fts5CountCb($/;"	f	file:
fts5CreateAux	testdocs/sqlite3.c	/^static int fts5CreateAux($/;"	f	file:
fts5CreateMethod	testdocs/sqlite3.c	/^static int fts5CreateMethod($/;"	f	file:
fts5CreateTokenizer	testdocs/sqlite3.c	/^static int fts5CreateTokenizer($/;"	f	file:
fts5CsrNewrow	testdocs/sqlite3.c	/^static void fts5CsrNewrow(Fts5Cursor *pCsr){$/;"	f	file:
fts5CsrPoslist	testdocs/sqlite3.c	/^static int fts5CsrPoslist($/;"	f	file:
fts5CursorFirst	testdocs/sqlite3.c	/^static int fts5CursorFirst(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){$/;"	f	file:
fts5CursorFirstSorted	testdocs/sqlite3.c	/^static int fts5CursorFirstSorted(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){$/;"	f	file:
fts5CursorFromCsrid	testdocs/sqlite3.c	/^static Fts5Cursor *fts5CursorFromCsrid(Fts5Global *pGlobal, i64 iCsrId){$/;"	f	file:
fts5CursorParseRank	testdocs/sqlite3.c	/^static int fts5CursorParseRank($/;"	f	file:
fts5CursorReseek	testdocs/sqlite3.c	/^static int fts5CursorReseek(Fts5Cursor *pCsr, int *pbSkip){$/;"	f	file:
fts5CursorRowid	testdocs/sqlite3.c	/^static i64 fts5CursorRowid(Fts5Cursor *pCsr){$/;"	f	file:
fts5DataDelete	testdocs/sqlite3.c	/^static void fts5DataDelete(Fts5Index *p, i64 iFirst, i64 iLast){$/;"	f	file:
fts5DataRead	testdocs/sqlite3.c	/^static Fts5Data *fts5DataRead(Fts5Index *p, i64 iRowid){$/;"	f	file:
fts5DataRelease	testdocs/sqlite3.c	/^static void fts5DataRelease(Fts5Data *pData){$/;"	f	file:
fts5DataRemoveSegment	testdocs/sqlite3.c	/^static void fts5DataRemoveSegment(Fts5Index *p, int iSegid){$/;"	f	file:
fts5DataWrite	testdocs/sqlite3.c	/^static void fts5DataWrite(Fts5Index *p, i64 iRowid, const u8 *pData, int nData){$/;"	f	file:
fts5DebugRowid	testdocs/sqlite3.c	/^static void fts5DebugRowid(int *pRc, Fts5Buffer *pBuf, i64 iKey){$/;"	f	file:
fts5DebugStructure	testdocs/sqlite3.c	/^static void fts5DebugStructure($/;"	f	file:
fts5DecodeAverages	testdocs/sqlite3.c	/^static void fts5DecodeAverages($/;"	f	file:
fts5DecodeDoclist	testdocs/sqlite3.c	/^static int fts5DecodeDoclist(int *pRc, Fts5Buffer *pBuf, const u8 *a, int n){$/;"	f	file:
fts5DecodeFunction	testdocs/sqlite3.c	/^static void fts5DecodeFunction($/;"	f	file:
fts5DecodePoslist	testdocs/sqlite3.c	/^static int fts5DecodePoslist(int *pRc, Fts5Buffer *pBuf, const u8 *a, int n){$/;"	f	file:
fts5DecodeRowid	testdocs/sqlite3.c	/^static void fts5DecodeRowid($/;"	f	file:
fts5DecodeRowidList	testdocs/sqlite3.c	/^static void fts5DecodeRowidList($/;"	f	file:
fts5DecodeStructure	testdocs/sqlite3.c	/^static void fts5DecodeStructure($/;"	f	file:
fts5Dequote	testdocs/sqlite3.c	/^static int fts5Dequote(char *z){$/;"	f	file:
fts5DestroyMethod	testdocs/sqlite3.c	/^static int fts5DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5DisconnectMethod	testdocs/sqlite3.c	/^static int fts5DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5DlidxExtractFirstRowid	testdocs/sqlite3.c	/^static i64 fts5DlidxExtractFirstRowid(Fts5Buffer *pBuf){$/;"	f	file:
fts5DlidxIterEof	testdocs/sqlite3.c	/^static int fts5DlidxIterEof(Fts5Index *p, Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterFirst	testdocs/sqlite3.c	/^static int fts5DlidxIterFirst(Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterFree	testdocs/sqlite3.c	/^static void fts5DlidxIterFree(Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterInit	testdocs/sqlite3.c	/^static Fts5DlidxIter *fts5DlidxIterInit($/;"	f	file:
fts5DlidxIterLast	testdocs/sqlite3.c	/^static void fts5DlidxIterLast(Fts5Index *p, Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterNext	testdocs/sqlite3.c	/^static int fts5DlidxIterNext(Fts5Index *p, Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterNextR	testdocs/sqlite3.c	/^static int fts5DlidxIterNextR(Fts5Index *p, Fts5DlidxIter *pIter, int iLvl){$/;"	f	file:
fts5DlidxIterPgno	testdocs/sqlite3.c	/^static int fts5DlidxIterPgno(Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterPrev	testdocs/sqlite3.c	/^static int fts5DlidxIterPrev(Fts5Index *p, Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterPrevR	testdocs/sqlite3.c	/^static int fts5DlidxIterPrevR(Fts5Index *p, Fts5DlidxIter *pIter, int iLvl){$/;"	f	file:
fts5DlidxIterRowid	testdocs/sqlite3.c	/^static i64 fts5DlidxIterRowid(Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxLvlNext	testdocs/sqlite3.c	/^static int fts5DlidxLvlNext(Fts5DlidxLvl *pLvl){$/;"	f	file:
fts5DlidxLvlPrev	testdocs/sqlite3.c	/^static int fts5DlidxLvlPrev(Fts5DlidxLvl *pLvl){$/;"	f	file:
fts5DoclistIterInit	testdocs/sqlite3.c	/^static void fts5DoclistIterInit($/;"	f	file:
fts5DoclistIterNext	testdocs/sqlite3.c	/^static void fts5DoclistIterNext(Fts5DoclistIter *pIter){$/;"	f	file:
fts5EntryKey	testdocs/sqlite3.c	/^#define fts5EntryKey(/;"	d	file:
fts5EofMethod	testdocs/sqlite3.c	/^static int fts5EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5ExecPrintf	testdocs/sqlite3.c	/^static int fts5ExecPrintf($/;"	f	file:
fts5ExprAddChildren	testdocs/sqlite3.c	/^static void fts5ExprAddChildren(Fts5ExprNode *p, Fts5ExprNode *pSub){$/;"	f	file:
fts5ExprAdvanceto	testdocs/sqlite3.c	/^static int fts5ExprAdvanceto($/;"	f	file:
fts5ExprAssignXNext	testdocs/sqlite3.c	/^static void fts5ExprAssignXNext(Fts5ExprNode *pNode){$/;"	f	file:
fts5ExprCheckPoslists	testdocs/sqlite3.c	/^static int fts5ExprCheckPoslists(Fts5ExprNode *pNode, i64 iRowid){$/;"	f	file:
fts5ExprClearPoslists	testdocs/sqlite3.c	/^static void fts5ExprClearPoslists(Fts5ExprNode *pNode){$/;"	f	file:
fts5ExprColsetTest	testdocs/sqlite3.c	/^static int fts5ExprColsetTest(Fts5Colset *pColset, int iCol){$/;"	f	file:
fts5ExprFold	testdocs/sqlite3.c	/^static void fts5ExprFold($/;"	f	file:
fts5ExprFunction	testdocs/sqlite3.c	/^static void fts5ExprFunction($/;"	f	file:
fts5ExprFunctionHr	testdocs/sqlite3.c	/^static void fts5ExprFunctionHr($/;"	f	file:
fts5ExprFunctionTcl	testdocs/sqlite3.c	/^static void fts5ExprFunctionTcl($/;"	f	file:
fts5ExprGetToken	testdocs/sqlite3.c	/^static int fts5ExprGetToken($/;"	f	file:
fts5ExprIsAlnum	testdocs/sqlite3.c	/^static void fts5ExprIsAlnum($/;"	f	file:
fts5ExprIsspace	testdocs/sqlite3.c	/^static int fts5ExprIsspace(char t){$/;"	f	file:
fts5ExprNearInitAll	testdocs/sqlite3.c	/^static int fts5ExprNearInitAll($/;"	f	file:
fts5ExprNearIsMatch	testdocs/sqlite3.c	/^static int fts5ExprNearIsMatch(int *pRc, Fts5ExprNearset *pNear){$/;"	f	file:
fts5ExprNearTest	testdocs/sqlite3.c	/^static int fts5ExprNearTest($/;"	f	file:
fts5ExprNodeFirst	testdocs/sqlite3.c	/^static int fts5ExprNodeFirst(Fts5Expr *pExpr, Fts5ExprNode *pNode){$/;"	f	file:
fts5ExprNodeNext	testdocs/sqlite3.c	/^#define fts5ExprNodeNext(/;"	d	file:
fts5ExprNodeNext_AND	testdocs/sqlite3.c	/^static int fts5ExprNodeNext_AND($/;"	f	file:
fts5ExprNodeNext_NOT	testdocs/sqlite3.c	/^static int fts5ExprNodeNext_NOT($/;"	f	file:
fts5ExprNodeNext_OR	testdocs/sqlite3.c	/^static int fts5ExprNodeNext_OR($/;"	f	file:
fts5ExprNodeNext_STRING	testdocs/sqlite3.c	/^static int fts5ExprNodeNext_STRING($/;"	f	file:
fts5ExprNodeNext_TERM	testdocs/sqlite3.c	/^static int fts5ExprNodeNext_TERM($/;"	f	file:
fts5ExprNodeTest	testdocs/sqlite3.c	/^static int fts5ExprNodeTest($/;"	f	file:
fts5ExprNodeTest_AND	testdocs/sqlite3.c	/^static int fts5ExprNodeTest_AND($/;"	f	file:
fts5ExprNodeTest_NOT	testdocs/sqlite3.c	/^static int fts5ExprNodeTest_NOT($/;"	f	file:
fts5ExprNodeTest_OR	testdocs/sqlite3.c	/^static void fts5ExprNodeTest_OR($/;"	f	file:
fts5ExprNodeTest_STRING	testdocs/sqlite3.c	/^static int fts5ExprNodeTest_STRING($/;"	f	file:
fts5ExprNodeTest_TERM	testdocs/sqlite3.c	/^static int fts5ExprNodeTest_TERM($/;"	f	file:
fts5ExprNodeZeroPoslist	testdocs/sqlite3.c	/^static void fts5ExprNodeZeroPoslist(Fts5ExprNode *pNode){$/;"	f	file:
fts5ExprPhraseFree	testdocs/sqlite3.c	/^static void fts5ExprPhraseFree(Fts5ExprPhrase *pPhrase){$/;"	f	file:
fts5ExprPhraseIsMatch	testdocs/sqlite3.c	/^static int fts5ExprPhraseIsMatch($/;"	f	file:
fts5ExprPopulatePoslistsCb	testdocs/sqlite3.c	/^static int fts5ExprPopulatePoslistsCb($/;"	f	file:
fts5ExprPrint	testdocs/sqlite3.c	/^static char *fts5ExprPrint(Fts5Config *pConfig, Fts5ExprNode *pExpr){$/;"	f	file:
fts5ExprPrintTcl	testdocs/sqlite3.c	/^static char *fts5ExprPrintTcl($/;"	f	file:
fts5ExprSetEof	testdocs/sqlite3.c	/^static void fts5ExprSetEof(Fts5ExprNode *pNode){$/;"	f	file:
fts5ExprSynonymAdvanceto	testdocs/sqlite3.c	/^static int fts5ExprSynonymAdvanceto($/;"	f	file:
fts5ExprSynonymList	testdocs/sqlite3.c	/^static int fts5ExprSynonymList($/;"	f	file:
fts5ExprSynonymRowid	testdocs/sqlite3.c	/^static i64 fts5ExprSynonymRowid(Fts5ExprTerm *pTerm, int bDesc, int *pbEof){$/;"	f	file:
fts5ExprTermPrint	testdocs/sqlite3.c	/^static char *fts5ExprTermPrint(Fts5ExprTerm *pTerm){$/;"	f	file:
fts5FastGetVarint32	testdocs/sqlite3.c	/^#define fts5FastGetVarint32(/;"	d	file:
fts5FilterMethod	testdocs/sqlite3.c	/^static int fts5FilterMethod($/;"	f	file:
fts5FindAuxiliary	testdocs/sqlite3.c	/^static Fts5Auxiliary *fts5FindAuxiliary(Fts5Table *pTab, const char *zName){$/;"	f	file:
fts5FindFunctionMethod	testdocs/sqlite3.c	/^static int fts5FindFunctionMethod($/;"	f	file:
fts5FindRankFunction	testdocs/sqlite3.c	/^static int fts5FindRankFunction(Fts5Cursor *pCsr){$/;"	f	file:
fts5FindTokenizer	testdocs/sqlite3.c	/^static int fts5FindTokenizer($/;"	f	file:
fts5FlushOneHash	testdocs/sqlite3.c	/^static void fts5FlushOneHash(Fts5Index *p){$/;"	f	file:
fts5FreeCursorComponents	testdocs/sqlite3.c	/^static void fts5FreeCursorComponents(Fts5Cursor *pCsr){$/;"	f	file:
fts5FreeVtab	testdocs/sqlite3.c	/^static void fts5FreeVtab(Fts5Table *pTab){$/;"	f	file:
fts5Fts5Func	testdocs/sqlite3.c	/^static void fts5Fts5Func($/;"	f	file:
fts5GetPoslistSize	testdocs/sqlite3.c	/^static int fts5GetPoslistSize(const u8 *p, int *pnSz, int *pbDel){$/;"	f	file:
fts5GetRowidLimit	testdocs/sqlite3.c	/^static i64 fts5GetRowidLimit(sqlite3_value *pVal, i64 iDefault){$/;"	f	file:
fts5GetU16	testdocs/sqlite3.c	/^static u16 fts5GetU16(const u8 *aIn){$/;"	f	file:
fts5GetVarint	testdocs/sqlite3.c	/^#define fts5GetVarint /;"	d	file:
fts5GetVarint32	testdocs/sqlite3.c	/^#define fts5GetVarint32(/;"	d	file:
fts5HashAddPoslistSize	testdocs/sqlite3.c	/^static void fts5HashAddPoslistSize(Fts5Hash *pHash, Fts5HashEntry *p){$/;"	f	file:
fts5HashEntryMerge	testdocs/sqlite3.c	/^static Fts5HashEntry *fts5HashEntryMerge($/;"	f	file:
fts5HashEntrySort	testdocs/sqlite3.c	/^static int fts5HashEntrySort($/;"	f	file:
fts5HashKey	testdocs/sqlite3.c	/^static unsigned int fts5HashKey(int nSlot, const u8 *p, int n){$/;"	f	file:
fts5HashKey2	testdocs/sqlite3.c	/^static unsigned int fts5HashKey2(int nSlot, u8 b, const u8 *p, int n){$/;"	f	file:
fts5HashResize	testdocs/sqlite3.c	/^static int fts5HashResize(Fts5Hash *pHash){$/;"	f	file:
fts5HighlightAppend	testdocs/sqlite3.c	/^static void fts5HighlightAppend($/;"	f	file:
fts5HighlightCb	testdocs/sqlite3.c	/^static int fts5HighlightCb($/;"	f	file:
fts5HighlightFunction	testdocs/sqlite3.c	/^static void fts5HighlightFunction($/;"	f	file:
fts5IdxMalloc	testdocs/sqlite3.c	/^static void *fts5IdxMalloc(Fts5Index *p, int nByte){$/;"	f	file:
fts5IdxSelectStmt	testdocs/sqlite3.c	/^static sqlite3_stmt *fts5IdxSelectStmt(Fts5Index *p){$/;"	f	file:
fts5IndexAutomerge	testdocs/sqlite3.c	/^static void fts5IndexAutomerge($/;"	f	file:
fts5IndexCharlen	testdocs/sqlite3.c	/^static int fts5IndexCharlen(const char *pIn, int nIn){$/;"	f	file:
fts5IndexColsetTest	testdocs/sqlite3.c	/^static int fts5IndexColsetTest(Fts5Colset *pColset, int iCol){$/;"	f	file:
fts5IndexCrisismerge	testdocs/sqlite3.c	/^static void fts5IndexCrisismerge($/;"	f	file:
fts5IndexDataVersion	testdocs/sqlite3.c	/^static i64 fts5IndexDataVersion(Fts5Index *p){$/;"	f	file:
fts5IndexDiscardData	testdocs/sqlite3.c	/^static void fts5IndexDiscardData(Fts5Index *p){$/;"	f	file:
fts5IndexExtractCol	testdocs/sqlite3.c	/^static int fts5IndexExtractCol($/;"	f	file:
fts5IndexExtractColset	testdocs/sqlite3.c	/^static void fts5IndexExtractColset($/;"	f	file:
fts5IndexFlush	testdocs/sqlite3.c	/^static void fts5IndexFlush(Fts5Index *p){$/;"	f	file:
fts5IndexIntegrityCheckEmpty	testdocs/sqlite3.c	/^static void fts5IndexIntegrityCheckEmpty($/;"	f	file:
fts5IndexIntegrityCheckSegment	testdocs/sqlite3.c	/^static void fts5IndexIntegrityCheckSegment($/;"	f	file:
fts5IndexMerge	testdocs/sqlite3.c	/^static int fts5IndexMerge($/;"	f	file:
fts5IndexMergeLevel	testdocs/sqlite3.c	/^static void fts5IndexMergeLevel($/;"	f	file:
fts5IndexOptimizeStruct	testdocs/sqlite3.c	/^static Fts5Structure *fts5IndexOptimizeStruct($/;"	f	file:
fts5IndexPrepareStmt	testdocs/sqlite3.c	/^static int fts5IndexPrepareStmt($/;"	f	file:
fts5IndexReturn	testdocs/sqlite3.c	/^static int fts5IndexReturn(Fts5Index *p){$/;"	f	file:
fts5IndexSkipVarint	testdocs/sqlite3.c	/^#define fts5IndexSkipVarint(/;"	d	file:
fts5Init	testdocs/sqlite3.c	/^static int fts5Init(sqlite3 *db){$/;"	f	file:
fts5InitVtab	testdocs/sqlite3.c	/^static int fts5InitVtab($/;"	f	file:
fts5IntegrityCheckPgidx	testdocs/sqlite3.c	/^static void fts5IntegrityCheckPgidx(Fts5Index *p, Fts5Data *pLeaf){$/;"	f	file:
fts5IsContentless	testdocs/sqlite3.c	/^static int fts5IsContentless(Fts5Table *pTab){$/;"	f	file:
fts5IterSetOutputCb	testdocs/sqlite3.c	/^static void fts5IterSetOutputCb(int *pRc, Fts5Iter *pIter){$/;"	f	file:
fts5IterSetOutputs_Col	testdocs/sqlite3.c	/^static void fts5IterSetOutputs_Col(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5IterSetOutputs_Col100	testdocs/sqlite3.c	/^static void fts5IterSetOutputs_Col100(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5IterSetOutputs_Full	testdocs/sqlite3.c	/^static void fts5IterSetOutputs_Full(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5IterSetOutputs_Nocolset	testdocs/sqlite3.c	/^static void fts5IterSetOutputs_Nocolset(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5IterSetOutputs_None	testdocs/sqlite3.c	/^static void fts5IterSetOutputs_None(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5IterSetOutputs_Noop	testdocs/sqlite3.c	/^static void fts5IterSetOutputs_Noop(Fts5Iter *pUnused1, Fts5SegIter *pUnused2){$/;"	f	file:
fts5IterSetOutputs_ZeroColset	testdocs/sqlite3.c	/^static void fts5IterSetOutputs_ZeroColset(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5LeafFirstRowidOff	testdocs/sqlite3.c	/^#define fts5LeafFirstRowidOff(/;"	d	file:
fts5LeafFirstTermOff	testdocs/sqlite3.c	/^static int fts5LeafFirstTermOff(Fts5Data *pLeaf){$/;"	f	file:
fts5LeafIsTermless	testdocs/sqlite3.c	/^#define fts5LeafIsTermless(/;"	d	file:
fts5LeafRead	testdocs/sqlite3.c	/^static Fts5Data *fts5LeafRead(Fts5Index *p, i64 iRowid){$/;"	f	file:
fts5LeafSeek	testdocs/sqlite3.c	/^static void fts5LeafSeek($/;"	f	file:
fts5LeafTermOff	testdocs/sqlite3.c	/^#define fts5LeafTermOff(/;"	d	file:
fts5LocateTokenizer	testdocs/sqlite3.c	/^static Fts5TokenizerModule *fts5LocateTokenizer($/;"	f	file:
fts5LookaheadReaderInit	testdocs/sqlite3.c	/^static int fts5LookaheadReaderInit($/;"	f	file:
fts5LookaheadReaderNext	testdocs/sqlite3.c	/^static int fts5LookaheadReaderNext(Fts5LookaheadReader *p){$/;"	f	file:
fts5MergeAppendDocid	testdocs/sqlite3.c	/^#define fts5MergeAppendDocid(/;"	d	file:
fts5MergeChunkCallback	testdocs/sqlite3.c	/^static void fts5MergeChunkCallback($/;"	f	file:
fts5MergeColset	testdocs/sqlite3.c	/^static void fts5MergeColset(Fts5Colset *pColset, Fts5Colset *pMerge){$/;"	f	file:
fts5MergePrefixLists	testdocs/sqlite3.c	/^static void fts5MergePrefixLists($/;"	f	file:
fts5MergeRowidLists	testdocs/sqlite3.c	/^static void fts5MergeRowidLists($/;"	f	file:
fts5ModuleDestroy	testdocs/sqlite3.c	/^static void fts5ModuleDestroy(void *pCtx){$/;"	f	file:
fts5MultiIterAdvanceRowid	testdocs/sqlite3.c	/^static int fts5MultiIterAdvanceRowid($/;"	f	file:
fts5MultiIterAdvanced	testdocs/sqlite3.c	/^static void fts5MultiIterAdvanced($/;"	f	file:
fts5MultiIterAlloc	testdocs/sqlite3.c	/^static Fts5Iter *fts5MultiIterAlloc($/;"	f	file:
fts5MultiIterDoCompare	testdocs/sqlite3.c	/^static int fts5MultiIterDoCompare(Fts5Iter *pIter, int iOut){$/;"	f	file:
fts5MultiIterEof	testdocs/sqlite3.c	/^static int fts5MultiIterEof(Fts5Index *p, Fts5Iter *pIter){$/;"	f	file:
fts5MultiIterFree	testdocs/sqlite3.c	/^static void fts5MultiIterFree(Fts5Iter *pIter){$/;"	f	file:
fts5MultiIterIsEmpty	testdocs/sqlite3.c	/^static int fts5MultiIterIsEmpty(Fts5Index *p, Fts5Iter *pIter){$/;"	f	file:
fts5MultiIterNew	testdocs/sqlite3.c	/^static void fts5MultiIterNew($/;"	f	file:
fts5MultiIterNew2	testdocs/sqlite3.c	/^static void fts5MultiIterNew2($/;"	f	file:
fts5MultiIterNext	testdocs/sqlite3.c	/^static void fts5MultiIterNext($/;"	f	file:
fts5MultiIterNext2	testdocs/sqlite3.c	/^static void fts5MultiIterNext2($/;"	f	file:
fts5MultiIterNextFrom	testdocs/sqlite3.c	/^static void fts5MultiIterNextFrom($/;"	f	file:
fts5MultiIterRowid	testdocs/sqlite3.c	/^static i64 fts5MultiIterRowid(Fts5Iter *pIter){$/;"	f	file:
fts5MultiIterSetEof	testdocs/sqlite3.c	/^static void fts5MultiIterSetEof(Fts5Iter *pIter){$/;"	f	file:
fts5MultiIterTerm	testdocs/sqlite3.c	/^static const u8 *fts5MultiIterTerm(Fts5Iter *pIter, int *pn){$/;"	f	file:
fts5NewTransaction	testdocs/sqlite3.c	/^static int fts5NewTransaction(Fts5Table *pTab){$/;"	f	file:
fts5NextMethod	testdocs/sqlite3.c	/^static int fts5NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5NextRowid	testdocs/sqlite3.c	/^static void fts5NextRowid(Fts5Buffer *pBuf, int *piOff, i64 *piRowid){$/;"	f	file:
fts5NodeCompare	testdocs/sqlite3.c	/^static int fts5NodeCompare($/;"	f	file:
fts5OpenMethod	testdocs/sqlite3.c	/^static int fts5OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts5ParseAlloc	testdocs/sqlite3.c	/^static void *fts5ParseAlloc(u64 t){ return sqlite3_malloc((int)t); }$/;"	f	file:
fts5ParseColset	testdocs/sqlite3.c	/^static Fts5Colset *fts5ParseColset($/;"	f	file:
fts5ParseFree	testdocs/sqlite3.c	/^static void fts5ParseFree(void *p){ sqlite3_free(p); }$/;"	f	file:
fts5ParseSetColset	testdocs/sqlite3.c	/^static void fts5ParseSetColset($/;"	f	file:
fts5ParseStringFromToken	testdocs/sqlite3.c	/^static int fts5ParseStringFromToken(Fts5Token *pToken, char **pz){$/;"	f	file:
fts5ParseTokenize	testdocs/sqlite3.c	/^static int fts5ParseTokenize($/;"	f	file:
fts5PorterCb	testdocs/sqlite3.c	/^static int fts5PorterCb($/;"	f	file:
fts5PorterCreate	testdocs/sqlite3.c	/^static int fts5PorterCreate($/;"	f	file:
fts5PorterDelete	testdocs/sqlite3.c	/^static void fts5PorterDelete(Fts5Tokenizer *pTok){$/;"	f	file:
fts5PorterGobbleVC	testdocs/sqlite3.c	/^static int fts5PorterGobbleVC(char *zStem, int nStem, int bPrevCons){$/;"	f	file:
fts5PorterIsVowel	testdocs/sqlite3.c	/^static int fts5PorterIsVowel(char c, int bYIsVowel){$/;"	f	file:
fts5PorterStep1A	testdocs/sqlite3.c	/^static void fts5PorterStep1A(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterStep1B	testdocs/sqlite3.c	/^static int fts5PorterStep1B(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterStep1B2	testdocs/sqlite3.c	/^static int fts5PorterStep1B2(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterStep2	testdocs/sqlite3.c	/^static int fts5PorterStep2(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterStep3	testdocs/sqlite3.c	/^static int fts5PorterStep3(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterStep4	testdocs/sqlite3.c	/^static int fts5PorterStep4(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterTokenize	testdocs/sqlite3.c	/^static int fts5PorterTokenize($/;"	f	file:
fts5Porter_MEq1	testdocs/sqlite3.c	/^static int fts5Porter_MEq1(char *zStem, int nStem){$/;"	f	file:
fts5Porter_MGt0	testdocs/sqlite3.c	/^static int fts5Porter_MGt0(char *zStem, int nStem){$/;"	f	file:
fts5Porter_MGt1	testdocs/sqlite3.c	/^static int fts5Porter_MGt1(char *zStem, int nStem){$/;"	f	file:
fts5Porter_MGt1_and_S_or_T	testdocs/sqlite3.c	/^static int fts5Porter_MGt1_and_S_or_T(char *zStem, int nStem){$/;"	f	file:
fts5Porter_Ostar	testdocs/sqlite3.c	/^static int fts5Porter_Ostar(char *zStem, int nStem){$/;"	f	file:
fts5Porter_Vowel	testdocs/sqlite3.c	/^static int fts5Porter_Vowel(char *zStem, int nStem){$/;"	f	file:
fts5PoslistBlob	testdocs/sqlite3.c	/^static int fts5PoslistBlob(sqlite3_context *pCtx, Fts5Cursor *pCsr){$/;"	f	file:
fts5PoslistCallback	testdocs/sqlite3.c	/^static void fts5PoslistCallback($/;"	f	file:
fts5PoslistFilterCallback	testdocs/sqlite3.c	/^static void fts5PoslistFilterCallback($/;"	f	file:
fts5PoslistOffsetsCallback	testdocs/sqlite3.c	/^static void fts5PoslistOffsetsCallback($/;"	f	file:
fts5PoslistPrefix	testdocs/sqlite3.c	/^static int fts5PoslistPrefix(const u8 *aBuf, int nMax){$/;"	f	file:
fts5PrefixCompress	testdocs/sqlite3.c	/^static int fts5PrefixCompress(int nOld, const u8 *pOld, const u8 *pNew){$/;"	f	file:
fts5PrepareStatement	testdocs/sqlite3.c	/^static int fts5PrepareStatement($/;"	f	file:
fts5PrintStructure	testdocs/sqlite3.c	/^# define fts5PrintStructure(/;"	d	file:
fts5PrintfAppend	testdocs/sqlite3.c	/^static char *fts5PrintfAppend(char *zApp, const char *zFmt, ...){$/;"	f	file:
fts5PutU16	testdocs/sqlite3.c	/^static void fts5PutU16(u8 *aOut, u16 iVal){$/;"	f	file:
fts5PutVarint64	testdocs/sqlite3.c	/^static int FTS5_NOINLINE fts5PutVarint64(unsigned char *p, u64 v){$/;"	f	file:
fts5QueryCksum	testdocs/sqlite3.c	/^static int fts5QueryCksum($/;"	f	file:
fts5ReleaseMethod	testdocs/sqlite3.c	/^static int fts5ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts5RenameMethod	testdocs/sqlite3.c	/^static int fts5RenameMethod($/;"	f	file:
fts5RollbackMethod	testdocs/sqlite3.c	/^static int fts5RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5RollbackToMethod	testdocs/sqlite3.c	/^static int fts5RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts5RowidCmp	testdocs/sqlite3.c	/^static int fts5RowidCmp($/;"	f	file:
fts5RowidFunction	testdocs/sqlite3.c	/^static void fts5RowidFunction($/;"	f	file:
fts5RowidMethod	testdocs/sqlite3.c	/^static int fts5RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts5SavepointMethod	testdocs/sqlite3.c	/^static int fts5SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts5SeekCursor	testdocs/sqlite3.c	/^static int fts5SeekCursor(Fts5Cursor *pCsr, int bErrormsg){$/;"	f	file:
fts5SegIterClear	testdocs/sqlite3.c	/^static void fts5SegIterClear(Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterGotoPage	testdocs/sqlite3.c	/^static void fts5SegIterGotoPage($/;"	f	file:
fts5SegIterHashInit	testdocs/sqlite3.c	/^static void fts5SegIterHashInit($/;"	f	file:
fts5SegIterInit	testdocs/sqlite3.c	/^static void fts5SegIterInit($/;"	f	file:
fts5SegIterLoadDlidx	testdocs/sqlite3.c	/^static void fts5SegIterLoadDlidx(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterLoadNPos	testdocs/sqlite3.c	/^static void fts5SegIterLoadNPos(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterLoadRowid	testdocs/sqlite3.c	/^static void fts5SegIterLoadRowid(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterLoadTerm	testdocs/sqlite3.c	/^static void fts5SegIterLoadTerm(Fts5Index *p, Fts5SegIter *pIter, int nKeep){$/;"	f	file:
fts5SegIterNext	testdocs/sqlite3.c	/^static void fts5SegIterNext($/;"	f	file:
fts5SegIterNextFrom	testdocs/sqlite3.c	/^static void fts5SegIterNextFrom($/;"	f	file:
fts5SegIterNextPage	testdocs/sqlite3.c	/^static void fts5SegIterNextPage($/;"	f	file:
fts5SegIterNext_None	testdocs/sqlite3.c	/^static void fts5SegIterNext_None($/;"	f	file:
fts5SegIterNext_Reverse	testdocs/sqlite3.c	/^static void fts5SegIterNext_Reverse($/;"	f	file:
fts5SegIterReverse	testdocs/sqlite3.c	/^static void fts5SegIterReverse(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterReverseInitPage	testdocs/sqlite3.c	/^static void fts5SegIterReverseInitPage(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterReverseNewPage	testdocs/sqlite3.c	/^static void fts5SegIterReverseNewPage(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterSeekInit	testdocs/sqlite3.c	/^static void fts5SegIterSeekInit($/;"	f	file:
fts5SegIterSetNext	testdocs/sqlite3.c	/^static void fts5SegIterSetNext(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegiterPoslist	testdocs/sqlite3.c	/^static void fts5SegiterPoslist($/;"	f	file:
fts5SegmentSize	testdocs/sqlite3.c	/^static int fts5SegmentSize(Fts5StructureSegment *pSeg){$/;"	f	file:
fts5SentenceFinderAdd	testdocs/sqlite3.c	/^static int fts5SentenceFinderAdd(Fts5SFinder *p, int iAdd){$/;"	f	file:
fts5SentenceFinderCb	testdocs/sqlite3.c	/^static int fts5SentenceFinderCb($/;"	f	file:
fts5SetUniqueFlag	testdocs/sqlite3.c	/^static void fts5SetUniqueFlag(sqlite3_index_info *pIdxInfo){$/;"	f	file:
fts5SetVtabError	testdocs/sqlite3.c	/^static void fts5SetVtabError(Fts5Table *p, const char *zFormat, ...){$/;"	f	file:
fts5SetupPrefixIter	testdocs/sqlite3.c	/^static void fts5SetupPrefixIter($/;"	f	file:
fts5SnippetFunction	testdocs/sqlite3.c	/^static void fts5SnippetFunction($/;"	f	file:
fts5SnippetScore	testdocs/sqlite3.c	/^static int fts5SnippetScore($/;"	f	file:
fts5SorterNext	testdocs/sqlite3.c	/^static int fts5SorterNext(Fts5Cursor *pCsr){$/;"	f	file:
fts5SourceIdFunc	testdocs/sqlite3.c	/^static void fts5SourceIdFunc($/;"	f	file:
fts5SpecialDelete	testdocs/sqlite3.c	/^static int fts5SpecialDelete($/;"	f	file:
fts5SpecialInsert	testdocs/sqlite3.c	/^static int fts5SpecialInsert($/;"	f	file:
fts5SpecialMatch	testdocs/sqlite3.c	/^static int fts5SpecialMatch($/;"	f	file:
fts5StmtType	testdocs/sqlite3.c	/^static int fts5StmtType(Fts5Cursor *pCsr){$/;"	f	file:
fts5StorageCount	testdocs/sqlite3.c	/^static int fts5StorageCount(Fts5Storage *p, const char *zSuffix, i64 *pnRow){$/;"	f	file:
fts5StorageDecodeSizeArray	testdocs/sqlite3.c	/^static int fts5StorageDecodeSizeArray($/;"	f	file:
fts5StorageDeleteFromIndex	testdocs/sqlite3.c	/^static int fts5StorageDeleteFromIndex($/;"	f	file:
fts5StorageGetStmt	testdocs/sqlite3.c	/^static int fts5StorageGetStmt($/;"	f	file:
fts5StorageInsert	testdocs/sqlite3.c	/^static void fts5StorageInsert($/;"	f	file:
fts5StorageInsertCallback	testdocs/sqlite3.c	/^static int fts5StorageInsertCallback($/;"	f	file:
fts5StorageInsertDocsize	testdocs/sqlite3.c	/^static int fts5StorageInsertDocsize($/;"	f	file:
fts5StorageIntegrityCallback	testdocs/sqlite3.c	/^static int fts5StorageIntegrityCallback($/;"	f	file:
fts5StorageLoadTotals	testdocs/sqlite3.c	/^static int fts5StorageLoadTotals(Fts5Storage *p, int bCache){$/;"	f	file:
fts5StorageNewRowid	testdocs/sqlite3.c	/^static int fts5StorageNewRowid(Fts5Storage *p, i64 *piRowid){$/;"	f	file:
fts5StorageRenameOne	testdocs/sqlite3.c	/^static void fts5StorageRenameOne($/;"	f	file:
fts5StorageSaveTotals	testdocs/sqlite3.c	/^static int fts5StorageSaveTotals(Fts5Storage *p){$/;"	f	file:
fts5StructureAddLevel	testdocs/sqlite3.c	/^static void fts5StructureAddLevel(int *pRc, Fts5Structure **ppStruct){$/;"	f	file:
fts5StructureCountSegments	testdocs/sqlite3.c	/^static int fts5StructureCountSegments(Fts5Structure *pStruct){$/;"	f	file:
fts5StructureDecode	testdocs/sqlite3.c	/^static int fts5StructureDecode($/;"	f	file:
fts5StructureExtendLevel	testdocs/sqlite3.c	/^static void fts5StructureExtendLevel($/;"	f	file:
fts5StructureInvalidate	testdocs/sqlite3.c	/^static void fts5StructureInvalidate(Fts5Index *p){$/;"	f	file:
fts5StructurePromote	testdocs/sqlite3.c	/^static void fts5StructurePromote($/;"	f	file:
fts5StructurePromoteTo	testdocs/sqlite3.c	/^static void fts5StructurePromoteTo($/;"	f	file:
fts5StructureRead	testdocs/sqlite3.c	/^static Fts5Structure *fts5StructureRead(Fts5Index *p){$/;"	f	file:
fts5StructureReadUncached	testdocs/sqlite3.c	/^static Fts5Structure *fts5StructureReadUncached(Fts5Index *p){$/;"	f	file:
fts5StructureRef	testdocs/sqlite3.c	/^static void fts5StructureRef(Fts5Structure *pStruct){$/;"	f	file:
fts5StructureRelease	testdocs/sqlite3.c	/^static void fts5StructureRelease(Fts5Structure *pStruct){$/;"	f	file:
fts5StructureWrite	testdocs/sqlite3.c	/^static void fts5StructureWrite(Fts5Index *p, Fts5Structure *pStruct){$/;"	f	file:
fts5SyncMethod	testdocs/sqlite3.c	/^static int fts5SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5TestDlidxReverse	testdocs/sqlite3.c	/^# define fts5TestDlidxReverse(/;"	d	file:
fts5TestDlidxReverse	testdocs/sqlite3.c	/^static void fts5TestDlidxReverse($/;"	f	file:
fts5TestTerm	testdocs/sqlite3.c	/^# define fts5TestTerm(/;"	d	file:
fts5TestTerm	testdocs/sqlite3.c	/^static void fts5TestTerm($/;"	f	file:
fts5TrimSegments	testdocs/sqlite3.c	/^static void fts5TrimSegments(Fts5Index *p, Fts5Iter *pIter){$/;"	f	file:
fts5TripCursors	testdocs/sqlite3.c	/^static void fts5TripCursors(Fts5Table *pTab){$/;"	f	file:
fts5UnicodeAddExceptions	testdocs/sqlite3.c	/^static int fts5UnicodeAddExceptions($/;"	f	file:
fts5UnicodeCreate	testdocs/sqlite3.c	/^static int fts5UnicodeCreate($/;"	f	file:
fts5UnicodeDelete	testdocs/sqlite3.c	/^static void fts5UnicodeDelete(Fts5Tokenizer *pTok){$/;"	f	file:
fts5UnicodeIsAlnum	testdocs/sqlite3.c	/^static int fts5UnicodeIsAlnum(Unicode61Tokenizer *p, int iCode){$/;"	f	file:
fts5UnicodeIsException	testdocs/sqlite3.c	/^static int fts5UnicodeIsException(Unicode61Tokenizer *p, int iCode){$/;"	f	file:
fts5UnicodeTokenize	testdocs/sqlite3.c	/^static int fts5UnicodeTokenize($/;"	f	file:
fts5UpdateMethod	testdocs/sqlite3.c	/^static int fts5UpdateMethod($/;"	f	file:
fts5VocabBestIndexMethod	testdocs/sqlite3.c	/^static int fts5VocabBestIndexMethod($/;"	f	file:
fts5VocabCloseMethod	testdocs/sqlite3.c	/^static int fts5VocabCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5VocabColumnMethod	testdocs/sqlite3.c	/^static int fts5VocabColumnMethod($/;"	f	file:
fts5VocabConnectMethod	testdocs/sqlite3.c	/^static int fts5VocabConnectMethod($/;"	f	file:
fts5VocabCreateMethod	testdocs/sqlite3.c	/^static int fts5VocabCreateMethod($/;"	f	file:
fts5VocabDestroyMethod	testdocs/sqlite3.c	/^static int fts5VocabDestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5VocabDisconnectMethod	testdocs/sqlite3.c	/^static int fts5VocabDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5VocabEofMethod	testdocs/sqlite3.c	/^static int fts5VocabEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5VocabFilterMethod	testdocs/sqlite3.c	/^static int fts5VocabFilterMethod($/;"	f	file:
fts5VocabInitVtab	testdocs/sqlite3.c	/^static int fts5VocabInitVtab($/;"	f	file:
fts5VocabNextMethod	testdocs/sqlite3.c	/^static int fts5VocabNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5VocabOpenMethod	testdocs/sqlite3.c	/^static int fts5VocabOpenMethod($/;"	f	file:
fts5VocabResetCursor	testdocs/sqlite3.c	/^static void fts5VocabResetCursor(Fts5VocabCursor *pCsr){$/;"	f	file:
fts5VocabRowidMethod	testdocs/sqlite3.c	/^static int fts5VocabRowidMethod($/;"	f	file:
fts5VocabTableType	testdocs/sqlite3.c	/^static int fts5VocabTableType(const char *zType, char **pzErr, int *peType){$/;"	f	file:
fts5WriteAppendPoslistData	testdocs/sqlite3.c	/^static void fts5WriteAppendPoslistData($/;"	f	file:
fts5WriteAppendRowid	testdocs/sqlite3.c	/^static void fts5WriteAppendRowid($/;"	f	file:
fts5WriteAppendTerm	testdocs/sqlite3.c	/^static void fts5WriteAppendTerm($/;"	f	file:
fts5WriteBtreeNoTerm	testdocs/sqlite3.c	/^static void fts5WriteBtreeNoTerm($/;"	f	file:
fts5WriteBtreeTerm	testdocs/sqlite3.c	/^static void fts5WriteBtreeTerm($/;"	f	file:
fts5WriteDlidxAppend	testdocs/sqlite3.c	/^static void fts5WriteDlidxAppend($/;"	f	file:
fts5WriteDlidxClear	testdocs/sqlite3.c	/^static void fts5WriteDlidxClear($/;"	f	file:
fts5WriteDlidxGrow	testdocs/sqlite3.c	/^static int fts5WriteDlidxGrow($/;"	f	file:
fts5WriteFinish	testdocs/sqlite3.c	/^static void fts5WriteFinish($/;"	f	file:
fts5WriteFlushBtree	testdocs/sqlite3.c	/^static void fts5WriteFlushBtree(Fts5Index *p, Fts5SegWriter *pWriter){$/;"	f	file:
fts5WriteFlushDlidx	testdocs/sqlite3.c	/^static int fts5WriteFlushDlidx(Fts5Index *p, Fts5SegWriter *pWriter){$/;"	f	file:
fts5WriteFlushLeaf	testdocs/sqlite3.c	/^static void fts5WriteFlushLeaf(Fts5Index *p, Fts5SegWriter *pWriter){$/;"	f	file:
fts5WriteInit	testdocs/sqlite3.c	/^static void fts5WriteInit($/;"	f	file:
fts5YYACTIONTYPE	testdocs/sqlite3.c	/^#define fts5YYACTIONTYPE /;"	d	file:
fts5YYCODETYPE	testdocs/sqlite3.c	/^#define fts5YYCODETYPE /;"	d	file:
fts5YYMALLOCARGTYPE	testdocs/sqlite3.c	/^# define fts5YYMALLOCARGTYPE /;"	d	file:
fts5YYMALLOCARGTYPE	testdocs/sqlite3.c	/^#define fts5YYMALLOCARGTYPE /;"	d	file:
fts5YYMINORTYPE	testdocs/sqlite3.c	/^} fts5YYMINORTYPE;$/;"	t	typeref:union:__anon38	file:
fts5YYNOCODE	testdocs/sqlite3.c	/^#define fts5YYNOCODE /;"	d	file:
fts5YYNOERRORRECOVERY	testdocs/sqlite3.c	/^#define fts5YYNOERRORRECOVERY /;"	d	file:
fts5YYNRULE	testdocs/sqlite3.c	/^#define fts5YYNRULE /;"	d	file:
fts5YYNSTATE	testdocs/sqlite3.c	/^#define fts5YYNSTATE /;"	d	file:
fts5YYPARSEFREENOTNULL	testdocs/sqlite3.c	/^#define fts5YYPARSEFREENOTNULL /;"	d	file:
fts5YYSTACKDEPTH	testdocs/sqlite3.c	/^#define fts5YYSTACKDEPTH /;"	d	file:
fts5YY_ACCEPT_ACTION	testdocs/sqlite3.c	/^#define fts5YY_ACCEPT_ACTION /;"	d	file:
fts5YY_ACTTAB_COUNT	testdocs/sqlite3.c	/^#define fts5YY_ACTTAB_COUNT /;"	d	file:
fts5YY_ERROR_ACTION	testdocs/sqlite3.c	/^#define fts5YY_ERROR_ACTION /;"	d	file:
fts5YY_MAX_REDUCE	testdocs/sqlite3.c	/^#define fts5YY_MAX_REDUCE /;"	d	file:
fts5YY_MAX_SHIFT	testdocs/sqlite3.c	/^#define fts5YY_MAX_SHIFT /;"	d	file:
fts5YY_MAX_SHIFTREDUCE	testdocs/sqlite3.c	/^#define fts5YY_MAX_SHIFTREDUCE /;"	d	file:
fts5YY_MIN_REDUCE	testdocs/sqlite3.c	/^#define fts5YY_MIN_REDUCE /;"	d	file:
fts5YY_MIN_SHIFTREDUCE	testdocs/sqlite3.c	/^#define fts5YY_MIN_SHIFTREDUCE /;"	d	file:
fts5YY_NO_ACTION	testdocs/sqlite3.c	/^#define fts5YY_NO_ACTION /;"	d	file:
fts5YY_REDUCE_COUNT	testdocs/sqlite3.c	/^#define fts5YY_REDUCE_COUNT /;"	d	file:
fts5YY_REDUCE_MAX	testdocs/sqlite3.c	/^#define fts5YY_REDUCE_MAX /;"	d	file:
fts5YY_REDUCE_MIN	testdocs/sqlite3.c	/^#define fts5YY_REDUCE_MIN /;"	d	file:
fts5YY_REDUCE_USE_DFLT	testdocs/sqlite3.c	/^#define fts5YY_REDUCE_USE_DFLT /;"	d	file:
fts5YY_SHIFT_COUNT	testdocs/sqlite3.c	/^#define fts5YY_SHIFT_COUNT /;"	d	file:
fts5YY_SHIFT_MAX	testdocs/sqlite3.c	/^#define fts5YY_SHIFT_MAX /;"	d	file:
fts5YY_SHIFT_MIN	testdocs/sqlite3.c	/^#define fts5YY_SHIFT_MIN /;"	d	file:
fts5YY_SHIFT_USE_DFLT	testdocs/sqlite3.c	/^#define fts5YY_SHIFT_USE_DFLT /;"	d	file:
fts5_api	testdocs/sqlite3.c	/^struct fts5_api {$/;"	s	file:
fts5_api	testdocs/sqlite3.c	/^typedef struct fts5_api fts5_api;$/;"	t	typeref:struct:fts5_api	file:
fts5_dri	testdocs/sqlite3.c	/^#define fts5_dri(/;"	d	file:
fts5_extension_function	testdocs/sqlite3.c	/^typedef void (*fts5_extension_function)($/;"	t	file:
fts5_isdigit	testdocs/sqlite3.c	/^static int fts5_isdigit(char a){$/;"	f	file:
fts5_isopenquote	testdocs/sqlite3.c	/^static int fts5_isopenquote(char x){$/;"	f	file:
fts5_iswhitespace	testdocs/sqlite3.c	/^static int fts5_iswhitespace(char x){$/;"	f	file:
fts5_remove_diacritic	testdocs/sqlite3.c	/^static int fts5_remove_diacritic(int c){$/;"	f	file:
fts5_tokenizer	testdocs/sqlite3.c	/^struct fts5_tokenizer {$/;"	s	file:
fts5_tokenizer	testdocs/sqlite3.c	/^typedef struct fts5_tokenizer fts5_tokenizer;$/;"	t	typeref:struct:fts5_tokenizer	file:
fts5yy0	testdocs/sqlite3.c	/^  sqlite3Fts5ParserFTS5TOKENTYPE fts5yy0;$/;"	m	union:__anon38	file:
fts5yy11	testdocs/sqlite3.c	/^  Fts5Colset* fts5yy11;$/;"	m	union:__anon38	file:
fts5yy24	testdocs/sqlite3.c	/^  Fts5ExprNode* fts5yy24;$/;"	m	union:__anon38	file:
fts5yy4	testdocs/sqlite3.c	/^  int fts5yy4;$/;"	m	union:__anon38	file:
fts5yy46	testdocs/sqlite3.c	/^  Fts5ExprNearset* fts5yy46;$/;"	m	union:__anon38	file:
fts5yy53	testdocs/sqlite3.c	/^  Fts5ExprPhrase* fts5yy53;$/;"	m	union:__anon38	file:
fts5yyFallback	testdocs/sqlite3.c	/^static const fts5YYCODETYPE fts5yyFallback[] = {$/;"	v	file:
fts5yyGrowStack	testdocs/sqlite3.c	/^static int fts5yyGrowStack(fts5yyParser *p){$/;"	f	file:
fts5yyParser	testdocs/sqlite3.c	/^struct fts5yyParser {$/;"	s	file:
fts5yyParser	testdocs/sqlite3.c	/^typedef struct fts5yyParser fts5yyParser;$/;"	t	typeref:struct:fts5yyParser	file:
fts5yyRuleInfo	testdocs/sqlite3.c	/^} fts5yyRuleInfo[] = {$/;"	v	typeref:struct:__anon39	file:
fts5yyRuleName	testdocs/sqlite3.c	/^static const char *const fts5yyRuleName[] = {$/;"	v	file:
fts5yyStackEntry	testdocs/sqlite3.c	/^struct fts5yyStackEntry {$/;"	s	file:
fts5yyStackEntry	testdocs/sqlite3.c	/^typedef struct fts5yyStackEntry fts5yyStackEntry;$/;"	t	typeref:struct:fts5yyStackEntry	file:
fts5yyStackOverflow	testdocs/sqlite3.c	/^static void fts5yyStackOverflow(fts5yyParser *fts5yypParser){$/;"	f	file:
fts5yyTokenName	testdocs/sqlite3.c	/^static const char *const fts5yyTokenName[] = {$/;"	v	file:
fts5yyTraceFILE	testdocs/sqlite3.c	/^static FILE *fts5yyTraceFILE = 0;$/;"	v	file:
fts5yyTracePrompt	testdocs/sqlite3.c	/^static char *fts5yyTracePrompt = 0;$/;"	v	file:
fts5yyTraceShift	testdocs/sqlite3.c	/^# define fts5yyTraceShift(/;"	d	file:
fts5yyTraceShift	testdocs/sqlite3.c	/^static void fts5yyTraceShift(fts5yyParser *fts5yypParser, int fts5yyNewState){$/;"	f	file:
fts5yy_accept	testdocs/sqlite3.c	/^static void fts5yy_accept($/;"	f	file:
fts5yy_action	testdocs/sqlite3.c	/^static const fts5YYACTIONTYPE fts5yy_action[] = {$/;"	v	file:
fts5yy_default	testdocs/sqlite3.c	/^static const fts5YYACTIONTYPE fts5yy_default[] = {$/;"	v	file:
fts5yy_destructor	testdocs/sqlite3.c	/^static void fts5yy_destructor($/;"	f	file:
fts5yy_find_reduce_action	testdocs/sqlite3.c	/^static int fts5yy_find_reduce_action($/;"	f	file:
fts5yy_find_shift_action	testdocs/sqlite3.c	/^static unsigned int fts5yy_find_shift_action($/;"	f	file:
fts5yy_lookahead	testdocs/sqlite3.c	/^static const fts5YYCODETYPE fts5yy_lookahead[] = {$/;"	v	file:
fts5yy_parse_failed	testdocs/sqlite3.c	/^static void fts5yy_parse_failed($/;"	f	file:
fts5yy_pop_parser_stack	testdocs/sqlite3.c	/^static void fts5yy_pop_parser_stack(fts5yyParser *pParser){$/;"	f	file:
fts5yy_reduce	testdocs/sqlite3.c	/^static void fts5yy_reduce($/;"	f	file:
fts5yy_reduce_ofst	testdocs/sqlite3.c	/^static const signed char fts5yy_reduce_ofst[] = {$/;"	v	file:
fts5yy_shift	testdocs/sqlite3.c	/^static void fts5yy_shift($/;"	f	file:
fts5yy_shift_ofst	testdocs/sqlite3.c	/^static const unsigned char fts5yy_shift_ofst[] = {$/;"	v	file:
fts5yy_syntax_error	testdocs/sqlite3.c	/^static void fts5yy_syntax_error($/;"	f	file:
fts5yyerrcnt	testdocs/sqlite3.c	/^  int fts5yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:fts5yyParser	file:
fts5yyhwm	testdocs/sqlite3.c	/^  int fts5yyhwm;                    \/* High-water mark of the stack *\/$/;"	m	struct:fts5yyParser	file:
fts5yyinit	testdocs/sqlite3.c	/^  int fts5yyinit;$/;"	m	union:__anon38	file:
fts5yystack	testdocs/sqlite3.c	/^  fts5yyStackEntry *fts5yystack;        \/* The parser's stack *\/$/;"	m	struct:fts5yyParser	file:
fts5yystk0	testdocs/sqlite3.c	/^  fts5yyStackEntry fts5yystk0;          \/* First stack entry *\/$/;"	m	struct:fts5yyParser	file:
fts5yystksz	testdocs/sqlite3.c	/^  int fts5yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:fts5yyParser	file:
fts5yytestcase	testdocs/sqlite3.c	/^# define fts5yytestcase(/;"	d	file:
fts5yytestcase	testdocs/sqlite3.c	/^#define fts5yytestcase(/;"	d	file:
fts5yytos	testdocs/sqlite3.c	/^  fts5yyStackEntry *fts5yytos;          \/* Pointer to top element of the stack *\/$/;"	m	struct:fts5yyParser	file:
ftsCompareFunction	testdocs/sqlite3.c	/^static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){$/;"	f	file:
ftsHashFunction	testdocs/sqlite3.c	/^static int (*ftsHashFunction(int keyClass))(const void*,int){$/;"	f	file:
fullSync	testdocs/sqlite3.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:
full_fsync	testdocs/sqlite3.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:
funcFlags	testdocs/sqlite3.c	/^  u16 funcFlags;       \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	file:
functionDestroy	testdocs/sqlite3.c	/^static void functionDestroy(sqlite3 *db, FuncDef *p){$/;"	f	file:
functionSearch	testdocs/sqlite3.c	/^static FuncDef *functionSearch($/;"	f	file:
g_elapsed	testdocs/sqlite3.c	/^static sqlite_uint64 g_elapsed;$/;"	v	file:
g_start	testdocs/sqlite3.c	/^static sqlite_uint64 g_start;$/;"	v	file:
gapend	edit.h	/^    Rune* gapend;         \/* end of the gap *\/$/;"	m	struct:__anon5
gapstart	edit.h	/^    Rune* gapstart;       \/* start of the gap *\/$/;"	m	struct:__anon5
generateColumnNames	testdocs/sqlite3.c	/^static void generateColumnNames($/;"	f	file:
generateColumnTypes	testdocs/sqlite3.c	/^static void generateColumnTypes($/;"	f	file:
generateOutputSubroutine	testdocs/sqlite3.c	/^static int generateOutputSubroutine($/;"	f	file:
generateSortTail	testdocs/sqlite3.c	/^static void generateSortTail($/;"	f	file:
generateWithRecursiveQuery	testdocs/sqlite3.c	/^static void generateWithRecursiveQuery($/;"	f	file:
geomCallback	testdocs/sqlite3.c	/^static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:
get2byte	testdocs/sqlite3.c	/^# define get2byte(/;"	d	file:
get2byte	testdocs/sqlite3.c	/^#define get2byte(/;"	d	file:
get2byteAligned	testdocs/sqlite3.c	/^# define get2byteAligned(/;"	d	file:
get2byteNotZero	testdocs/sqlite3.c	/^#define get2byteNotZero(/;"	d	file:
get4byte	testdocs/sqlite3.c	/^#define get4byte /;"	d	file:
getAbsoluteLevel	testdocs/sqlite3.c	/^static sqlite3_int64 getAbsoluteLevel($/;"	f	file:
getAndInitPage	testdocs/sqlite3.c	/^static int getAndInitPage($/;"	f	file:
getAutoVacuum	testdocs/sqlite3.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:
getCellInfo	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void getCellInfo(BtCursor *pCur){$/;"	f	file:
getDigits	testdocs/sqlite3.c	/^static int getDigits(const char *zDate, const char *zFormat, ...){$/;"	f	file:
getDoubleArg	testdocs/sqlite3.c	/^static double getDoubleArg(PrintfArguments *p){$/;"	f	file:
getFileMode	testdocs/sqlite3.c	/^static int getFileMode($/;"	f	file:
getIntArg	testdocs/sqlite3.c	/^static sqlite3_int64 getIntArg(PrintfArguments *p){$/;"	f	file:
getIntFromStmt	testdocs/sqlite3.c	/^static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){$/;"	f	file:
getLocalPayload	testdocs/sqlite3.c	/^static void getLocalPayload($/;"	f	file:
getLockingMode	testdocs/sqlite3.c	/^static int getLockingMode(const char *z){$/;"	f	file:
getNextNode	testdocs/sqlite3.c	/^static int getNextNode($/;"	f	file:
getNextString	testdocs/sqlite3.c	/^static int getNextString($/;"	f	file:
getNextToken	testdocs/sqlite3.c	/^static int getNextToken($/;"	f	file:
getNodeSize	testdocs/sqlite3.c	/^static int getNodeSize($/;"	f	file:
getOverflowPage	testdocs/sqlite3.c	/^static int getOverflowPage($/;"	f	file:
getPageError	testdocs/sqlite3.c	/^static int getPageError($/;"	f	file:
getPageMMap	testdocs/sqlite3.c	/^static int getPageMMap($/;"	f	file:
getPageNormal	testdocs/sqlite3.c	/^static int getPageNormal($/;"	f	file:
getPageReferenced	testdocs/sqlite3.c	/^static int getPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
getRowTrigger	testdocs/sqlite3.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:
getSafetyLevel	testdocs/sqlite3.c	/^static u8 getSafetyLevel(const char *z, int omitFull, u8 dflt){$/;"	f	file:
getTempStore	testdocs/sqlite3.c	/^static int getTempStore(const char *z){$/;"	f	file:
getTextArg	testdocs/sqlite3.c	/^static char *getTextArg(PrintfArguments *p){$/;"	f	file:
getVarint	testdocs/sqlite3.c	/^#define getVarint /;"	d	file:
getVarint32	testdocs/sqlite3.c	/^#define getVarint32(/;"	d	file:
get_autocommit	testdocs/sqlite3.c	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
get_auxdata	testdocs/sqlite3.c	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
get_table	testdocs/sqlite3.c	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	file:
globInfo	testdocs/sqlite3.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	typeref:struct:compareInfo	file:
global_recover	testdocs/sqlite3.c	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	file:
groupConcatFinalize	testdocs/sqlite3.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:
groupConcatStep	testdocs/sqlite3.c	/^static void groupConcatStep($/;"	f	file:
growOp3	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int growOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f	file:
growOpArray	testdocs/sqlite3.c	/^static int growOpArray(Vdbe *v, int nOp){$/;"	f	file:
growVTrans	testdocs/sqlite3.c	/^static int growVTrans(sqlite3 *db){$/;"	f	file:
grp	testdocs/sqlite3.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:
h	testdocs/sqlite3.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:
h	testdocs/sqlite3.c	/^  int h, m;           \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
h	testdocs/sqlite3.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:
h	testdocs/sqlite3.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:
hFile	testdocs/sqlite3.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:
hHeap	testdocs/sqlite3.c	/^  HANDLE hHeap; \/* The handle to our heap. *\/$/;"	m	struct:winMemData	file:
hMap	testdocs/sqlite3.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:
hMap	testdocs/sqlite3.c	/^  HANDLE hMap;                  \/* Handle for accessing memory mapping *\/$/;"	m	struct:winFile	file:
hMutex	testdocs/sqlite3.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/$/;"	m	struct:winFile	file:
hPending	testdocs/sqlite3.c	/^    Fts3Hash hPending;            \/* Pending terms table for this index *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
hShared	testdocs/sqlite3.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:
handleDeferredMoveto	testdocs/sqlite3.c	/^static int SQLITE_NOINLINE handleDeferredMoveto(VdbeCursor *p){$/;"	f	file:
handleMovedCursor	testdocs/sqlite3.c	/^static int SQLITE_NOINLINE handleMovedCursor(VdbeCursor *p){$/;"	f	file:
handle_signal	atf.h	/^static void handle_signal(int sig) {$/;"	f
hasColumn	testdocs/sqlite3.c	/^static int hasColumn(const i16 *aiCol, int nCol, int x){$/;"	f	file:
hasCompound	testdocs/sqlite3.c	/^  u8 hasCompound;      \/* Need to invoke convertCompoundSelectToSubquery() *\/$/;"	m	struct:Parse	file:
hasHeldSharedLock	testdocs/sqlite3.c	/^  u8 hasHeldSharedLock;       \/* True if a shared lock has ever been held *\/$/;"	m	struct:Pager	file:
hasHotJournal	testdocs/sqlite3.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:
hasIncrblobCur	testdocs/sqlite3.c	/^  u8 hasIncrblobCur; \/* True if there are one or more Incrblob cursors *\/$/;"	m	struct:Btree	file:
hasMutex	testdocs/sqlite3.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:
hasMutex	testdocs/sqlite3.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:
hasReadConflicts	testdocs/sqlite3.c	/^  #define hasReadConflicts(/;"	d	file:
hasReadConflicts	testdocs/sqlite3.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:
hasSharedCacheTableLock	testdocs/sqlite3.c	/^  #define hasSharedCacheTableLock(/;"	d	file:
hasSharedCacheTableLock	testdocs/sqlite3.c	/^static int hasSharedCacheTableLock($/;"	f	file:
hasStat1	testdocs/sqlite3.c	/^  unsigned hasStat1:1;     \/* aiRowLogEst values come from sqlite_stat1 *\/$/;"	m	struct:Index	file:
hasVowel	testdocs/sqlite3.c	/^static int hasVowel(const char *z){$/;"	f	file:
hashDestroy	testdocs/sqlite3.c	/^static void hashDestroy(void *p){$/;"	f	file:
havingToWhere	testdocs/sqlite3.c	/^static void havingToWhere($/;"	f	file:
havingToWhereExprCb	testdocs/sqlite3.c	/^static int havingToWhereExprCb(Walker *pWalker, Expr *pExpr){$/;"	f	file:
hdr	testdocs/sqlite3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon21	typeref:struct:Mem3Block::__anon21::__anon22	file:
hdr	testdocs/sqlite3.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:
hdrOffset	testdocs/sqlite3.c	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage	file:
heap	testdocs/sqlite3.c	/^  u32 *heap;        \/* Min-heap used for analyzing cell coverage *\/$/;"	m	struct:IntegrityCk	file:
heightOfExpr	testdocs/sqlite3.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:
heightOfExprList	testdocs/sqlite3.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:
heightOfSelect	testdocs/sqlite3.c	/^static void heightOfSelect(Select *p, int *pnHeight){$/;"	f	file:
hexFunc	testdocs/sqlite3.c	/^static void hexFunc($/;"	f	file:
hexdigits	testdocs/sqlite3.c	/^static const char hexdigits[] = {$/;"	v	file:
hidden	testdocs/sqlite3.c	/^  unsigned char hidden[48];$/;"	m	struct:sqlite3_snapshot	file:
hints	testdocs/sqlite3.c	/^  u8 hints;                 \/* As configured by CursorSetHints() *\/$/;"	m	struct:BtCursor	file:
hlmask	testdocs/sqlite3.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:
hook	testdocs/sqlite3.c	/^  SessionHook hook;               \/* APIs to grab new and old data with *\/$/;"	m	struct:sqlite3_session	file:
ht	testdocs/sqlite3.c	/^  } *ht;$/;"	m	struct:Fts3Hash	typeref:struct:Fts3Hash::_fts3ht	file:
ht	testdocs/sqlite3.c	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht	file:
ht_slot	testdocs/sqlite3.c	/^typedef u16 ht_slot;$/;"	t	file:
htsize	testdocs/sqlite3.c	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash	file:
htsize	testdocs/sqlite3.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	file:
i	testdocs/sqlite3.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:sqlite3_value::MemValue	file:
i	testdocs/sqlite3.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::p4union	file:
i	testdocs/sqlite3.c	/^  int i;                          \/* Current offset in a[] *\/$/;"	m	struct:Fts5PoslistReader	file:
i	testdocs/sqlite3.c	/^  int i;                          \/* Current offset in position list *\/$/;"	m	struct:Fts5LookaheadReader	file:
i	testdocs/sqlite3.c	/^  int i;              \/* XOR next input into a[i] *\/$/;"	m	struct:EntropyGatherer	file:
i	testdocs/sqlite3.c	/^  int i;             \/* Integer value *\/$/;"	m	union:RtreeCoord	file:
i	testdocs/sqlite3.c	/^  u32 i;                     \/* Index in sParse.aNode[] of current row *\/$/;"	m	struct:JsonEachCursor	file:
i	testdocs/sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
i16	testdocs/sqlite3.c	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t	file:
i16	testdocs/sqlite3.c	/^typedef short i16;$/;"	t	file:
i16	testdocs/sqlite3.c	/^typedef short int i16;            \/* 2-byte (or larger) signed integer *\/$/;"	t	file:
i64	testdocs/sqlite3.c	/^typedef sqlite3_int64 i64;        \/* 8-byte signed integer *\/$/;"	t	file:
i64	testdocs/sqlite3.c	/^typedef sqlite3_int64 i64;$/;"	t	file:
i64	testdocs/sqlite3.c	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t	file:
i8	testdocs/sqlite3.c	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t	file:
iAbsLevel	testdocs/sqlite3.c	/^  sqlite3_int64 iAbsLevel;        \/* Absolute level of input segments *\/$/;"	m	struct:IncrmergeWriter	file:
iAddr	testdocs/sqlite3.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:
iAgg	testdocs/sqlite3.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	file:
iAlias	testdocs/sqlite3.c	/^        u16 iAlias;           \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item::__anon12::__anon13	file:
iAppend	testdocs/sqlite3.c	/^    u32 iAppend;           \/* More terms for ARRAY and OBJECT *\/$/;"	m	union:JsonNode::__anon37	file:
iArg	testdocs/sqlite3.c	/^  u32 iArg;                \/* Extra argument *\/$/;"	m	struct:PragmaName	file:
iAuxArg	testdocs/sqlite3.c	/^  int iAuxArg;                    \/* Index of function argument. *\/$/;"	m	struct:AuxData	file:
iAuxOp	testdocs/sqlite3.c	/^  int iAuxOp;                     \/* Instruction number of OP_Function opcode *\/$/;"	m	struct:AuxData	file:
iBatch	testdocs/sqlite3.c	/^  int iBatch;                    \/* Current insert batch *\/$/;"	m	struct:RowSet	file:
iBegin	testdocs/sqlite3.c	/^  u32 iBegin;                \/* The first node of the scan *\/$/;"	m	struct:JsonEachCursor	file:
iBlock	testdocs/sqlite3.c	/^  sqlite3_int64 iBlock;           \/* Current block id *\/$/;"	m	struct:NodeWriter	file:
iBreak	testdocs/sqlite3.c	/^  int iBreak;               \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo	file:
iBtPage	testdocs/sqlite3.c	/^  int iBtPage;                    \/* Page number corresponding to btterm *\/$/;"	m	struct:Fts5SegWriter	file:
iBufEnd	testdocs/sqlite3.c	/^  int iBufEnd;                    \/* Last byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iBufStart	testdocs/sqlite3.c	/^  int iBufStart;                  \/* First byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iCacheCnt	testdocs/sqlite3.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	file:
iCacheLevel	testdocs/sqlite3.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	file:
iCallback	testdocs/sqlite3.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:
iCell	testdocs/sqlite3.c	/^  int iCell;$/;"	m	struct:StatPage	file:
iCell	testdocs/sqlite3.c	/^  u8 iCell;              \/* Cell index within the node *\/$/;"	m	struct:RtreeSearchPoint	file:
iChange	testdocs/sqlite3.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:
iChild	testdocs/sqlite3.c	/^  sqlite3_int64 iChild;           \/* Pointer to child node *\/$/;"	m	struct:NodeReader	file:
iChildPg	testdocs/sqlite3.c	/^  u32 iChildPg;                   \/* Child node (or 0 if this is a leaf) *\/$/;"	m	struct:StatCell	file:
iCol	testdocs/sqlite3.c	/^  i16 iCol;                       \/* Column of last value written *\/$/;"	m	struct:Fts5HashEntry	file:
iCol	testdocs/sqlite3.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:
iCol	testdocs/sqlite3.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:
iCol	testdocs/sqlite3.c	/^  int iCol;                       \/* Column to search *\/$/;"	m	struct:CInstIter	file:
iCol	testdocs/sqlite3.c	/^  int iCol;                       \/* Column token must occur in *\/$/;"	m	struct:Fts3DeferredToken	file:
iCol	testdocs/sqlite3.c	/^  int iCol;                       \/* Current value of 'col' column *\/$/;"	m	struct:Fts3auxCursor	file:
iCol	testdocs/sqlite3.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:
iCol	testdocs/sqlite3.c	/^  int iCol;                       \/* If !isPSample, the reason for inclusion *\/$/;"	m	struct:Stat4Sample	file:
iCol	testdocs/sqlite3.c	/^  int iCol;                       \/* The column the token must match *\/$/;"	m	struct:Fts3TokenAndCost	file:
iCol	testdocs/sqlite3.c	/^  int iCol;$/;"	m	struct:Fts3SegFilter	file:
iCol	testdocs/sqlite3.c	/^  int iCol;$/;"	m	struct:Fts5InsertCtx	file:
iCol	testdocs/sqlite3.c	/^  int iCol;$/;"	m	struct:Fts5IntegrityCtx	file:
iCol	testdocs/sqlite3.c	/^  int iCol;$/;"	m	struct:Fts5VocabCursor	file:
iCol	testdocs/sqlite3.c	/^  u16 iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:
iColFilter	testdocs/sqlite3.c	/^  int iColFilter;                 \/* If >=0, filter for this column *\/$/;"	m	struct:Fts3MultiSegReader	file:
iColumn	testdocs/sqlite3.c	/^     int iColumn;              \/* Column constrained.  -1 for ROWID *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iColumn	testdocs/sqlite3.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
iColumn	testdocs/sqlite3.c	/^    i16 iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	file:
iColumn	testdocs/sqlite3.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iColumn	testdocs/sqlite3.c	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase	file:
iColumn	testdocs/sqlite3.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	file:
iConstExprReg	testdocs/sqlite3.c	/^      int iConstExprReg;      \/* Register in which Expr value is cached *\/$/;"	m	union:ExprList::ExprList_item::__anon12	file:
iContinue	testdocs/sqlite3.c	/^  int iContinue;            \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo	file:
iCookie	testdocs/sqlite3.c	/^  int iCookie;                    \/* Incremented when %_config is modified *\/$/;"	m	struct:Fts5Config	file:
iCookie	testdocs/sqlite3.c	/^  u32 iCookie;                    \/* Cookie value for main db files *\/$/;"	m	struct:rbu_file	file:
iCookie	testdocs/sqlite3.c	/^  u32 iCookie;$/;"	m	struct:RbuState	file:
iCoord	testdocs/sqlite3.c	/^  int iCoord;                     \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:
iCsrId	testdocs/sqlite3.c	/^  i64 iCsrId;                     \/* Cursor id *\/$/;"	m	struct:Fts5Cursor	file:
iCur	testdocs/sqlite3.c	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon27::__anon28::InLoop	file:
iCur	testdocs/sqlite3.c	/^    int iCur;                                 \/* A cursor number *\/$/;"	m	union:Walker::__anon17	file:
iCur	testdocs/sqlite3.c	/^  int iCur;        \/* Cursor number for the table corresponding to the index *\/$/;"	m	struct:IdxCover	file:
iCurrent	testdocs/sqlite3.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:
iCurrent	testdocs/sqlite3.c	/^  int iCurrent;                   \/* Offset in aData[] of current change *\/$/;"	m	struct:SessionInput	file:
iCurrentBlock	testdocs/sqlite3.c	/^  sqlite3_int64 iCurrentBlock;    \/* Current leaf block (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iCurrentTime	testdocs/sqlite3.c	/^  i64 iCurrentTime;       \/* Value of julianday('now') for this statement *\/$/;"	m	struct:Vdbe	file:
iCursor	testdocs/sqlite3.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
iDataVersion	testdocs/sqlite3.c	/^  u32 iDataVersion;           \/* Changes whenever database content changes *\/$/;"	m	struct:Pager	file:
iDataVersion	testdocs/sqlite3.c	/^  u32 iDataVersion;  \/* Combines with pBt->pPager->iDataVersion *\/$/;"	m	struct:Btree	file:
iDb	testdocs/sqlite3.c	/^    u8 iDb;                     \/* Which db file is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
iDb	testdocs/sqlite3.c	/^  i8 iDb;                 \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	file:
iDb	testdocs/sqlite3.c	/^  int iDb;                        \/* Index of database to analyze *\/$/;"	m	struct:StatTable	file:
iDb	testdocs/sqlite3.c	/^  int iDb;                        \/* Schema used for this query *\/$/;"	m	struct:StatCursor	file:
iDb	testdocs/sqlite3.c	/^  int iDb;               \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:
iDb	testdocs/sqlite3.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	file:
iDb	testdocs/sqlite3.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon16	file:
iDbPage	testdocs/sqlite3.c	/^  u32 iDbPage;$/;"	m	struct:RbuFrame	file:
iDefaultCol	testdocs/sqlite3.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:
iDepth	testdocs/sqlite3.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:
iDepth	testdocs/sqlite3.c	/^  u16 iDepth;        \/* Nesting depth *\/$/;"	m	struct:JsonParse	file:
iDestSchema	testdocs/sqlite3.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:
iDistinct	testdocs/sqlite3.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iDivisor	testdocs/sqlite3.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:
iDocid	testdocs/sqlite3.c	/^  sqlite3_int64 iDocid;          \/* Current docid (if pList!=0) *\/$/;"	m	struct:Fts3Doclist	file:
iDocid	testdocs/sqlite3.c	/^  sqlite3_int64 iDocid;      \/* Current docid *\/$/;"	m	struct:Fts3Expr	file:
iDocid	testdocs/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:
iDocid	testdocs/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:
iDocid	testdocs/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TokenDoclist	file:
iDoclistToken	testdocs/sqlite3.c	/^  int iDoclistToken;$/;"	m	struct:Fts3Phrase	file:
iECursor	testdocs/sqlite3.c	/^  int iECursor;         \/* Cursor number for the sorter *\/$/;"	m	struct:SortCtx	file:
iEnd	testdocs/sqlite3.c	/^  int iEnd;                       \/* Current 'end' value *\/$/;"	m	struct:Fts3tokCursor	file:
iEnd	testdocs/sqlite3.c	/^  int iEnd;                       \/* Last token in coalesced phrase instance *\/$/;"	m	struct:CInstIter	file:
iEnd	testdocs/sqlite3.c	/^  sqlite3_int64 iEnd;             \/* Block number of last allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iEnd	testdocs/sqlite3.c	/^  u32 iEnd;                  \/* EOF when i equals or exceeds this value *\/$/;"	m	struct:JsonEachCursor	file:
iEndBlock	testdocs/sqlite3.c	/^  sqlite3_int64 iEndBlock;        \/* Rowid of final block in segment (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iEndofDoclist	testdocs/sqlite3.c	/^  int iEndofDoclist;$/;"	m	struct:Fts5SegIter	file:
iEof	testdocs/sqlite3.c	/^  i64 iEof;                       \/* Bytes of data stored in pFd *\/$/;"	m	struct:SorterFile	file:
iEof	testdocs/sqlite3.c	/^  i64 iEof;                   \/* 1 byte past EOF for this PmaReader *\/$/;"	m	struct:PmaReader	file:
iEquiv	testdocs/sqlite3.c	/^  unsigned char iEquiv;      \/* Next unused slot in aEquiv[] *\/$/;"	m	struct:WhereScan	file:
iField	testdocs/sqlite3.c	/^  int iField;             \/* Field in (?,?,?) IN (SELECT...) vector *\/$/;"	m	struct:WhereTerm	file:
iFirst	testdocs/sqlite3.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:
iFirst	testdocs/sqlite3.c	/^  u16 iFirst;                     \/* aSeg[] index of firstest iterator *\/$/;"	m	struct:Fts5CResult	file:
iFirstOff	testdocs/sqlite3.c	/^  int iFirstOff;                \/* Used by reverse iterators *\/$/;"	m	struct:Fts5DlidxLvl	file:
iFirstRowid	testdocs/sqlite3.c	/^  i64 iFirstRowid;                \/* Return no rowids earlier than this *\/$/;"	m	struct:Fts5Cursor	file:
iForeGuard	testdocs/sqlite3.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:
iFree	testdocs/sqlite3.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:
iFrom	testdocs/sqlite3.c	/^    int iFrom;            \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	file:
iFrom	testdocs/sqlite3.c	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel	file:
iGeneration	testdocs/sqlite3.c	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema	file:
iGet	testdocs/sqlite3.c	/^  int iGet;                 \/* Index of current sample accessed by stat_get() *\/$/;"	m	struct:Stat4Accum	file:
iHash	testdocs/sqlite3.c	/^  u32 iHash;                      \/* Tiebreaker hash *\/$/;"	m	struct:Stat4Sample	file:
iHdrOffset	testdocs/sqlite3.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:
iHdrOffset	testdocs/sqlite3.c	/^  u32 iHdrOffset;         \/* Offset to next unparsed byte of the header *\/$/;"	m	struct:VdbeCursor	file:
iHead	testdocs/sqlite3.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:
iHidden	testdocs/sqlite3.c	/^  u8 iHidden;               \/* Index of the first hidden column *\/$/;"	m	struct:PragmaVtab	file:
iIdx	testdocs/sqlite3.c	/^  int iIdx;                       \/* Index (main or aPrefix[] entry) *\/$/;"	m	struct:Fts5TermsetEntry	file:
iIdx	testdocs/sqlite3.c	/^  int iIdx;                       \/* Index of *output* segment in iAbsLevel+1 *\/$/;"	m	struct:IncrmergeWriter	file:
iIdx	testdocs/sqlite3.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:
iIdxCol	testdocs/sqlite3.c	/^  int iIdxCol;       \/* The column for the index *\/$/;"	m	struct:IdxExprTrans	file:
iIdxCur	testdocs/sqlite3.c	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel	file:
iIdxCur	testdocs/sqlite3.c	/^  int iIdxCur;       \/* The cursor for the index *\/$/;"	m	struct:IdxExprTrans	file:
iIdxCur	testdocs/sqlite3.c	/^  int iIdxCur;    \/* Cursor for the index, if pIdx!=0.  Unused otherwise *\/$/;"	m	struct:CCurHint	file:
iInst	testdocs/sqlite3.c	/^  int iInst;                      \/* Next phrase instance index *\/$/;"	m	struct:CInstIter	file:
iJD	testdocs/sqlite3.c	/^  sqlite3_int64 iJD;  \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:
iKey	testdocs/sqlite3.c	/^    u32 iKey;              \/* Key for ARRAY objects in json_tree() *\/$/;"	m	union:JsonNode::__anon37	file:
iKey	testdocs/sqlite3.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:
iKey1	testdocs/sqlite3.c	/^  i64 iKey1;                      \/* First key value passed to hook *\/$/;"	m	struct:PreUpdate	file:
iKey2	testdocs/sqlite3.c	/^  i64 iKey2;                      \/* Second key value passed to hook *\/$/;"	m	struct:PreUpdate	file:
iLangid	testdocs/sqlite3.c	/^  int iLangid;                        \/* Language id used with tokenizer *\/$/;"	m	struct:ParseContext	file:
iLangid	testdocs/sqlite3.c	/^  int iLangid;                    \/* Language being queried for *\/$/;"	m	struct:Fts3Cursor	file:
iLangid	testdocs/sqlite3.c	/^  int iLangid;                    \/* Language id to query *\/$/;"	m	struct:Fts3auxCursor	file:
iLastCol	testdocs/sqlite3.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:
iLastDocid	testdocs/sqlite3.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:
iLastPos	testdocs/sqlite3.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:
iLastRowid	testdocs/sqlite3.c	/^  i64 iLastRowid;                 \/* Return no rowids later than this *\/$/;"	m	struct:Fts5Cursor	file:
iLeafEndBlock	testdocs/sqlite3.c	/^  sqlite3_int64 iLeafEndBlock;    \/* Rowid of final leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iLeafOffset	testdocs/sqlite3.c	/^  int iLeafOffset;                \/* Byte offset within current leaf *\/$/;"	m	struct:Fts5SegIter	file:
iLeafPgno	testdocs/sqlite3.c	/^  int iLeafPgno;                  \/* Current leaf page number *\/$/;"	m	struct:Fts5SegIter	file:
iLeafPgno	testdocs/sqlite3.c	/^  int iLeafPgno;                \/* Page number of current leaf page *\/$/;"	m	struct:Fts5DlidxLvl	file:
iLeftJoin	testdocs/sqlite3.c	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel	file:
iLevel	testdocs/sqlite3.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	file:
iLevel	testdocs/sqlite3.c	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
iLevel	testdocs/sqlite3.c	/^  int iLevel;             \/* Which level of the tree we are on *\/$/;"	m	struct:TreeView	file:
iLevel	testdocs/sqlite3.c	/^  u8 iLevel;             \/* 0=entries.  1=leaf node.  2+ for higher *\/$/;"	m	struct:RtreeSearchPoint	file:
iLikeRepCntr	testdocs/sqlite3.c	/^  u32 iLikeRepCntr;     \/* LIKE range processing counter register (times 2) *\/$/;"	m	struct:WhereLevel	file:
iLimit	testdocs/sqlite3.c	/^  LogEst iLimit;            \/* LIMIT if wctrlFlags has WHERE_USE_LIMIT *\/$/;"	m	struct:WhereInfo	file:
iLimit	testdocs/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iLookahead	testdocs/sqlite3.c	/^  i64 iLookahead;                 \/* Next position *\/$/;"	m	struct:Fts5LookaheadReader	file:
iMaster	testdocs/sqlite3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:
iMaxDocid	testdocs/sqlite3.c	/^  i64 iMaxDocid;                  \/* Maximum docid to return *\/$/;"	m	struct:Fts3Cursor	file:
iMaxFrame	testdocs/sqlite3.c	/^  u32 iMaxFrame;                  \/* Largest iWalFrame value in aFrame[] *\/$/;"	m	struct:sqlite3rbu	file:
iMaxKey	testdocs/sqlite3.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:
iMem	testdocs/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iMem	testdocs/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iMemory	testdocs/sqlite3.c	/^  int iMemory;                    \/* Offset of free space in list.aMemory *\/$/;"	m	struct:VdbeSorter	file:
iMin	testdocs/sqlite3.c	/^  int iMin;                 \/* Index in a[] of entry with minimum score *\/$/;"	m	struct:Stat4Accum	file:
iMinDocid	testdocs/sqlite3.c	/^  i64 iMinDocid;                  \/* Minimum docid to return *\/$/;"	m	struct:Fts3Cursor	file:
iNewReg	testdocs/sqlite3.c	/^  int iNewReg;                    \/* Register for new.* values *\/$/;"	m	struct:PreUpdate	file:
iNewTable	testdocs/sqlite3.c	/^  int iNewTable;            \/* New table number *\/$/;"	m	struct:SubstContext	file:
iNext	testdocs/sqlite3.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:
iNext	testdocs/sqlite3.c	/^    int iNext;                    \/* Offset within aMemory of next record *\/$/;"	m	union:SorterRecord::__anon25	file:
iNext	testdocs/sqlite3.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:
iNext	testdocs/sqlite3.c	/^  int iNext;                      \/* Offset in aData[] of next change *\/$/;"	m	struct:SessionInput	file:
iNextId	testdocs/sqlite3.c	/^  i64 iNextId;                    \/* Used to allocate unique cursor ids *\/$/;"	m	struct:Fts5Global	file:
iNextSelectId	testdocs/sqlite3.c	/^  int iNextSelectId;        \/* Next available select ID for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iNode	testdocs/sqlite3.c	/^  i64 iNode;                  \/* The node number *\/$/;"	m	struct:RtreeNode	file:
iNodeSize	testdocs/sqlite3.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:
iOalSz	testdocs/sqlite3.c	/^  i64 iOalSz;$/;"	m	struct:RbuState	file:
iOalSz	testdocs/sqlite3.c	/^  i64 iOalSz;$/;"	m	struct:sqlite3rbu	file:
iOff	testdocs/sqlite3.c	/^  i64 iOff;$/;"	m	struct:Fts5ExprCtx	file:
iOff	testdocs/sqlite3.c	/^  int iOff;                       \/* Current offset within aInput[] *\/$/;"	m	struct:unicode_cursor	file:
iOff	testdocs/sqlite3.c	/^  int iOff;                       \/* Current offset within aNode[] *\/$/;"	m	struct:NodeReader	file:
iOff	testdocs/sqlite3.c	/^  int iOff;                       \/* Current offset within zIn[] *\/$/;"	m	struct:HighlightContext	file:
iOff	testdocs/sqlite3.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:
iOff	testdocs/sqlite3.c	/^  int iOff;                     \/* Current offset into pData *\/$/;"	m	struct:Fts5DlidxLvl	file:
iOffset	testdocs/sqlite3.c	/^  i64 iOffset;                    \/* Value of 'pgOffset' column *\/$/;"	m	struct:StatCursor	file:
iOffset	testdocs/sqlite3.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:
iOffset	testdocs/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iOffset	testdocs/sqlite3.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iOffset	testdocs/sqlite3.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iOffset	testdocs/sqlite3.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:
iOffset	testdocs/sqlite3.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:
iOnceResetThreshold	testdocs/sqlite3.c	/^  int iOnceResetThreshold;          \/* When to reset OP_Once counters *\/$/;"	m	struct:Sqlite3Config	file:
iOp	testdocs/sqlite3.c	/^  int iOp;                \/* Instruction number of OP_Function *\/$/;"	m	struct:sqlite3_context	file:
iOrDocid	testdocs/sqlite3.c	/^  i64 iOrDocid;$/;"	m	struct:Fts3Phrase	file:
iOrderByCol	testdocs/sqlite3.c	/^        u16 iOrderByCol;      \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item::__anon12::__anon13	file:
iOvfl	testdocs/sqlite3.c	/^  int iOvfl;                      \/* Iterates through aOvfl[] *\/$/;"	m	struct:StatCell	file:
iPKey	testdocs/sqlite3.c	/^  i16 iPKey;           \/* If not negative, use aCol[iPKey] as the rowid *\/$/;"	m	struct:Table	file:
iPage	testdocs/sqlite3.c	/^  i8 iPage;                 \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor	file:
iPage	testdocs/sqlite3.c	/^  int iPage;                      \/* Current entry in aPage[] *\/$/;"	m	struct:StatCursor	file:
iPageno	testdocs/sqlite3.c	/^  u32 iPageno;                    \/* Value of 'pageno' column *\/$/;"	m	struct:StatCursor	file:
iParent	testdocs/sqlite3.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:
iPgidxOff	testdocs/sqlite3.c	/^  int iPgidxOff;                  \/* Next offset in pgidx *\/$/;"	m	struct:Fts5SegIter	file:
iPgno	testdocs/sqlite3.c	/^  u32 iPgno;$/;"	m	struct:StatPage	file:
iPhrase	testdocs/sqlite3.c	/^  int iPhrase;               \/* Index of this phrase in matchinfo() results *\/$/;"	m	struct:Fts3Expr	file:
iPkSortOrder	testdocs/sqlite3.c	/^  u8 iPkSortOrder;          \/* ASC or DESC for INTEGER PRIMARY KEY *\/$/;"	m	struct:Parse	file:
iPkTnum	testdocs/sqlite3.c	/^  int iPkTnum;                    \/* If eType==EXTERNAL, root of PK index *\/$/;"	m	struct:RbuObjIter	file:
iPos	testdocs/sqlite3.c	/^  i64 iPos;                       \/* (iCol<<32) + iPos *\/$/;"	m	struct:Fts5PoslistReader	file:
iPos	testdocs/sqlite3.c	/^  i64 iPos;                       \/* Current position *\/$/;"	m	struct:Fts5LookaheadReader	file:
iPos	testdocs/sqlite3.c	/^  int iPos;                       \/* Current 'pos' value *\/$/;"	m	struct:Fts3tokCursor	file:
iPos	testdocs/sqlite3.c	/^  int iPos;                       \/* Current position *\/$/;"	m	struct:LcsIterator	file:
iPos	testdocs/sqlite3.c	/^  int iPos;                       \/* Current token offset in zIn[] *\/$/;"	m	struct:HighlightContext	file:
iPos	testdocs/sqlite3.c	/^  int iPos;                       \/* Current token position *\/$/;"	m	struct:Fts5SFinder	file:
iPos	testdocs/sqlite3.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:
iPos	testdocs/sqlite3.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:
iPos	testdocs/sqlite3.c	/^  int iPos;                       \/* Position of last value written *\/$/;"	m	struct:Fts5HashEntry	file:
iPosOffset	testdocs/sqlite3.c	/^  int iPosOffset;                 \/* Tokens count up to end of this phrase *\/$/;"	m	struct:LcsIterator	file:
iPragCName	testdocs/sqlite3.c	/^  u8 iPragCName;           \/* Start of column names in pragCName[] *\/$/;"	m	struct:PragmaName	file:
iPrev	testdocs/sqlite3.c	/^  i64 iPrev;                      \/* Previous rowid value written to page *\/$/;"	m	struct:Fts5DlidxWriter	file:
iPrev	testdocs/sqlite3.c	/^  i64 iPrev;$/;"	m	struct:Fts5PoslistWriter	file:
iPrev	testdocs/sqlite3.c	/^  u8 iPrev;                       \/* Previous thread used to flush PMA *\/$/;"	m	struct:VdbeSorter	file:
iPrevDocid	testdocs/sqlite3.c	/^  sqlite_int64 iPrevDocid;        \/* Docid of most recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrevId	testdocs/sqlite3.c	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
iPrevLangid	testdocs/sqlite3.c	/^  int iPrevLangid;                \/* Langid of recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrevPgidx	testdocs/sqlite3.c	/^  int iPrevPgidx;                 \/* Previous value written into pgidx *\/$/;"	m	struct:Fts5PageWriter	file:
iPrevRowid	testdocs/sqlite3.c	/^  i64 iPrevRowid;                 \/* Previous rowid written to current leaf *\/$/;"	m	struct:Fts5SegWriter	file:
iPrior	testdocs/sqlite3.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:
iPrn	testdocs/sqlite3.c	/^  u32 iPrn;                 \/* Pseudo-random number used for sampling *\/$/;"	m	struct:Stat4Accum	file:
iRangeEnd	testdocs/sqlite3.c	/^  int iRangeEnd;                  \/* If non-zero, last token to include *\/$/;"	m	struct:HighlightContext	file:
iRangeReg	testdocs/sqlite3.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	file:
iRangeStart	testdocs/sqlite3.c	/^  int iRangeStart;                \/* First token to include *\/$/;"	m	struct:HighlightContext	file:
iReCksum	testdocs/sqlite3.c	/^  u32 iReCksum;              \/* On commit, recalculate checksums from here *\/$/;"	m	struct:Wal	file:
iRead	testdocs/sqlite3.c	/^  int iRead;$/;"	m	struct:PoslistOffsetsCtx	file:
iReadOff	testdocs/sqlite3.c	/^  i64 iReadOff;               \/* Current read offset *\/$/;"	m	struct:PmaReader	file:
iReg	testdocs/sqlite3.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	file:
iReinsertHeight	testdocs/sqlite3.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:
iReplace	testdocs/sqlite3.c	/^    u32 iReplace;          \/* Replacement content for JNODE_REPLACE *\/$/;"	m	union:JsonNode::__anon37	file:
iRightChildPg	testdocs/sqlite3.c	/^  u32 iRightChildPg;              \/* Right-child page number (or 0) *\/$/;"	m	struct:StatPage	file:
iRightJoinTable	testdocs/sqlite3.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	file:
iRowid	testdocs/sqlite3.c	/^    i64 iRowid;                     \/* Rowid in main table of the key *\/$/;"	m	union:Stat4Sample::__anon26	file:
iRowid	testdocs/sqlite3.c	/^  i64 iRowid;                                 \/* Node or entry ID *\/$/;"	m	struct:RtreeCell	file:
iRowid	testdocs/sqlite3.c	/^  i64 iRowid;                     \/* Current rowid *\/$/;"	m	struct:Fts5ExprNode	file:
iRowid	testdocs/sqlite3.c	/^  i64 iRowid;                     \/* Current rowid *\/$/;"	m	struct:Fts5SegIter	file:
iRowid	testdocs/sqlite3.c	/^  i64 iRowid;                     \/* Current rowid *\/$/;"	m	struct:Fts5Sorter	file:
iRowid	testdocs/sqlite3.c	/^  i64 iRowid;                     \/* Rowid of last value written *\/$/;"	m	struct:Fts5HashEntry	file:
iRowid	testdocs/sqlite3.c	/^  i64 iRowid;                   \/* First rowid on leaf iLeafPgno *\/$/;"	m	struct:Fts5DlidxLvl	file:
iRowid	testdocs/sqlite3.c	/^  i64 iRowid;$/;"	m	struct:Fts5DoclistIter	file:
iRowid	testdocs/sqlite3.c	/^  i64 iRowid;$/;"	m	struct:Fts5IndexIter	file:
iRowid	testdocs/sqlite3.c	/^  i64 iRowid;$/;"	m	struct:Fts5IntegrityCtx	file:
iRowid	testdocs/sqlite3.c	/^  int iRowid;                     \/* Current 'rowid' value *\/$/;"	m	struct:Fts3tokCursor	file:
iRowid	testdocs/sqlite3.c	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
iRowid	testdocs/sqlite3.c	/^  sqlite3_int64 iRowid;           \/* Current rowid *\/$/;"	m	struct:Fts3auxCursor	file:
iRowid	testdocs/sqlite3.c	/^  sqlite_int64 iRowid;      \/* Current rowid *\/$/;"	m	struct:PragmaVtabCursor	file:
iRowid	testdocs/sqlite3.c	/^  u32 iRowid;                \/* The rowid *\/$/;"	m	struct:JsonEachCursor	file:
iRowidOffset	testdocs/sqlite3.c	/^  int iRowidOffset;               \/* Current entry in aRowidOffset[] *\/$/;"	m	struct:Fts5SegIter	file:
iSDParm	testdocs/sqlite3.c	/^  int iSDParm;         \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	file:
iSavepoint	testdocs/sqlite3.c	/^  int iSavepoint;                 \/* Number of open savepoints (0 -> none) *\/$/;"	m	struct:Fts5TransactionState	file:
iSavepoint	testdocs/sqlite3.c	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable	file:
iSdst	testdocs/sqlite3.c	/^  int iSdst;           \/* Base register where results are written *\/$/;"	m	struct:SelectDest	file:
iSegid	testdocs/sqlite3.c	/^  int iSegid;                     \/* Segid to write to *\/$/;"	m	struct:Fts5SegWriter	file:
iSegid	testdocs/sqlite3.c	/^  int iSegid;                     \/* Segment id *\/$/;"	m	struct:Fts5StructureSegment	file:
iSegid	testdocs/sqlite3.c	/^  int iSegid;$/;"	m	struct:Fts5DlidxIter	file:
iSelectID	testdocs/sqlite3.c	/^  int iSelectID;                  \/* The "Select-ID" for this loop *\/$/;"	m	struct:ScanStatus	file:
iSelectId	testdocs/sqlite3.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	file:
iSelectId	testdocs/sqlite3.c	/^  int iSelectId;            \/* ID of current select for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iSelfTab	testdocs/sqlite3.c	/^  int iSelfTab;        \/* Table of an index whose exprs are being coded *\/$/;"	m	struct:Parse	file:
iSize	testdocs/sqlite3.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:
iSize	testdocs/sqlite3.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:
iSortIdx	testdocs/sqlite3.c	/^  u8 iSortIdx;          \/* Sorting index number.  0==None *\/$/;"	m	struct:WhereLoop	file:
iSorterColumn	testdocs/sqlite3.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iSpecial	testdocs/sqlite3.c	/^  i64 iSpecial;                   \/* Result of special query *\/$/;"	m	struct:Fts5Cursor	file:
iSrcLine	testdocs/sqlite3.c	/^  int iSrcLine;            \/* Source-code line that generated this opcode *\/$/;"	m	struct:VdbeOp	file:
iStart	testdocs/sqlite3.c	/^  int iStart;                     \/* Current 'start' value *\/$/;"	m	struct:Fts3tokCursor	file:
iStart	testdocs/sqlite3.c	/^  int iStart;                     \/* First token in coalesced phrase instance *\/$/;"	m	struct:CInstIter	file:
iStart	testdocs/sqlite3.c	/^  sqlite3_int64 iStart;           \/* Block number of first allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iStartBlock	testdocs/sqlite3.c	/^  sqlite3_int64 iStartBlock;      \/* Rowid of first leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iStartOff	testdocs/sqlite3.c	/^  i64 iStartOff;                  \/* Offset to start writing file at *\/$/;"	m	struct:IncrMerger	file:
iStatement	testdocs/sqlite3.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	file:
iStrategy	testdocs/sqlite3.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:
iStructVersion	testdocs/sqlite3.c	/^  i64 iStructVersion;             \/* data_version when pStruct read *\/$/;"	m	struct:Fts5Index	file:
iSub	testdocs/sqlite3.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:
iSubRec	testdocs/sqlite3.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:
iSum	testdocs/sqlite3.c	/^  i64 iSum;         \/* Integer sum *\/$/;"	m	struct:SumCtx	file:
iSwitchRowid	testdocs/sqlite3.c	/^  i64 iSwitchRowid;               \/* Firstest rowid of other than aFirst[1] *\/$/;"	m	struct:Fts5Iter	file:
iSyncPoint	testdocs/sqlite3.c	/^  sqlite3_int64 iSyncPoint;    \/* Fsync at this offset *\/$/;"	m	struct:WalWriter	file:
iSysErrno	testdocs/sqlite3.c	/^  int iSysErrno;                \/* Errno value from last system error *\/$/;"	m	struct:sqlite3	file:
iSzPoslist	testdocs/sqlite3.c	/^  int iSzPoslist;                 \/* Offset of space for 4-byte poslist size *\/$/;"	m	struct:Fts5HashEntry	file:
iTab	testdocs/sqlite3.c	/^  int iTab;              \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:
iTab	testdocs/sqlite3.c	/^  u8 iTab;              \/* Position in FROM clause of table for this loop *\/$/;"	m	struct:WhereLoop	file:
iTabCur	testdocs/sqlite3.c	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel	file:
iTabCur	testdocs/sqlite3.c	/^  int iTabCur;       \/* The cursor of the corresponding table *\/$/;"	m	struct:IdxExprTrans	file:
iTabCur	testdocs/sqlite3.c	/^  int iTabCur;    \/* Cursor for the main table *\/$/;"	m	struct:CCurHint	file:
iTable	testdocs/sqlite3.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iTable	testdocs/sqlite3.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	file:
iTable	testdocs/sqlite3.c	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock	file:
iTable	testdocs/sqlite3.c	/^  int iTable;               \/* Replace references to this table *\/$/;"	m	struct:SubstContext	file:
iTable	testdocs/sqlite3.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	file:
iTail	testdocs/sqlite3.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:
iTerm	testdocs/sqlite3.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:
iTermLeafOffset	testdocs/sqlite3.c	/^  int iTermLeafOffset;$/;"	m	struct:Fts5SegIter	file:
iTermLeafPgno	testdocs/sqlite3.c	/^  int iTermLeafPgno;$/;"	m	struct:Fts5SegIter	file:
iTermOffset	testdocs/sqlite3.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iTnum	testdocs/sqlite3.c	/^  int iTnum;                      \/* Root page of current object *\/$/;"	m	struct:RbuObjIter	file:
iToken	testdocs/sqlite3.c	/^  int iToken;                     \/* Index of next token to be returned *\/$/;"	m	struct:unicode_cursor	file:
iToken	testdocs/sqlite3.c	/^  int iToken;                     \/* Position of token in phrase *\/$/;"	m	struct:Fts3TokenAndCost	file:
iToken	testdocs/sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iToken	testdocs/sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iToken	testdocs/sqlite3.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:
iTop	testdocs/sqlite3.c	/^  int iTop;                 \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
iVal	testdocs/sqlite3.c	/^  int iVal;$/;"	m	struct:ValueNewStat4Ctx	file:
iValue	testdocs/sqlite3.c	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon10	file:
iVersion	testdocs/sqlite3.c	/^  int iVersion;                   \/* Currently always set to 2 *\/$/;"	m	struct:fts5_api	file:
iVersion	testdocs/sqlite3.c	/^  int iVersion;                   \/* Currently always set to 3 *\/$/;"	m	struct:Fts5ExtensionApi	file:
iVersion	testdocs/sqlite3.c	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	file:
iVersion	testdocs/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	file:
iVersion	testdocs/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	file:
iVersion	testdocs/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	file:
iVersion	testdocs/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module	file:
iVersion	testdocs/sqlite3.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:
iWalCksum	testdocs/sqlite3.c	/^  i64 iWalCksum;$/;"	m	struct:RbuState	file:
iWalCksum	testdocs/sqlite3.c	/^  i64 iWalCksum;$/;"	m	struct:sqlite3rbu	file:
iWalFrame	testdocs/sqlite3.c	/^  u32 iWalFrame;$/;"	m	struct:RbuFrame	file:
iWrite	testdocs/sqlite3.c	/^  int iWrite;$/;"	m	struct:PoslistOffsetsCtx	file:
iWriteOff	testdocs/sqlite3.c	/^  i64 iWriteOff;                  \/* Offset of start of buffer in file *\/$/;"	m	struct:PmaWriter	file:
iWriteRowid	testdocs/sqlite3.c	/^  i64 iWriteRowid;                \/* Rowid for current doc being written *\/$/;"	m	struct:Fts5Index	file:
iWriteVer	testdocs/sqlite3.c	/^  u8 iWriteVer;                   \/* "write-version" value for main db files *\/$/;"	m	struct:rbu_file	file:
iZero	testdocs/sqlite3.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:
icuCaseFunc16	testdocs/sqlite3.c	/^static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuClose	testdocs/sqlite3.c	/^static int icuClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
icuCollationColl	testdocs/sqlite3.c	/^static int icuCollationColl($/;"	f	file:
icuCollationDel	testdocs/sqlite3.c	/^static void icuCollationDel(void *pCtx){$/;"	f	file:
icuCreate	testdocs/sqlite3.c	/^static int icuCreate($/;"	f	file:
icuDestroy	testdocs/sqlite3.c	/^static int icuDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
icuFunctionError	testdocs/sqlite3.c	/^static void icuFunctionError($/;"	f	file:
icuLikeCompare	testdocs/sqlite3.c	/^static int icuLikeCompare($/;"	f	file:
icuLikeFunc	testdocs/sqlite3.c	/^static void icuLikeFunc($/;"	f	file:
icuLoadCollation	testdocs/sqlite3.c	/^static void icuLoadCollation($/;"	f	file:
icuNext	testdocs/sqlite3.c	/^static int icuNext($/;"	f	file:
icuOpen	testdocs/sqlite3.c	/^static int icuOpen($/;"	f	file:
icuRegexpDelete	testdocs/sqlite3.c	/^static void icuRegexpDelete(void *p){$/;"	f	file:
icuRegexpFunc	testdocs/sqlite3.c	/^static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuTokenizerModule	testdocs/sqlite3.c	/^static const sqlite3_tokenizer_module icuTokenizerModule = {$/;"	v	file:
icuUtf8Trans1	testdocs/sqlite3.c	/^static const unsigned char icuUtf8Trans1[] = {$/;"	v	file:
id	testdocs/sqlite3.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	testdocs/sqlite3.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:
id	testdocs/sqlite3.c	/^  sqlite3_int64 id;      \/* Node ID *\/$/;"	m	struct:RtreeSearchPoint	file:
id	testdocs/sqlite3.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:
id	testdocs/sqlite3.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:
id	testdocs/sqlite3.c	/^  unsigned id;             \/* The thread identifier *\/$/;"	m	struct:SQLiteThread	file:
ident	stdc.h	/^#define ident(/;"	d
identLength	testdocs/sqlite3.c	/^static int identLength(const char *z){$/;"	f	file:
identPut	testdocs/sqlite3.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:
idx	testdocs/sqlite3.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	file:
idxFlags	testdocs/sqlite3.c	/^  int idxFlags;              \/* Mask of SQLITE_INDEX_SCAN_* flags *\/$/;"	m	struct:sqlite3_index_info	file:
idxHash	testdocs/sqlite3.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	file:
idxNum	testdocs/sqlite3.c	/^      int idxNum;            \/* Index number *\/$/;"	m	struct:WhereLoop::__anon29::__anon31	file:
idxNum	testdocs/sqlite3.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	file:
idxStr	testdocs/sqlite3.c	/^      char *idxStr;          \/* Index identifier string *\/$/;"	m	struct:WhereLoop::__anon29::__anon31	file:
idxStr	testdocs/sqlite3.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	file:
idxType	testdocs/sqlite3.c	/^  unsigned idxType:2;      \/* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX *\/$/;"	m	struct:Index	file:
idxaff	testdocs/sqlite3.c	/^  char idxaff;               \/* Must match this affinity, if zCollName!=NULL *\/$/;"	m	struct:WhereScan	file:
imposterTable	testdocs/sqlite3.c	/^    u8 imposterTable;           \/* Building an imposter table *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
in	testdocs/sqlite3.c	/^    } in;                 \/* Used when pWLoop->wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon27	typeref:struct:WhereLevel::__anon27::__anon28	file:
in	testdocs/sqlite3.c	/^  SessionInput in;                \/* Input buffer or stream *\/$/;"	m	struct:sqlite3_changeset_iter	file:
inNormalWrite	testdocs/sqlite3.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:
inProgress	testdocs/sqlite3.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	file:
inTrans	testdocs/sqlite3.c	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree	file:
inTransaction	testdocs/sqlite3.c	/^  int inTransaction;     \/* True after xBegin but before xCommit\/xRollback *\/$/;"	m	struct:Fts3Table	file:
inTransaction	testdocs/sqlite3.c	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared	file:
inWrTrans	testdocs/sqlite3.c	/^  u8 inWrTrans;               \/* True if inside write transaction *\/$/;"	m	struct:Rtree	file:
incrAggDepth	testdocs/sqlite3.c	/^static int incrAggDepth(Walker *pWalker, Expr *pExpr){$/;"	f	file:
incrAggFunctionDepth	testdocs/sqlite3.c	/^static void incrAggFunctionDepth(Expr *pExpr, int N){$/;"	f	file:
incrPhraseTokenNext	testdocs/sqlite3.c	/^static int incrPhraseTokenNext($/;"	f	file:
incrVacuum	testdocs/sqlite3.c	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
incrVacuumStep	testdocs/sqlite3.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg, int bCommit){$/;"	f	file:
indexColumnNotNull	testdocs/sqlite3.c	/^static int indexColumnNotNull(Index *pIdx, int iCol){$/;"	f	file:
indexMightHelpWithOrderBy	testdocs/sqlite3.c	/^static int indexMightHelpWithOrderBy($/;"	f	file:
indexable	testdocs/sqlite3.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:
info	testdocs/sqlite3.c	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor	file:
init	testdocs/sqlite3.c	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo	file:
initAvgEq	testdocs/sqlite3.c	/^static void initAvgEq(Index *pIdx){$/;"	f	file:
initMaskSet	testdocs/sqlite3.c	/^#define initMaskSet(/;"	d	file:
initMemArray	testdocs/sqlite3.c	/^static void initMemArray(Mem *p, int N, sqlite3 *db, u16 flags){$/;"	f	file:
ino	testdocs/sqlite3.c	/^  u64 ino;                   \/* Inode number *\/$/;"	m	struct:unixFileId	file:
inodeList	testdocs/sqlite3.c	/^static unixInodeInfo *inodeList = 0;$/;"	v	file:
ins	edit.h	/^        } ins;$/;"	m	union:Log::__anon2	typeref:struct:Log::__anon2::__anon3
insert	buf.c	/^static size_t insert(Buf* buf, size_t off, Rune rune) {$/;"	f	file:
insert	edit.h	/^    bool insert;        \/* whether this operation was an insert or delete *\/$/;"	m	struct:Log
insertBinaryOperator	testdocs/sqlite3.c	/^static void insertBinaryOperator($/;"	f	file:
insertCell	testdocs/sqlite3.c	/^static void insertCell($/;"	f	file:
insertElement	testdocs/sqlite3.c	/^static void insertElement($/;"	f	file:
inspect	testdocs/waf	/^import os, sys, inspect$/;"	i
instrFunc	testdocs/sqlite3.c	/^static void instrFunc($/;"	f	file:
int16	stdc.h	/^typedef int16_t int16;$/;"	t
int32	stdc.h	/^typedef int32_t int32;$/;"	t
int64	stdc.h	/^typedef int64_t int64;$/;"	t
int8	stdc.h	/^typedef int8_t  int8;$/;"	t
intKey	testdocs/sqlite3.c	/^  u8 intKey;           \/* True if table b-trees.  False for index b-trees *\/$/;"	m	struct:MemPage	file:
intKeyLeaf	testdocs/sqlite3.c	/^  u8 intKeyLeaf;       \/* True if the leaf of an intKey table *\/$/;"	m	struct:MemPage	file:
intTestFunc	testdocs/sqlite3.c	/^static void intTestFunc($/;"	f	file:
integrityCheckResultRow	testdocs/sqlite3.c	/^static int integrityCheckResultRow(Vdbe *v, int regResult){$/;"	f	file:
interruptx	testdocs/sqlite3.c	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
intptr	stdc.h	/^typedef intptr_t  intptr;$/;"	t
invalidateAllOverflowCache	testdocs/sqlite3.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:
invalidateIncrblobCursors	testdocs/sqlite3.c	/^  #define invalidateIncrblobCursors(/;"	d	file:
invalidateIncrblobCursors	testdocs/sqlite3.c	/^static void invalidateIncrblobCursors($/;"	f	file:
invalidateOverflowCache	testdocs/sqlite3.c	/^#define invalidateOverflowCache(/;"	d	file:
invalidateTempStorage	testdocs/sqlite3.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:
invokeProfileCallback	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void invokeProfileCallback(sqlite3 *db, Vdbe *p){$/;"	f	file:
invokeValueDestructor	testdocs/sqlite3.c	/^static int invokeValueDestructor($/;"	f	file:
isAllZero	testdocs/sqlite3.c	/^static int isAllZero(const char *z, int n){$/;"	f	file:
isAnchor	testdocs/sqlite3.c	/^  u8 isAnchor;                   \/* This is the PGroup.lru element *\/$/;"	m	struct:PgHdr1	file:
isAttached	testdocs/sqlite3.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:
isBulkLocal	testdocs/sqlite3.c	/^  u8 isBulkLocal;                \/* This page from bulk local storage *\/$/;"	m	struct:PgHdr1	file:
isCandidateForInOpt	testdocs/sqlite3.c	/^static Select *isCandidateForInOpt(Expr *pX){$/;"	f	file:
isConsonant	testdocs/sqlite3.c	/^static int isConsonant(const char *z){$/;"	f	file:
isCorrelated	testdocs/sqlite3.c	/^      unsigned isCorrelated :1;  \/* True if sub-query is correlated *\/$/;"	m	struct:SrcList::SrcList_item::__anon14	file:
isCovering	testdocs/sqlite3.c	/^  unsigned isCovering:1;   \/* True if this is a covering index *\/$/;"	m	struct:Index	file:
isDate	testdocs/sqlite3.c	/^static int isDate($/;"	f	file:
isDeferred	testdocs/sqlite3.c	/^  u8 isDeferred;       \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	file:
isDelim	testdocs/sqlite3.c	/^#define isDelim(/;"	d	file:
isDirty	testdocs/sqlite3.c	/^  int isDirty;                \/* True if the node needs to be written to disk *\/$/;"	m	struct:RtreeNode	file:
isDistinctRedundant	testdocs/sqlite3.c	/^static int isDistinctRedundant($/;"	f	file:
isEof	testdocs/sqlite3.c	/^  int isEof;                      \/* After pStmt has returned SQLITE_DONE *\/$/;"	m	struct:StatCursor	file:
isEof	testdocs/sqlite3.c	/^  int isEof;                      \/* True if cursor is at EOF *\/$/;"	m	struct:Fts3auxCursor	file:
isEof	testdocs/sqlite3.c	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor	file:
isEphemeral	testdocs/sqlite3.c	/^  Bool isEphemeral:1;     \/* True for an ephemeral table *\/$/;"	m	struct:VdbeCursor	file:
isError	testdocs/sqlite3.c	/^  char isError;       \/* An overflow has occurred *\/$/;"	m	struct:DateTime	file:
isError	testdocs/sqlite3.c	/^  int isError;            \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	file:
isFatalError	testdocs/sqlite3.c	/^static int isFatalError(int rc){$/;"	f	file:
isIndexedBy	testdocs/sqlite3.c	/^      unsigned isIndexedBy :1;   \/* True if there is an INDEXED BY clause *\/$/;"	m	struct:SrcList::SrcList_item::__anon14	file:
isInit	testdocs/sqlite3.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	file:
isInit	testdocs/sqlite3.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:
isInit	testdocs/sqlite3.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:
isInit	testdocs/sqlite3.c	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage	file:
isInit	testdocs/sqlite3.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:
isInterrupted	testdocs/sqlite3.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon8	file:
isLeftJoin	testdocs/sqlite3.c	/^  int isLeftJoin;           \/* Add TK_IF_NULL_ROW opcodes on each replacement *\/$/;"	m	struct:SubstContext	file:
isLikeOrGlob	testdocs/sqlite3.c	/^static int isLikeOrGlob($/;"	f	file:
isLookaside	testdocs/sqlite3.c	/^#define isLookaside(/;"	d	file:
isLookaside	testdocs/sqlite3.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:
isMallocInit	testdocs/sqlite3.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isMalloced	testdocs/sqlite3.c	/^#define isMalloced(/;"	d	file:
isMatchOfColumn	testdocs/sqlite3.c	/^static int isMatchOfColumn($/;"	f	file:
isMatchinfoNeeded	testdocs/sqlite3.c	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor	file:
isMultiWrite	testdocs/sqlite3.c	/^  u8 isMultiWrite;     \/* True if statement may modify\/insert multiple rows *\/$/;"	m	struct:Parse	file:
isMutexInit	testdocs/sqlite3.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	file:
isNot	testdocs/sqlite3.c	/^  int isNot;                          \/* True if getNextNode() sees a unary - *\/$/;"	m	struct:ParseContext	file:
isOpen	testdocs/sqlite3.c	/^#define isOpen(/;"	d	file:
isOrdered	testdocs/sqlite3.c	/^      i8 isOrdered;          \/* True if satisfies ORDER BY *\/$/;"	m	struct:WhereLoop::__anon29::__anon31	file:
isOrdered	testdocs/sqlite3.c	/^  Bool isOrdered:1;       \/* True if the table is not BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	file:
isOrdered	testdocs/sqlite3.c	/^  i8 isOrdered;         \/* No. of ORDER BY terms satisfied. -1 for unknown *\/$/;"	m	struct:WherePath	file:
isPCacheInit	testdocs/sqlite3.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isPSample	testdocs/sqlite3.c	/^  u8 isPSample;                   \/* True if a periodic sample *\/$/;"	m	struct:Stat4Sample	file:
isPinned	testdocs/sqlite3.c	/^  u8 isPinned;                   \/* Page in use, not on the LRU list *\/$/;"	m	struct:PgHdr1	file:
isPrefix	testdocs/sqlite3.c	/^  int isPrefix;                   \/* True if token ends with a "*" character *\/$/;"	m	struct:Fts3PhraseToken	file:
isPrepareV2	testdocs/sqlite3.c	/^  bft isPrepareV2:1;      \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe	file:
isReadonly	testdocs/sqlite3.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:unixShmNode	file:
isRecursive	testdocs/sqlite3.c	/^      unsigned isRecursive :1;   \/* True for recursive reference in WITH *\/$/;"	m	struct:SrcList::SrcList_item::__anon14	file:
isRequireSeek	testdocs/sqlite3.c	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor	file:
isResized	testdocs/sqlite3.c	/^  unsigned isResized:1;    \/* True if resizeIndexObject() has been called *\/$/;"	m	struct:Index	file:
isSelfJoinView	testdocs/sqlite3.c	/^static struct SrcList_item *isSelfJoinView($/;"	f	file:
isSetNullAction	testdocs/sqlite3.c	/^static int isSetNullAction(Parse *pParse, FKey *pFKey){$/;"	f	file:
isSimpleCount	testdocs/sqlite3.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:
isSorter	testdocs/sqlite3.c	/^#define isSorter(/;"	d	file:
isSystemTable	testdocs/sqlite3.c	/^static int isSystemTable(Parse *pParse, const char *zName){$/;"	f	file:
isTabFunc	testdocs/sqlite3.c	/^      unsigned isTabFunc :1;     \/* True if table-valued-function syntax *\/$/;"	m	struct:SrcList::SrcList_item::__anon14	file:
isTable	testdocs/sqlite3.c	/^  u8 isTable;             \/* True for rowid tables.  False for indexes *\/$/;"	m	struct:VdbeCursor	file:
isTnct	testdocs/sqlite3.c	/^  u8 isTnct;      \/* True if the DISTINCT keyword is present *\/$/;"	m	struct:DistinctCtx	file:
isTransactionSavepoint	testdocs/sqlite3.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	file:
isView	testdocs/sqlite3.c	/^ #undef isView$/;"	d	file:
isView	testdocs/sqlite3.c	/^# define isView /;"	d	file:
isView	testdocs/sqlite3.c	/^# undef isView$/;"	d	file:
isVowel	testdocs/sqlite3.c	/^static int isVowel(const char *z){$/;"	f	file:
isWriteLock	testdocs/sqlite3.c	/^  u8 isWriteLock;        \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:
iter	testdocs/sqlite3.c	/^  CInstIter iter;                 \/* Coalesced Instance Iterator *\/$/;"	m	struct:HighlightContext	file:
ix	testdocs/sqlite3.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:
ix	testdocs/sqlite3.c	/^  u16 ix;                   \/* Current index for apPage[iPage] *\/$/;"	m	struct:BtCursor	file:
j	testdocs/sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
jfd	testdocs/sqlite3.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:
jnFlags	testdocs/sqlite3.c	/^  u8 jnFlags;            \/* JNODE flags *\/$/;"	m	struct:JsonNode	file:
join	testdocs/waf	/^join = os.path.join$/;"	v
jointype	testdocs/sqlite3.c	/^      u8 jointype;      \/* Type of join between this table and the previous *\/$/;"	m	struct:SrcList::SrcList_item::__anon14	file:
journalHdr	testdocs/sqlite3.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:
journalHdrOffset	testdocs/sqlite3.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:
journalMode	testdocs/sqlite3.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:
journalOff	testdocs/sqlite3.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:
journalSizeLimit	testdocs/sqlite3.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:
jrnlBufferSize	testdocs/sqlite3.c	/^# define jrnlBufferSize(/;"	d	file:
jrnlBufferSize	testdocs/sqlite3.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:
jsonAppendChar	testdocs/sqlite3.c	/^static void jsonAppendChar(JsonString *p, char c){$/;"	f	file:
jsonAppendRaw	testdocs/sqlite3.c	/^static void jsonAppendRaw(JsonString *p, const char *zIn, u32 N){$/;"	f	file:
jsonAppendSeparator	testdocs/sqlite3.c	/^static void jsonAppendSeparator(JsonString *p){$/;"	f	file:
jsonAppendString	testdocs/sqlite3.c	/^static void jsonAppendString(JsonString *p, const char *zIn, u32 N){$/;"	f	file:
jsonAppendValue	testdocs/sqlite3.c	/^static void jsonAppendValue($/;"	f	file:
jsonArrayFinal	testdocs/sqlite3.c	/^static void jsonArrayFinal(sqlite3_context *ctx){$/;"	f	file:
jsonArrayFunc	testdocs/sqlite3.c	/^static void jsonArrayFunc($/;"	f	file:
jsonArrayLengthFunc	testdocs/sqlite3.c	/^static void jsonArrayLengthFunc($/;"	f	file:
jsonArrayStep	testdocs/sqlite3.c	/^static void jsonArrayStep($/;"	f	file:
jsonEachBestIndex	testdocs/sqlite3.c	/^static int jsonEachBestIndex($/;"	f	file:
jsonEachClose	testdocs/sqlite3.c	/^static int jsonEachClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
jsonEachColumn	testdocs/sqlite3.c	/^static int jsonEachColumn($/;"	f	file:
jsonEachComputePath	testdocs/sqlite3.c	/^static void jsonEachComputePath($/;"	f	file:
jsonEachConnect	testdocs/sqlite3.c	/^static int jsonEachConnect($/;"	f	file:
jsonEachCursorReset	testdocs/sqlite3.c	/^static void jsonEachCursorReset(JsonEachCursor *p){$/;"	f	file:
jsonEachDisconnect	testdocs/sqlite3.c	/^static int jsonEachDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
jsonEachEof	testdocs/sqlite3.c	/^static int jsonEachEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
jsonEachFilter	testdocs/sqlite3.c	/^static int jsonEachFilter($/;"	f	file:
jsonEachModule	testdocs/sqlite3.c	/^static sqlite3_module jsonEachModule = {$/;"	v	file:
jsonEachNext	testdocs/sqlite3.c	/^static int jsonEachNext(sqlite3_vtab_cursor *cur){$/;"	f	file:
jsonEachOpenEach	testdocs/sqlite3.c	/^static int jsonEachOpenEach(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
jsonEachOpenTree	testdocs/sqlite3.c	/^static int jsonEachOpenTree(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
jsonEachRowid	testdocs/sqlite3.c	/^static int jsonEachRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){$/;"	f	file:
jsonExtractFunc	testdocs/sqlite3.c	/^static void jsonExtractFunc($/;"	f	file:
jsonGrow	testdocs/sqlite3.c	/^static int jsonGrow(JsonString *p, u32 N){$/;"	f	file:
jsonInit	testdocs/sqlite3.c	/^static void jsonInit(JsonString *p, sqlite3_context *pCtx){$/;"	f	file:
jsonIs4Hex	testdocs/sqlite3.c	/^static int jsonIs4Hex(const char *z){$/;"	f	file:
jsonIsSpace	testdocs/sqlite3.c	/^static const char jsonIsSpace[] = {$/;"	v	file:
jsonLabelCompare	testdocs/sqlite3.c	/^static int jsonLabelCompare(JsonNode *pNode, const char *zKey, u32 nKey){$/;"	f	file:
jsonLookup	testdocs/sqlite3.c	/^static JsonNode *jsonLookup($/;"	f	file:
jsonLookupAppend	testdocs/sqlite3.c	/^static JsonNode *jsonLookupAppend($/;"	f	file:
jsonLookupStep	testdocs/sqlite3.c	/^static JsonNode *jsonLookupStep($/;"	f	file:
jsonMergePatch	testdocs/sqlite3.c	/^static JsonNode *jsonMergePatch($/;"	f	file:
jsonNodeSize	testdocs/sqlite3.c	/^static u32 jsonNodeSize(JsonNode *pNode){$/;"	f	file:
jsonObjectFinal	testdocs/sqlite3.c	/^static void jsonObjectFinal(sqlite3_context *ctx){$/;"	f	file:
jsonObjectFunc	testdocs/sqlite3.c	/^static void jsonObjectFunc($/;"	f	file:
jsonObjectStep	testdocs/sqlite3.c	/^static void jsonObjectStep($/;"	f	file:
jsonOom	testdocs/sqlite3.c	/^static void jsonOom(JsonString *p){$/;"	f	file:
jsonParse	testdocs/sqlite3.c	/^static int jsonParse($/;"	f	file:
jsonParseAddNode	testdocs/sqlite3.c	/^static int jsonParseAddNode($/;"	f	file:
jsonParseAddNodeExpand	testdocs/sqlite3.c	/^static JSON_NOINLINE int jsonParseAddNodeExpand($/;"	f	file:
jsonParseCached	testdocs/sqlite3.c	/^static JsonParse *jsonParseCached($/;"	f	file:
jsonParseFillInParentage	testdocs/sqlite3.c	/^static void jsonParseFillInParentage(JsonParse *pParse, u32 i, u32 iParent){$/;"	f	file:
jsonParseFindParents	testdocs/sqlite3.c	/^static int jsonParseFindParents(JsonParse *pParse){$/;"	f	file:
jsonParseFree	testdocs/sqlite3.c	/^static void jsonParseFree(JsonParse *pParse){$/;"	f	file:
jsonParseFunc	testdocs/sqlite3.c	/^static void jsonParseFunc($/;"	f	file:
jsonParseReset	testdocs/sqlite3.c	/^static void jsonParseReset(JsonParse *pParse){$/;"	f	file:
jsonParseValue	testdocs/sqlite3.c	/^static int jsonParseValue(JsonParse *pParse, u32 i){$/;"	f	file:
jsonPatchFunc	testdocs/sqlite3.c	/^static void jsonPatchFunc($/;"	f	file:
jsonPathSyntaxError	testdocs/sqlite3.c	/^static char *jsonPathSyntaxError(const char *zErr){$/;"	f	file:
jsonPrintf	testdocs/sqlite3.c	/^static void jsonPrintf(int N, JsonString *p, const char *zFormat, ...){$/;"	f	file:
jsonQuoteFunc	testdocs/sqlite3.c	/^static void jsonQuoteFunc($/;"	f	file:
jsonRemoveAllNulls	testdocs/sqlite3.c	/^static void jsonRemoveAllNulls(JsonNode *pNode){$/;"	f	file:
jsonRemoveFunc	testdocs/sqlite3.c	/^static void jsonRemoveFunc($/;"	f	file:
jsonRenderNode	testdocs/sqlite3.c	/^static void jsonRenderNode($/;"	f	file:
jsonReplaceFunc	testdocs/sqlite3.c	/^static void jsonReplaceFunc($/;"	f	file:
jsonReset	testdocs/sqlite3.c	/^static void jsonReset(JsonString *p){$/;"	f	file:
jsonResult	testdocs/sqlite3.c	/^static void jsonResult(JsonString *p){$/;"	f	file:
jsonReturn	testdocs/sqlite3.c	/^static void jsonReturn($/;"	f	file:
jsonReturnJson	testdocs/sqlite3.c	/^static void jsonReturnJson($/;"	f	file:
jsonSetFunc	testdocs/sqlite3.c	/^static void jsonSetFunc($/;"	f	file:
jsonTest1Func	testdocs/sqlite3.c	/^static void jsonTest1Func($/;"	f	file:
jsonTreeModule	testdocs/sqlite3.c	/^static sqlite3_module jsonTreeModule = {$/;"	v	file:
jsonType	testdocs/sqlite3.c	/^static const char * const jsonType[] = {$/;"	v	file:
jsonTypeFunc	testdocs/sqlite3.c	/^static void jsonTypeFunc($/;"	f	file:
jsonValidFunc	testdocs/sqlite3.c	/^static void jsonValidFunc($/;"	f	file:
jsonWrongNumArgs	testdocs/sqlite3.c	/^static void jsonWrongNumArgs($/;"	f	file:
jsonZero	testdocs/sqlite3.c	/^static void jsonZero(JsonString *p){$/;"	f	file:
juliandayFunc	testdocs/sqlite3.c	/^static void juliandayFunc($/;"	f	file:
k	testdocs/sqlite3.c	/^  int k;                     \/* Resume scanning at this->pWC->a[this->k] *\/$/;"	m	struct:WhereScan	file:
key	testdocs/sqlite3.c	/^  Blob key;                       \/* Last key written to the current block *\/$/;"	m	struct:NodeWriter	file:
keyClass	testdocs/sqlite3.c	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash	file:
keyConf	testdocs/sqlite3.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	file:
keyInfoFromExprList	testdocs/sqlite3.c	/^static KeyInfo *keyInfoFromExprList($/;"	f	file:
keyinfo	testdocs/sqlite3.c	/^  KeyInfo keyinfo;$/;"	m	struct:PreUpdate	file:
keywordCode	testdocs/sqlite3.c	/^static int keywordCode(const char *z, int n, int *pType){$/;"	f	file:
labelBkOut	testdocs/sqlite3.c	/^  int labelBkOut;       \/* Start label for the block-output subroutine *\/$/;"	m	struct:SortCtx	file:
labelDone	testdocs/sqlite3.c	/^  int labelDone;        \/* Jump here when done, ex: LIMIT reached *\/$/;"	m	struct:SortCtx	file:
langidFromSelect	testdocs/sqlite3.c	/^static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){$/;"	f	file:
lastErrno	testdocs/sqlite3.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:
lastErrno	testdocs/sqlite3.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:
lastErrno	testdocs/sqlite3.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:
lastRowid	testdocs/sqlite3.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	file:
lastRowid	testdocs/sqlite3.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	file:
last_insert_rowid	testdocs/sqlite3.c	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
last_insert_rowid	testdocs/sqlite3.c	/^static void last_insert_rowid($/;"	f	file:
leaf	testdocs/sqlite3.c	/^  u8 leaf;             \/* True if a leaf page *\/$/;"	m	struct:MemPage	file:
leaveMutex	testdocs/sqlite3.c	/^static void leaveMutex(void){$/;"	f	file:
leftColumn	testdocs/sqlite3.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon32	file:
leftCursor	testdocs/sqlite3.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:
len	edit.h	/^            size_t len;  \/* number of runes deleted *\/$/;"	m	struct:Log::__anon2::__anon4
len	edit.h	/^    size_t len;   \/* length of the buffer *\/$/;"	m	struct:__anon1
length	testdocs/sqlite3.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
lengthFunc	testdocs/sqlite3.c	/^static void lengthFunc($/;"	f	file:
lhs	testdocs/sqlite3.c	/^  YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon35	file:
lhs	testdocs/sqlite3.c	/^  fts5YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon39	file:
libversion	testdocs/sqlite3.c	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	file:
libversion_number	testdocs/sqlite3.c	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	file:
likeFunc	testdocs/sqlite3.c	/^static void likeFunc($/;"	f	file:
likeInfoAlt	testdocs/sqlite3.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	typeref:struct:compareInfo	file:
likeInfoNorm	testdocs/sqlite3.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	typeref:struct:compareInfo	file:
likely	testdocs/sqlite3.c	/^#define likely(/;"	d	file:
limit	testdocs/sqlite3.c	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
list	testdocs/sqlite3.c	/^    } list;$/;"	m	union:Mem3Block::__anon21	typeref:struct:Mem3Block::__anon21::__anon23	file:
list	testdocs/sqlite3.c	/^  SorterList list;                \/* List for thread to write to a PMA *\/$/;"	m	struct:SortSubtask	file:
list	testdocs/sqlite3.c	/^  SorterList list;                \/* List of in-memory records *\/$/;"	m	struct:VdbeSorter	file:
loadAnalysis	testdocs/sqlite3.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:
loadExt	testdocs/sqlite3.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
loadStat4	testdocs/sqlite3.c	/^static int loadStat4(sqlite3 *db, const char *zDb){$/;"	f	file:
loadStatTbl	testdocs/sqlite3.c	/^static int loadStatTbl($/;"	f	file:
load_extension	testdocs/sqlite3.c	/^  int (*load_extension)(sqlite3*,const char*,const char*,char**);$/;"	m	struct:sqlite3_api_routines	file:
local	testdocs/sqlite3.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:
local_ioerr	testdocs/sqlite3.c	/^static void local_ioerr(){$/;"	f	file:
localtime	testdocs/sqlite3.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f
localtimeOffset	testdocs/sqlite3.c	/^static sqlite3_int64 localtimeOffset($/;"	f	file:
lock	testdocs/sqlite3.c	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree	file:
lockBtree	testdocs/sqlite3.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:
lockBtreeMutex	testdocs/sqlite3.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:
lockError	testdocs/sqlite3.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:
lockMask	testdocs/sqlite3.c	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe	file:
lockProxy	testdocs/sqlite3.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockProxyPath	testdocs/sqlite3.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockTrace	testdocs/sqlite3.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:
locked	testdocs/sqlite3.c	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree	file:
lockingContext	testdocs/sqlite3.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:
locktype	testdocs/sqlite3.c	/^  u8 locktype;            \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:
log	testdocs/sqlite3.c	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
logBadConnection	testdocs/sqlite3.c	/^static void logBadConnection(const char *zType){$/;"	f	file:
log_clear	buf.c	/^static void log_clear(Log** list) {$/;"	f	file:
log_delete	buf.c	/^static void log_delete(Buf* buf, Log** list, size_t off, Rune* r, size_t len) {$/;"	f	file:
log_insert	buf.c	/^static void log_insert(Buf* buf, Log** list, size_t beg, size_t end) {$/;"	f	file:
lookaside	testdocs/sqlite3.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	file:
lookupName	testdocs/sqlite3.c	/^static int lookupName($/;"	f	file:
lowerFunc	testdocs/sqlite3.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
lru	testdocs/sqlite3.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	file:
lru	testdocs/sqlite3.c	/^  PgHdr1 lru;                    \/* The beginning and end of the LRU list *\/$/;"	m	struct:PGroup	file:
lseek	testdocs/sqlite3.c	/^# define lseek /;"	d	file:
m	testdocs/sqlite3.c	/^  int h, m;           \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
m	testdocs/sqlite3.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	file:
mLock	testdocs/sqlite3.c	/^  u32 mLock;$/;"	m	struct:sqlite3rbu	file:
mPragFlg	testdocs/sqlite3.c	/^  u8 mPragFlg;             \/* Zero or more PragFlg_XXX values *\/$/;"	m	struct:PragmaName	file:
mTrace	testdocs/sqlite3.c	/^  u8 mTrace;                    \/* zero or more SQLITE_TRACE flags *\/$/;"	m	struct:sqlite3	file:
m_eq_1	testdocs/sqlite3.c	/^static int m_eq_1(const char *z){$/;"	f	file:
m_gt_0	testdocs/sqlite3.c	/^static int m_gt_0(const char *z){$/;"	f	file:
m_gt_1	testdocs/sqlite3.c	/^static int m_gt_1(const char *z){$/;"	f	file:
magic	testdocs/sqlite3.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	file:
magic	testdocs/sqlite3.c	/^  u32 magic;                  \/* Always RTREE_GEOMETRY_MAGIC *\/$/;"	m	struct:RtreeMatchArg	file:
magic	testdocs/sqlite3.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	file:
magic1	testdocs/sqlite3.c	/^  u32 magic1;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
magic2	testdocs/sqlite3.c	/^  u32 magic2;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
main	testbuf.c	/^int main(int argc, char** argv) {$/;"	f
major	testdocs/sqlite3.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:
major	testdocs/sqlite3.c	/^  fts5YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:fts5yyStackEntry	file:
malloc	testdocs/sqlite3.c	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
malloc64	testdocs/sqlite3.c	/^  void *(*malloc64)(sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
mallocFailed	testdocs/sqlite3.c	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk	file:
mallocFailed	testdocs/sqlite3.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	file:
mallocWithAlarm	testdocs/sqlite3.c	/^static void mallocWithAlarm(int n, void **pp){$/;"	f	file:
markTermAsChild	testdocs/sqlite3.c	/^static void markTermAsChild(WhereClause *pWC, int iChild, int iParent){$/;"	f	file:
mask	testdocs/sqlite3.c	/^  struct {int value; int mask;} yy497;$/;"	m	struct:__anon33::__anon34	file:
maskLoop	testdocs/sqlite3.c	/^  Bitmask maskLoop;     \/* Bitmask of all WhereLoop objects in this path *\/$/;"	m	struct:WherePath	file:
maskPage	testdocs/sqlite3.c	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage	file:
maskSelf	testdocs/sqlite3.c	/^  Bitmask maskSelf;     \/* Bitmask identifying table iTab *\/$/;"	m	struct:WhereLoop	file:
maskUsed	testdocs/sqlite3.c	/^  u64 maskUsed;           \/* Mask of columns used by this cursor *\/$/;"	m	struct:VdbeCursor	file:
matchAll	testdocs/sqlite3.c	/^  u8 matchAll;          \/* "*" or "%" *\/$/;"	m	struct:compareInfo	file:
matchOne	testdocs/sqlite3.c	/^  u8 matchOne;          \/* "?" or "_" *\/$/;"	m	struct:compareInfo	file:
matchQuality	testdocs/sqlite3.c	/^static int matchQuality($/;"	f	file:
matchSet	testdocs/sqlite3.c	/^  u8 matchSet;          \/* "[" or 0 *\/$/;"	m	struct:compareInfo	file:
max	stdc.h	/^    #define max(/;"	d
max1bytePayload	testdocs/sqlite3.c	/^  u8 max1bytePayload;   \/* Maximum first byte of cell for a 1-byte payload *\/$/;"	m	struct:BtShared	file:
max1bytePayload	testdocs/sqlite3.c	/^  u8 max1bytePayload;  \/* min(maxLocal,127) *\/$/;"	m	struct:MemPage	file:
maxCount	testdocs/sqlite3.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:
maxLeaf	testdocs/sqlite3.c	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
maxLocal	testdocs/sqlite3.c	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
maxLocal	testdocs/sqlite3.c	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage	file:
maxOut	testdocs/sqlite3.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:
maxRequest	testdocs/sqlite3.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:
mayAbort	testdocs/sqlite3.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	file:
measureAllocationSize	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void measureAllocationSize(sqlite3 *db, void *p){$/;"	f	file:
mem	testdocs/sqlite3.c	/^} mem;$/;"	v	typeref:struct:__anon20	file:
mem0	testdocs/sqlite3.c	/^#define mem0 /;"	d	file:
mem0	testdocs/sqlite3.c	/^} mem0 = { 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:Mem0Global	file:
mem3	testdocs/sqlite3.c	/^#define mem3 /;"	d	file:
mem3	testdocs/sqlite3.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global	file:
mem5	testdocs/sqlite3.c	/^#define mem5 /;"	d	file:
mem5	testdocs/sqlite3.c	/^} mem5;$/;"	v	typeref:struct:Mem5Global	file:
memAboutToChange	testdocs/sqlite3.c	/^# define memAboutToChange(/;"	d	file:
memDb	testdocs/sqlite3.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:
memIntValue	testdocs/sqlite3.c	/^static SQLITE_NOINLINE i64 memIntValue(Mem *pMem){$/;"	f	file:
memIsValid	testdocs/sqlite3.c	/^#define memIsValid(/;"	d	file:
memRealValue	testdocs/sqlite3.c	/^static SQLITE_NOINLINE double memRealValue(Mem *pMem){$/;"	f	file:
memTracePrint	testdocs/sqlite3.c	/^static void memTracePrint(Mem *p){$/;"	f	file:
memcpy	testdocs/sqlite3.c	/^# define memcpy(/;"	d	file:
memjrnlClose	testdocs/sqlite3.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:
memjrnlCreateFile	testdocs/sqlite3.c	/^static int memjrnlCreateFile(MemJournal *p){$/;"	f	file:
memjrnlFileSize	testdocs/sqlite3.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
memjrnlFreeChunks	testdocs/sqlite3.c	/^static void memjrnlFreeChunks(MemJournal *p){$/;"	f	file:
memjrnlRead	testdocs/sqlite3.c	/^static int memjrnlRead($/;"	f	file:
memjrnlSync	testdocs/sqlite3.c	/^static int memjrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:
memjrnlTruncate	testdocs/sqlite3.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
memjrnlWrite	testdocs/sqlite3.c	/^static int memjrnlWrite($/;"	f	file:
memory_highwater	testdocs/sqlite3.c	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	file:
memory_used	testdocs/sqlite3.c	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	file:
memsys3Checkout	testdocs/sqlite3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:
memsys3Enter	testdocs/sqlite3.c	/^static void memsys3Enter(void){$/;"	f	file:
memsys3Free	testdocs/sqlite3.c	/^static void memsys3Free(void *pPrior){$/;"	f	file:
memsys3FreeUnsafe	testdocs/sqlite3.c	/^static void memsys3FreeUnsafe(void *pOld){$/;"	f	file:
memsys3FromMaster	testdocs/sqlite3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:
memsys3Init	testdocs/sqlite3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:
memsys3Leave	testdocs/sqlite3.c	/^static void memsys3Leave(void){$/;"	f	file:
memsys3Link	testdocs/sqlite3.c	/^static void memsys3Link(u32 i){$/;"	f	file:
memsys3LinkIntoList	testdocs/sqlite3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:
memsys3Malloc	testdocs/sqlite3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:
memsys3MallocUnsafe	testdocs/sqlite3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:
memsys3Merge	testdocs/sqlite3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:
memsys3OutOfMemory	testdocs/sqlite3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:
memsys3Realloc	testdocs/sqlite3.c	/^static void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys3Roundup	testdocs/sqlite3.c	/^static int memsys3Roundup(int n){$/;"	f	file:
memsys3Shutdown	testdocs/sqlite3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:
memsys3Size	testdocs/sqlite3.c	/^static int memsys3Size(void *p){$/;"	f	file:
memsys3Unlink	testdocs/sqlite3.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:
memsys3UnlinkFromList	testdocs/sqlite3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:
memsys5Enter	testdocs/sqlite3.c	/^static void memsys5Enter(void){$/;"	f	file:
memsys5Free	testdocs/sqlite3.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:
memsys5FreeUnsafe	testdocs/sqlite3.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:
memsys5Init	testdocs/sqlite3.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:
memsys5Leave	testdocs/sqlite3.c	/^static void memsys5Leave(void){$/;"	f	file:
memsys5Link	testdocs/sqlite3.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:
memsys5Log	testdocs/sqlite3.c	/^static int memsys5Log(int iValue){$/;"	f	file:
memsys5Malloc	testdocs/sqlite3.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:
memsys5MallocUnsafe	testdocs/sqlite3.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:
memsys5Realloc	testdocs/sqlite3.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys5Roundup	testdocs/sqlite3.c	/^static int memsys5Roundup(int n){$/;"	f	file:
memsys5Shutdown	testdocs/sqlite3.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:
memsys5Size	testdocs/sqlite3.c	/^static int memsys5Size(void *p){$/;"	f	file:
memsys5Unlink	testdocs/sqlite3.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:
min	stdc.h	/^    #define min(/;"	d
minFrame	testdocs/sqlite3.c	/^  u32 minFrame;              \/* Ignore wal frames before this one *\/$/;"	m	struct:Wal	file:
minLeaf	testdocs/sqlite3.c	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
minLocal	testdocs/sqlite3.c	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
minLocal	testdocs/sqlite3.c	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage	file:
minMaxFinalize	testdocs/sqlite3.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:
minMaxQuery	testdocs/sqlite3.c	/^static u8 minMaxQuery(AggInfo *pAggInfo, ExprList **ppMinMax){$/;"	f	file:
minWriteFileFormat	testdocs/sqlite3.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	file:
minmaxFunc	testdocs/sqlite3.c	/^static void minmaxFunc($/;"	f	file:
minmaxStep	testdocs/sqlite3.c	/^static void minmaxStep($/;"	f	file:
minor	testdocs/sqlite3.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:
minor	testdocs/sqlite3.c	/^  fts5YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:fts5yyStackEntry	file:
mkFullPathname	testdocs/sqlite3.c	/^static int mkFullPathname($/;"	f	file:
mmapSize	testdocs/sqlite3.c	/^  sqlite3_int64 mmapSize;             \/* Usable size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSize	testdocs/sqlite3.c	/^  sqlite3_int64 mmapSize;       \/* Usable size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeActual	testdocs/sqlite3.c	/^  sqlite3_int64 mmapSizeActual;       \/* Actual size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSizeActual	testdocs/sqlite3.c	/^  sqlite3_int64 mmapSizeActual; \/* Actual size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeMax	testdocs/sqlite3.c	/^  sqlite3_int64 mmapSizeMax;          \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:unixFile	file:
mmapSizeMax	testdocs/sqlite3.c	/^  sqlite3_int64 mmapSizeMax;    \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:winFile	file:
mmap_close	buf.c	/^void mmap_close(FMap file) {$/;"	f
mmap_readonly	buf.c	/^FMap mmap_readonly(char* path) {$/;"	f
mmap_readwrite	buf.c	/^FMap mmap_readwrite(char* path, size_t sz) {$/;"	f
mnMaster	testdocs/sqlite3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:
mnPmaSize	testdocs/sqlite3.c	/^  int mnPmaSize;                  \/* Minimum PMA size, in bytes *\/$/;"	m	struct:VdbeSorter	file:
mnReg	testdocs/sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:
mnReq	testdocs/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
modified	edit.h	/^    bool modified;        \/* tracks whether the buffer has been modified *\/$/;"	m	struct:__anon5
modifyPagePointer	testdocs/sqlite3.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:
modtime	buf.c	/^uint64_t modtime(char* path) {$/;"	f
modtime	edit.h	/^    uint64_t modtime;     \/* modification time of the opened file *\/$/;"	m	struct:__anon5
moveToChild	testdocs/sqlite3.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:
moveToLeftmost	testdocs/sqlite3.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:
moveToParent	testdocs/sqlite3.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:
moveToRightmost	testdocs/sqlite3.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:
moveToRoot	testdocs/sqlite3.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:
movetoTarget	testdocs/sqlite3.c	/^  i64 movetoTarget;       \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
mprintf	testdocs/sqlite3.c	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
msize	testdocs/sqlite3.c	/^  sqlite3_uint64 (*msize)(void*);$/;"	m	struct:sqlite3_api_routines	file:
multiSelect	testdocs/sqlite3.c	/^static int multiSelect($/;"	f	file:
multiSelectCollSeq	testdocs/sqlite3.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:
multiSelectOrderBy	testdocs/sqlite3.c	/^static int multiSelectOrderBy($/;"	f	file:
multiSelectOrderByKeyInfo	testdocs/sqlite3.c	/^static KeyInfo *multiSelectOrderByKeyInfo(Parse *pParse, Select *p, int nExtra){$/;"	f	file:
multiSelectValues	testdocs/sqlite3.c	/^static int multiSelectValues($/;"	f	file:
mutex	testdocs/sqlite3.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	testdocs/sqlite3.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *mutex;           \/* Mutex to protect pMain *\/$/;"	m	struct:rbu_vfs	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this object *\/$/;"	m	struct:BtShared	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon20	file:
mutex	testdocs/sqlite3.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	file:
mutexIsInit	testdocs/sqlite3.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutex_alloc	testdocs/sqlite3.c	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mutex_enter	testdocs/sqlite3.c	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_free	testdocs/sqlite3.c	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_leave	testdocs/sqlite3.c	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_try	testdocs/sqlite3.c	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mxAlloc	testdocs/sqlite3.c	/^  u32  mxAlloc;        \/* Maximum allowed allocation.  0 for no malloc usage *\/$/;"	m	struct:StrAccum	file:
mxCurrent	testdocs/sqlite3.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon20	file:
mxErr	testdocs/sqlite3.c	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk	file:
mxFrame	testdocs/sqlite3.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:
mxKeysize	testdocs/sqlite3.c	/^  int mxKeysize;                  \/* Largest serialized key seen so far *\/$/;"	m	struct:VdbeSorter	file:
mxLevel	testdocs/sqlite3.c	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
mxLevel	testdocs/sqlite3.c	/^  int mxLevel;                      \/* iLevel value for root of the tree *\/$/;"	m	struct:RtreeCursor	file:
mxMmap	testdocs/sqlite3.c	/^  sqlite3_int64 mxMmap;             \/* Maximum value for szMmap *\/$/;"	m	struct:Sqlite3Config	file:
mxOut	testdocs/sqlite3.c	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside	file:
mxParserStack	testdocs/sqlite3.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	file:
mxPathname	testdocs/sqlite3.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	file:
mxPgno	testdocs/sqlite3.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:
mxPinned	testdocs/sqlite3.c	/^  unsigned int mxPinned;         \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:
mxPmaSize	testdocs/sqlite3.c	/^  int mxPmaSize;                  \/* Maximum PMA size, in bytes.  0==no limit *\/$/;"	m	struct:VdbeSorter	file:
mxReg	testdocs/sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:
mxReq	testdocs/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
mxSample	testdocs/sqlite3.c	/^  int mxSample;             \/* Maximum number of samples to accumulate *\/$/;"	m	struct:Stat4Accum	file:
mxSavepoint	testdocs/sqlite3.c	/^  int mxSavepoint;       \/* Largest valid xSavepoint integer *\/$/;"	m	struct:Fts3Table	file:
mxStrlen	testdocs/sqlite3.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	file:
mxSz	testdocs/sqlite3.c	/^  int mxSz;                       \/* Maximum bytes of data to store *\/$/;"	m	struct:IncrMerger	file:
mxValue	testdocs/sqlite3.c	/^  sqlite3StatValueType mxValue[10];   \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:
mxWalSize	testdocs/sqlite3.c	/^  i64 mxWalSize;             \/* Truncate WAL to this size upon reset *\/$/;"	m	struct:Wal	file:
n	testdocs/sqlite3.c	/^    int n;                                    \/* A counter *\/$/;"	m	union:Walker::__anon17	file:
n	testdocs/sqlite3.c	/^  i64 n;$/;"	m	struct:CountCtx	file:
n	testdocs/sqlite3.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:
n	testdocs/sqlite3.c	/^  int n;                          \/* Number of bytes in buffer z *\/$/;"	m	struct:Fts3PhraseToken	file:
n	testdocs/sqlite3.c	/^  int n;                          \/* Number of valid bytes of data in a[] *\/$/;"	m	struct:Blob	file:
n	testdocs/sqlite3.c	/^  int n;                          \/* Size of buffer a[] in bytes *\/$/;"	m	struct:Fts5LookaheadReader	file:
n	testdocs/sqlite3.c	/^  int n;                          \/* Size of buffer at a[] in bytes *\/$/;"	m	struct:Fts5PoslistReader	file:
n	testdocs/sqlite3.c	/^  int n;                          \/* Size of buffer p in bytes *\/$/;"	m	struct:Fts5Token	file:
n	testdocs/sqlite3.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:
n	testdocs/sqlite3.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:sqlite3_value	file:
n	testdocs/sqlite3.c	/^  int n;            \/* Size of record in bytes *\/$/;"	m	struct:IndexSample	file:
n	testdocs/sqlite3.c	/^  int n;$/;"	m	struct:Fts5Buffer	file:
n	testdocs/sqlite3.c	/^  u16 n;                      \/* Number of valid a[] entries *\/$/;"	m	struct:WhereOrSet	file:
n	testdocs/sqlite3.c	/^  u32 n;                 \/* Bytes of content, or number of sub-nodes *\/$/;"	m	struct:JsonNode	file:
n	testdocs/sqlite3.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	file:
n90pct	testdocs/sqlite3.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:
nAccumulator	testdocs/sqlite3.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	file:
nAdvance	testdocs/sqlite3.c	/^  int nAdvance;                   \/* How many seg-readers to advance *\/$/;"	m	struct:Fts3MultiSegReader	file:
nAll	testdocs/sqlite3.c	/^  int nAll;                      \/* Size of a[] in bytes *\/$/;"	m	struct:Fts3Doclist	file:
nAlloc	testdocs/sqlite3.c	/^  int nAlloc;                     \/* Allocated size of a[] (nAlloc>=n) *\/$/;"	m	struct:Blob	file:
nAlloc	testdocs/sqlite3.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:
nAlloc	testdocs/sqlite3.c	/^  int nAlloc;                     \/* Size of allocation containing aBuf *\/$/;"	m	struct:SessionBuffer	file:
nAlloc	testdocs/sqlite3.c	/^  int nAlloc;                     \/* Total size of allocation *\/$/;"	m	struct:Fts5HashEntry	file:
nAlloc	testdocs/sqlite3.c	/^  int nAlloc;                     \/* space allocated at zToken *\/$/;"	m	struct:unicode_cursor	file:
nAlloc	testdocs/sqlite3.c	/^  int nAlloc;                 \/* Bytes of space at aAlloc *\/$/;"	m	struct:PmaReader	file:
nAlloc	testdocs/sqlite3.c	/^  int nAlloc;            \/* Number of a[] slots allocated *\/$/;"	m	struct:ExprList	file:
nAlloc	testdocs/sqlite3.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon20	file:
nAlloc	testdocs/sqlite3.c	/^  u32  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	file:
nAlloc	testdocs/sqlite3.c	/^  u32 nAlloc;        \/* Number of slots of aNode[] allocated *\/$/;"	m	struct:JsonParse	file:
nAlloc	testdocs/sqlite3.c	/^  u32 nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:
nAlloc	testdocs/sqlite3.c	/^  u32 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	file:
nAlloc	testdocs/sqlite3.c	/^  u64 nAlloc;              \/* Bytes of storage available in zBuf[] *\/$/;"	m	struct:JsonString	file:
nAlloc	testdocs/sqlite3.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:
nAllocated	testdocs/sqlite3.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nArg	testdocs/sqlite3.c	/^  i8 nArg;             \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	file:
nArg	testdocs/sqlite3.c	/^  int nArg;                \/* Total number of arguments *\/$/;"	m	struct:PrintfArguments	file:
nAuthPW	testdocs/sqlite3.c	/^  int nAuthPW;                  \/* Size of the zAuthPW in bytes *\/$/;"	m	struct:sqlite3_userauth	file:
nAutoincrmerge	testdocs/sqlite3.c	/^  int nAutoincrmerge;             \/* Value configured by 'automerge' *\/$/;"	m	struct:Fts3Table	file:
nAutomerge	testdocs/sqlite3.c	/^  int nAutomerge;                 \/* 'automerge' setting *\/$/;"	m	struct:Fts5Config	file:
nBackfill	testdocs/sqlite3.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:
nBackfillAttempted	testdocs/sqlite3.c	/^  u32 nBackfillAttempted;         \/* WAL frames perhaps written, or maybe not *\/$/;"	m	struct:WalCkptInfo	file:
nBacktrace	testdocs/sqlite3.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:
nBacktrace	testdocs/sqlite3.c	/^  int nBacktrace;$/;"	m	struct:__anon20	file:
nBacktraceSlots	testdocs/sqlite3.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:
nBackup	testdocs/sqlite3.c	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree	file:
nBlock	testdocs/sqlite3.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:
nBtm	testdocs/sqlite3.c	/^      u16 nBtm;              \/* Size of BTM vector *\/$/;"	m	struct:WhereLoop::__anon29::__anon30	file:
nBuf	testdocs/sqlite3.c	/^  int nBuf;                       \/* Size of buffer aBuf *\/$/;"	m	struct:SessionBuffer	file:
nBuffer	testdocs/sqlite3.c	/^  int nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nBuffer	testdocs/sqlite3.c	/^  int nBuffer;                    \/* Size of write buffer in bytes *\/$/;"	m	struct:PmaWriter	file:
nBuffer	testdocs/sqlite3.c	/^  int nBuffer;                \/* Size of read buffer in bytes *\/$/;"	m	struct:PmaReader	file:
nBuffer	testdocs/sqlite3.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:
nBusy	testdocs/sqlite3.c	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	file:
nBusy	testdocs/sqlite3.c	/^  u32 nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:
nByte	testdocs/sqlite3.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:
nBytes	testdocs/sqlite3.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nBytesPerCell	testdocs/sqlite3.c	/^  u8 nBytesPerCell;           \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:
nCell	testdocs/sqlite3.c	/^  int nCell;                      \/* Number of cells on page *\/$/;"	m	struct:StatPage	file:
nCell	testdocs/sqlite3.c	/^  int nCell;                      \/* Value of 'ncell' column *\/$/;"	m	struct:StatCursor	file:
nCell	testdocs/sqlite3.c	/^  int nCell;              \/* Number of cells in apCell[] *\/$/;"	m	struct:CellArray	file:
nCell	testdocs/sqlite3.c	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage	file:
nChange	testdocs/sqlite3.c	/^  int nChange;                    \/* Size of apChange[] array *\/$/;"	m	struct:SessionTable	file:
nChange	testdocs/sqlite3.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	file:
nChange	testdocs/sqlite3.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	file:
nChange	testdocs/sqlite3.c	/^  int nChange;            \/* Statement changes (Vdbe.nChange)     *\/$/;"	m	struct:VdbeFrame	file:
nChar	testdocs/sqlite3.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:
nChar	testdocs/sqlite3.c	/^  u32  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	file:
nChild	testdocs/sqlite3.c	/^  int nChild;                     \/* Number of child nodes *\/$/;"	m	struct:Fts5ExprNode	file:
nChild	testdocs/sqlite3.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:
nChildCsr	testdocs/sqlite3.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	file:
nChildMem	testdocs/sqlite3.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	file:
nChunkSize	testdocs/sqlite3.c	/^  int nChunkSize;                 \/* In-memory chunk-size *\/$/;"	m	struct:MemJournal	file:
nCkpt	testdocs/sqlite3.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:
nCol	testdocs/sqlite3.c	/^  i16 nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	file:
nCol	testdocs/sqlite3.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:
nCol	testdocs/sqlite3.c	/^  int nCol;                       \/* Number of columns *\/$/;"	m	struct:Fts5Config	file:
nCol	testdocs/sqlite3.c	/^  int nCol;                       \/* Number of columns in current object *\/$/;"	m	struct:RbuObjIter	file:
nCol	testdocs/sqlite3.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:
nCol	testdocs/sqlite3.c	/^  int nCol;                       \/* Number of columns in table zName *\/$/;"	m	struct:SessionTable	file:
nCol	testdocs/sqlite3.c	/^  int nCol;                       \/* Number of columns in zTab *\/$/;"	m	struct:sqlite3_changeset_iter	file:
nCol	testdocs/sqlite3.c	/^  int nCol;                       \/* Size of azCol[] and abPK[] arrays *\/$/;"	m	struct:SessionApplyCtx	file:
nCol	testdocs/sqlite3.c	/^  int nCol;                 \/* Number of columns in index + pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nCol	testdocs/sqlite3.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	file:
nCol	testdocs/sqlite3.c	/^  int nCol;$/;"	m	struct:Fts5Colset	file:
nColCache	testdocs/sqlite3.c	/^  u8 nColCache;        \/* Number of entries in aColCache[] *\/$/;"	m	struct:Parse	file:
nColumn	testdocs/sqlite3.c	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table	file:
nColumn	testdocs/sqlite3.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	file:
nColumn	testdocs/sqlite3.c	/^  u16 nColumn;             \/* Number of columns stored in the index *\/$/;"	m	struct:Index	file:
nColumn	testdocs/sqlite3.c	/^  u32 nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:
nConstraint	testdocs/sqlite3.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:
nConstraint	testdocs/sqlite3.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	file:
nCoord	testdocs/sqlite3.c	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
nCost	testdocs/sqlite3.c	/^  int nCost;                      \/* Cost of running iterator *\/$/;"	m	struct:Fts3MultiSegReader	file:
nCrisisMerge	testdocs/sqlite3.c	/^  int nCrisisMerge;               \/* Maximum allowed segments per level *\/$/;"	m	struct:Fts5Config	file:
nCsr	testdocs/sqlite3.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	file:
nCte	testdocs/sqlite3.c	/^  int nCte;                       \/* Number of CTEs in the WITH clause *\/$/;"	m	struct:With	file:
nCurrent	testdocs/sqlite3.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon20	file:
nCurrentPage	testdocs/sqlite3.c	/^  unsigned int nCurrentPage;     \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:
nCursor	testdocs/sqlite3.c	/^  int nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	file:
nCursor	testdocs/sqlite3.c	/^  int nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	file:
nCursor	testdocs/sqlite3.c	/^  u32 nCursor;                \/* Number of open cursors *\/$/;"	m	struct:Rtree	file:
nData	testdocs/sqlite3.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:
nData	testdocs/sqlite3.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:
nData	testdocs/sqlite3.c	/^  int nData;                      \/* Number of bytes in aData *\/$/;"	m	struct:SessionInput	file:
nData	testdocs/sqlite3.c	/^  int nData;                      \/* Total bytes of data (incl. structure) *\/$/;"	m	struct:Fts5HashEntry	file:
nData	testdocs/sqlite3.c	/^  int nData;              \/* Size of pData.  0 if none. *\/$/;"	m	struct:BtreePayload	file:
nData	testdocs/sqlite3.c	/^  int nData;$/;"	m	struct:Fts5IndexIter	file:
nData	testdocs/sqlite3.c	/^  int nData;$/;"	m	struct:PendingList	file:
nData	testdocs/sqlite3.c	/^  u32 nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:
nDb	testdocs/sqlite3.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	file:
nDbChange	testdocs/sqlite3.c	/^  int nDbChange;          \/* Value of db->nChange *\/$/;"	m	struct:VdbeFrame	file:
nDeferredCons	testdocs/sqlite3.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	file:
nDeferredCons	testdocs/sqlite3.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	file:
nDeferredImmCons	testdocs/sqlite3.c	/^  i64 nDeferredImmCons;               \/* Number of deferred imm fk. *\/$/;"	m	struct:Savepoint	file:
nDeferredImmCons	testdocs/sqlite3.c	/^  i64 nDeferredImmCons;         \/* Net deferred immediate constraints *\/$/;"	m	struct:sqlite3	file:
nDim	testdocs/sqlite3.c	/^  u8 nDim;                    \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:
nDim2	testdocs/sqlite3.c	/^  u8 nDim2;                   \/* Twice the number of dimensions *\/$/;"	m	struct:Rtree	file:
nDlidx	testdocs/sqlite3.c	/^  int nDlidx;                     \/* Allocated size of aDlidx[] array *\/$/;"	m	struct:Fts5SegWriter	file:
nDoc	testdocs/sqlite3.c	/^    sqlite3_int64 nDoc;           \/* 'documents' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nDoc	testdocs/sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Documents in table *\/$/;"	m	struct:Fts3Cursor	file:
nDoc	testdocs/sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Number of docs in database *\/$/;"	m	struct:MatchInfo	file:
nDoclist	testdocs/sqlite3.c	/^  int nDoclist;                   \/* Size of aDoclist[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nDoclist	testdocs/sqlite3.c	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
nDoclist	testdocs/sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in bytes *\/$/;"	m	struct:NodeReader	file:
nDoclist	testdocs/sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:
nElem	testdocs/sqlite3.c	/^  int nElem;$/;"	m	struct:MatchinfoBuffer	file:
nEmpty	testdocs/sqlite3.c	/^  int nEmpty;                     \/* Number of contiguous term-less nodes *\/$/;"	m	struct:Fts5SegWriter	file:
nEntry	testdocs/sqlite3.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:
nEntry	testdocs/sqlite3.c	/^  int nEntry;                     \/* Number of entries currently in hash *\/$/;"	m	struct:Fts5Hash	file:
nEntry	testdocs/sqlite3.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:
nEntry	testdocs/sqlite3.c	/^  int nEntry;                     \/* Total number of entries in hash table *\/$/;"	m	struct:SessionTable	file:
nEq	testdocs/sqlite3.c	/^      u16 nEq;               \/* Number of equality constraints *\/$/;"	m	struct:WhereLoop::__anon29::__anon30	file:
nEquiv	testdocs/sqlite3.c	/^  unsigned char nEquiv;      \/* Number of entries in aEquiv[] *\/$/;"	m	struct:WhereScan	file:
nErr	testdocs/sqlite3.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	file:
nErr	testdocs/sqlite3.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	file:
nErr	testdocs/sqlite3.c	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk	file:
nErr	testdocs/sqlite3.c	/^  u8 nErr;           \/* Number of errors seen *\/$/;"	m	struct:JsonParse	file:
nEst	testdocs/sqlite3.c	/^  LogEst nEst;                    \/* Estimated output rows per loop *\/$/;"	m	struct:ScanStatus	file:
nException	testdocs/sqlite3.c	/^  int nException;$/;"	m	struct:Unicode61Tokenizer	file:
nException	testdocs/sqlite3.c	/^  int nException;$/;"	m	struct:unicode_tokenizer	file:
nExpr	testdocs/sqlite3.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	file:
nExt	testdocs/sqlite3.c	/^  u32 nExt;              \/* Number of entries in aExt[] *\/$/;"	m	struct:sqlite3AutoExtList	file:
nExtension	testdocs/sqlite3.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	file:
nExtra	testdocs/sqlite3.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:
nFails	testdocs/sqlite3.c	/^  int nFails;                  \/* Number of conch taking failures *\/$/;"	m	struct:proxyLockingContext	file:
nFetchOut	testdocs/sqlite3.c	/^  int nFetchOut;                      \/* Number of outstanding xFetch refs *\/$/;"	m	struct:unixFile	file:
nFetchOut	testdocs/sqlite3.c	/^  int nFetchOut;                \/* Number of outstanding xFetch references *\/$/;"	m	struct:winFile	file:
nField	testdocs/sqlite3.c	/^  i16 nField;             \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	file:
nField	testdocs/sqlite3.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	file:
nField	testdocs/sqlite3.c	/^  u16 nField;         \/* Number of key columns in the index *\/$/;"	m	struct:KeyInfo	file:
nFirst	testdocs/sqlite3.c	/^  int nFirst;                     \/* Number of entries in aFirst[] *\/$/;"	m	struct:Fts5SFinder	file:
nFirstAlloc	testdocs/sqlite3.c	/^  int nFirstAlloc;                \/* Allocated size of aFirst[] *\/$/;"	m	struct:Fts5SFinder	file:
nFkConstraint	testdocs/sqlite3.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	file:
nFold	testdocs/sqlite3.c	/^  int nFold;                      \/* Size of aFold[] in bytes *\/$/;"	m	struct:Unicode61Tokenizer	file:
nFrame	testdocs/sqlite3.c	/^  int nFrame;                     \/* Entries in aFrame[] array *\/$/;"	m	struct:sqlite3rbu	file:
nFrame	testdocs/sqlite3.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	file:
nFrameAlloc	testdocs/sqlite3.c	/^  int nFrameAlloc;                \/* Allocated size of aFrame[] array *\/$/;"	m	struct:sqlite3rbu	file:
nFree	testdocs/sqlite3.c	/^  int nFree;           \/* Bytes of available memory *\/$/;"	m	struct:ReusableSpace	file:
nFree	testdocs/sqlite3.c	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage	file:
nFreeSlot	testdocs/sqlite3.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nFresh	testdocs/sqlite3.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:
nFunc	testdocs/sqlite3.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	file:
nHash	testdocs/sqlite3.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:
nHashSize	testdocs/sqlite3.c	/^  int nHashSize;                  \/* Bytes of memory for in-memory hash *\/$/;"	m	struct:Fts5Config	file:
nHdrParsed	testdocs/sqlite3.c	/^  u16 nHdrParsed;         \/* Number of header fields parsed so far *\/$/;"	m	struct:VdbeCursor	file:
nHeap	testdocs/sqlite3.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	file:
nHeight	testdocs/sqlite3.c	/^  int nHeight;              \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	file:
nHeight	testdocs/sqlite3.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	file:
nHidden	testdocs/sqlite3.c	/^  u8 nHidden;               \/* Number of hidden columns *\/$/;"	m	struct:PragmaVtab	file:
nId	testdocs/sqlite3.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	file:
nIdx	testdocs/sqlite3.c	/^  int nIdx;                       \/* Number of entries in aIdx[] *\/$/;"	m	struct:Fts5Sorter	file:
nIdxCol	testdocs/sqlite3.c	/^      u16 nIdxCol;           \/* Index column used for ORDER BY *\/$/;"	m	struct:WhereLoop::__anon29::__anon30	file:
nIn	testdocs/sqlite3.c	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon27::__anon28	file:
nIn	testdocs/sqlite3.c	/^  int nIn;                        \/* Size of input text in bytes *\/$/;"	m	struct:HighlightContext	file:
nIndex	testdocs/sqlite3.c	/^  int nIndex;                     \/* Number of aux. indexes on table zTbl *\/$/;"	m	struct:RbuObjIter	file:
nIndex	testdocs/sqlite3.c	/^  int nIndex;                     \/* Size of aIndex[] *\/$/;"	m	struct:Fts3Table	file:
nInitPage	testdocs/sqlite3.c	/^  int nInitPage;                 \/* Initial bulk allocation size *\/$/;"	m	struct:PCacheGlobal	file:
nInput	testdocs/sqlite3.c	/^  int nInput;                     \/* Size of aInput[] in bytes *\/$/;"	m	struct:unicode_cursor	file:
nInput	testdocs/sqlite3.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nInst	testdocs/sqlite3.c	/^  int nInst;                      \/* Total number of phrase instances *\/$/;"	m	struct:CInstIter	file:
nInstAlloc	testdocs/sqlite3.c	/^  int nInstAlloc;                 \/* Size of aInst[] array (entries \/ 3) *\/$/;"	m	struct:Fts5Cursor	file:
nInstCount	testdocs/sqlite3.c	/^  int nInstCount;                 \/* Number of phrase instances *\/$/;"	m	struct:Fts5Cursor	file:
nJson	testdocs/sqlite3.c	/^  int nJson;         \/* Length of the zJson string in bytes *\/$/;"	m	struct:JsonParse	file:
nKey	testdocs/sqlite3.c	/^  i64 nKey;                 \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor	file:
nKey	testdocs/sqlite3.c	/^  i64 nKey;      \/* The key for INTKEY tables, or nPayload otherwise *\/$/;"	m	struct:CellInfo	file:
nKey	testdocs/sqlite3.c	/^  int nKey;                       \/* Length of key in bytes *\/$/;"	m	struct:Fts5HashEntry	file:
nKey	testdocs/sqlite3.c	/^  int nKey;                   \/* Number of bytes in key *\/$/;"	m	struct:PmaReader	file:
nKey	testdocs/sqlite3.c	/^  sqlite3_int64 nKey;     \/* Size of pKey for indexes.  PRIMARY KEY for tabs *\/$/;"	m	struct:BtreePayload	file:
nKey	testdocs/sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
nKeyCol	testdocs/sqlite3.c	/^  int nKeyCol;              \/* Number of index columns w\/o the pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nKeyCol	testdocs/sqlite3.c	/^  u16 nKeyCol;             \/* Number of columns forming the key *\/$/;"	m	struct:Index	file:
nLSlot	testdocs/sqlite3.c	/^  u16 nLSlot;           \/* Number of slots allocated for aLTerm[] *\/$/;"	m	struct:WhereLoop	file:
nLTerm	testdocs/sqlite3.c	/^  u16 nLTerm;           \/* Number of entries in aLTerm[] *\/$/;"	m	struct:WhereLoop	file:
nLabel	testdocs/sqlite3.c	/^  int nLabel;          \/* Number of labels used *\/$/;"	m	struct:Parse	file:
nLastOvfl	testdocs/sqlite3.c	/^  int nLastOvfl;                  \/* Bytes of payload on final overflow page *\/$/;"	m	struct:StatCell	file:
nLeTerm	testdocs/sqlite3.c	/^  int nLeTerm;                    \/* Size of zLeTerm in bytes *\/$/;"	m	struct:Fts5VocabCursor	file:
nLeafAdd	testdocs/sqlite3.c	/^  u32 nLeafAdd;                   \/* Number of leaf blocks added this trans *\/$/;"	m	struct:Fts3Table	file:
nLeafData	testdocs/sqlite3.c	/^  i64 nLeafData;                  \/* Number of bytes of leaf data written *\/$/;"	m	struct:SegmentWriter	file:
nLeafData	testdocs/sqlite3.c	/^  sqlite3_int64 nLeafData;        \/* Bytes of leaf page data so far *\/$/;"	m	struct:IncrmergeWriter	file:
nLeafEst	testdocs/sqlite3.c	/^  int nLeafEst;                   \/* Space allocated for leaf blocks *\/$/;"	m	struct:IncrmergeWriter	file:
nLeafWritten	testdocs/sqlite3.c	/^  int nLeafWritten;               \/* Number of leaf pages written *\/$/;"	m	struct:Fts5SegWriter	file:
nLevel	testdocs/sqlite3.c	/^  int nLevel;                     \/* Number of levels in this index *\/$/;"	m	struct:Fts5Structure	file:
nLevel	testdocs/sqlite3.c	/^  u8 nLevel;                \/* Number of nested loop *\/$/;"	m	struct:WhereInfo	file:
nList	testdocs/sqlite3.c	/^  int nList;                     \/* Length of position list *\/$/;"	m	struct:Fts3Doclist	file:
nList	testdocs/sqlite3.c	/^  int nList;$/;"	m	struct:TokenDoclist	file:
nLocal	testdocs/sqlite3.c	/^  int nLocal;                     \/* Bytes of local payload *\/$/;"	m	struct:StatCell	file:
nLocal	testdocs/sqlite3.c	/^  u16 nLocal;    \/* Amount of payload held locally, not on overflow *\/$/;"	m	struct:CellInfo	file:
nLock	testdocs/sqlite3.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:
nLookaside	testdocs/sqlite3.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	file:
nLvl	testdocs/sqlite3.c	/^  int nLvl;$/;"	m	struct:Fts5DlidxIter	file:
nMalloc	testdocs/sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:
nMalloc	testdocs/sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:
nMax	testdocs/sqlite3.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:
nMaxArg	testdocs/sqlite3.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	file:
nMaxEqZero	testdocs/sqlite3.c	/^  int nMaxEqZero;           \/* Max leading 0 in anEq[] for any a[] entry *\/$/;"	m	struct:Stat4Accum	file:
nMaxPage	testdocs/sqlite3.c	/^  unsigned int nMaxPage;         \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMaxPendingData	testdocs/sqlite3.c	/^  int nMaxPendingData;            \/* Max pending data before flush to disk *\/$/;"	m	struct:Fts3Table	file:
nMaxSorterMmap	testdocs/sqlite3.c	/^  int nMaxSorterMmap;           \/* Maximum size of regions mapped by sorter *\/$/;"	m	struct:sqlite3	file:
nMem	testdocs/sqlite3.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	file:
nMem	testdocs/sqlite3.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	file:
nMem	testdocs/sqlite3.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	file:
nMem	testdocs/sqlite3.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	file:
nMem	testdocs/sqlite3.c	/^  u16 nMem;               \/* Number of aMem[] value.  Might be zero *\/$/;"	m	struct:BtreePayload	file:
nMemory	testdocs/sqlite3.c	/^  int nMemory;                    \/* Size of list.aMemory allocation in bytes *\/$/;"	m	struct:VdbeSorter	file:
nMerge	testdocs/sqlite3.c	/^  int nMerge;                     \/* Number of segments in incr-merge *\/$/;"	m	struct:Fts5StructureLevel	file:
nMin	testdocs/sqlite3.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:
nMinPage	testdocs/sqlite3.c	/^  unsigned int nMinPage;         \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMmapOut	testdocs/sqlite3.c	/^  int nMmapOut;               \/* Number of mmap pages currently outstanding *\/$/;"	m	struct:Pager	file:
nModuleArg	testdocs/sqlite3.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	file:
nMxPayload	testdocs/sqlite3.c	/^  int nMxPayload;                 \/* Largest payload of any cell on this page *\/$/;"	m	struct:StatPage	file:
nMxPayload	testdocs/sqlite3.c	/^  int nMxPayload;                 \/* Value of 'mx_payload' column *\/$/;"	m	struct:StatCursor	file:
nName	testdocs/sqlite3.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:
nName	testdocs/sqlite3.c	/^  u8 nName;           \/* Length of th name *\/$/;"	m	struct:__anon19	file:
nNear	testdocs/sqlite3.c	/^  int nNear;                      \/* NEAR parameter *\/$/;"	m	struct:Fts5ExprNearset	file:
nNear	testdocs/sqlite3.c	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr	file:
nNeeded	testdocs/sqlite3.c	/^  int nNeeded;         \/* Total bytes that could not be allocated *\/$/;"	m	struct:ReusableSpace	file:
nNest	testdocs/sqlite3.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:
nNode	testdocs/sqlite3.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
nNode	testdocs/sqlite3.c	/^  int nNode;$/;"	m	struct:NodeReader	file:
nNode	testdocs/sqlite3.c	/^  u32 nNode;         \/* Number of slots of aNode[] used *\/$/;"	m	struct:JsonParse	file:
nNodeSize	testdocs/sqlite3.c	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table	file:
nOBSat	testdocs/sqlite3.c	/^  i8 nOBSat;                \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:WhereInfo	file:
nOBSat	testdocs/sqlite3.c	/^  int nOBSat;           \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:SortCtx	file:
nOcc	testdocs/sqlite3.c	/^    sqlite3_int64 nOcc;           \/* 'occurrences' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nOffsetList	testdocs/sqlite3.c	/^  int nOffsetList;                \/* For descending pending seg-readers only *\/$/;"	m	struct:Fts3SegReader	file:
nOldOff	testdocs/sqlite3.c	/^  int nOldOff;$/;"	m	struct:SessionDiffCtx	file:
nOp	testdocs/sqlite3.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	file:
nOp	testdocs/sqlite3.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	file:
nOp	testdocs/sqlite3.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	file:
nOpAlloc	testdocs/sqlite3.c	/^  int nOpAlloc;        \/* Number of slots allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse	file:
nOrderBy	testdocs/sqlite3.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:
nOrig	testdocs/sqlite3.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:
nOther	testdocs/sqlite3.c	/^  int nOther;      \/* Number of references to columns in other FROM clauses *\/$/;"	m	struct:SrcCount	file:
nOut	testdocs/sqlite3.c	/^  LogEst nOut;          \/* Estimated number of output rows *\/$/;"	m	struct:WhereLoop	file:
nOut	testdocs/sqlite3.c	/^  LogEst nOut;        \/* Number of outputs for this subquery *\/$/;"	m	struct:WhereOrCost	file:
nOut	testdocs/sqlite3.c	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside	file:
nOutput	testdocs/sqlite3.c	/^  int nOutput;$/;"	m	struct:PorterRule	file:
nOverflow	testdocs/sqlite3.c	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage	file:
nOvfl	testdocs/sqlite3.c	/^  int nOvfl;                      \/* Entries in aOvfl[] *\/$/;"	m	struct:StatCell	file:
nOvfl	testdocs/sqlite3.c	/^  int nOvfl;                      \/* Number of overflow pages to load doclist *\/$/;"	m	struct:Fts3TokenAndCost	file:
nOvflAlloc	testdocs/sqlite3.c	/^  int nOvflAlloc;           \/* Allocated size of aOverflow[] array *\/$/;"	m	struct:BtCursor	file:
nPMA	testdocs/sqlite3.c	/^  int nPMA;                       \/* Number of PMAs currently in file *\/$/;"	m	struct:SortSubtask	file:
nPSample	testdocs/sqlite3.c	/^  tRowcnt nPSample;         \/* How often to do a periodic sample *\/$/;"	m	struct:Stat4Accum	file:
nPage	testdocs/sqlite3.c	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk	file:
nPage	testdocs/sqlite3.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
nPage	testdocs/sqlite3.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:
nPage	testdocs/sqlite3.c	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared	file:
nPage	testdocs/sqlite3.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:
nPagePerSector	testdocs/sqlite3.c	/^  int nPagePerSector;             \/* Pages per sector for pTargetFd *\/$/;"	m	struct:sqlite3rbu	file:
nPagecount	testdocs/sqlite3.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:
nParam	testdocs/sqlite3.c	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
nParam	testdocs/sqlite3.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
nParam	testdocs/sqlite3.c	/^  int nParam;                 \/* Number of parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:
nPayload	testdocs/sqlite3.c	/^  int nPayload;                   \/* Value of 'payload' column *\/$/;"	m	struct:StatCursor	file:
nPayload	testdocs/sqlite3.c	/^  u32 nPayload;  \/* Bytes of payload *\/$/;"	m	struct:CellInfo	file:
nPendingData	testdocs/sqlite3.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts3Table	file:
nPendingData	testdocs/sqlite3.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts5Index	file:
nPgsz	testdocs/sqlite3.c	/^  int nPgsz;                      \/* Page size for host database *\/$/;"	m	struct:Fts3Table	file:
nPhaseOneStep	testdocs/sqlite3.c	/^  i64 nPhaseOneStep;$/;"	m	struct:RbuState	file:
nPhaseOneStep	testdocs/sqlite3.c	/^  i64 nPhaseOneStep;$/;"	m	struct:sqlite3rbu	file:
nPhrase	testdocs/sqlite3.c	/^  int nPhrase;                    \/* Number of entries in aPhrase[] array *\/$/;"	m	struct:Fts5ExprNearset	file:
nPhrase	testdocs/sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:Fts3Cursor	file:
nPhrase	testdocs/sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:MatchInfo	file:
nPhrase	testdocs/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in expression *\/$/;"	m	struct:Fts5Expr	file:
nPhrase	testdocs/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:Fts5Bm25Data	file:
nPhrase	testdocs/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:
nPhrase	testdocs/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nPhrase	testdocs/sqlite3.c	/^  int nPhrase;                    \/* Size of apPhrase array *\/$/;"	m	struct:Fts5Parse	file:
nPoint	testdocs/sqlite3.c	/^  int nPoint;                       \/* Number of slots used in aPoint[] *\/$/;"	m	struct:RtreeCursor	file:
nPointAlloc	testdocs/sqlite3.c	/^  int nPointAlloc;                  \/* Number of slots allocated for aPoint[] *\/$/;"	m	struct:RtreeCursor	file:
nPool	testdocs/sqlite3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:
nPopulate	testdocs/sqlite3.c	/^  int nPopulate;                  \/* If >0, bytes of buffer aNode[] loaded *\/$/;"	m	struct:Fts3SegReader	file:
nPos	testdocs/sqlite3.c	/^  int nPos;                       \/* Number of bytes in current position list *\/$/;"	m	struct:Fts5SegIter	file:
nPoslist	testdocs/sqlite3.c	/^  int nPoslist;$/;"	m	struct:Fts5DoclistIter	file:
nPragCName	testdocs/sqlite3.c	/^  u8 nPragCName;           \/* Num of col names. 0 means use pragma name *\/$/;"	m	struct:PragmaName	file:
nPrefix	testdocs/sqlite3.c	/^    int nPrefix;                  \/* Prefix length (0 for main terms index) *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
nPrefix	testdocs/sqlite3.c	/^  int nPrefix;                    \/* Number of prefix indexes *\/$/;"	m	struct:Fts5Config	file:
nProgress	testdocs/sqlite3.c	/^  i64 nProgress;$/;"	m	struct:RbuState	file:
nProgress	testdocs/sqlite3.c	/^  int nProgress;                  \/* Rows processed for all objects *\/$/;"	m	struct:sqlite3rbu	file:
nProgressOps	testdocs/sqlite3.c	/^  unsigned nProgressOps;        \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	file:
nQueryLoop	testdocs/sqlite3.c	/^  u32 nQueryLoop;      \/* Est number of iterations of a query (10*log2(N)) *\/$/;"	m	struct:Parse	file:
nRangeReg	testdocs/sqlite3.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	file:
nRankArg	testdocs/sqlite3.c	/^  int nRankArg;                   \/* Number of trailing arguments for rank() *\/$/;"	m	struct:Fts5Cursor	file:
nRbu	testdocs/sqlite3.c	/^  int nRbu;                       \/* Number of RBU VFS in the stack *\/$/;"	m	struct:sqlite3rbu	file:
nRead	testdocs/sqlite3.c	/^  int nRead;                      \/* Total number of blocks read *\/$/;"	m	struct:Fts5Index	file:
nRead	testdocs/sqlite3.c	/^  int nRead;                  \/* Database pages read *\/$/;"	m	struct:Pager	file:
nReaders	testdocs/sqlite3.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:
nRec	testdocs/sqlite3.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:
nRecValid	testdocs/sqlite3.c	/^  int nRecValid;            \/* Number of valid fields currently in pRec *\/$/;"	m	struct:WhereLoopBuilder	file:
nRecord	testdocs/sqlite3.c	/^  int nRecord;                    \/* Number of bytes in buffer aRecord[] *\/$/;"	m	struct:SessionChange	file:
nRecyclable	testdocs/sqlite3.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:
nRef	testdocs/sqlite3.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	file:
nRef	testdocs/sqlite3.c	/^  int nRef;                       \/* Number of open cursors *\/$/;"	m	struct:sqlite3_vtab	file:
nRef	testdocs/sqlite3.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:
nRef	testdocs/sqlite3.c	/^  int nRef;                       \/* Object reference count *\/$/;"	m	struct:Fts5Structure	file:
nRef	testdocs/sqlite3.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:
nRef	testdocs/sqlite3.c	/^  int nRef;                   \/* Number of references to this node *\/$/;"	m	struct:RtreeNode	file:
nRef	testdocs/sqlite3.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
nRef	testdocs/sqlite3.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
nRef	testdocs/sqlite3.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	file:
nRef	testdocs/sqlite3.c	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared	file:
nRef	testdocs/sqlite3.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	file:
nRef	testdocs/sqlite3.c	/^  int nRef;$/;"	m	struct:FuncDestructor	file:
nRef	testdocs/sqlite3.c	/^  u32 nRef;           \/* Number of references to this KeyInfo object *\/$/;"	m	struct:KeyInfo	file:
nRef	testdocs/sqlite3.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	testdocs/sqlite3.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:
nRefInitMutex	testdocs/sqlite3.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	file:
nRefSum	testdocs/sqlite3.c	/^  int nRefSum;                        \/* Sum of ref counts over all pages *\/$/;"	m	struct:PCache	file:
nRegion	testdocs/sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:
nRegion	testdocs/sqlite3.c	/^  u16 nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:
nRemaining	testdocs/sqlite3.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:
nResColumn	testdocs/sqlite3.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	file:
nReserve	testdocs/sqlite3.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:
nReserve	testdocs/sqlite3.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:
nRow	testdocs/sqlite3.c	/^  LogEst nRow;          \/* Estimated number of rows generated by this path *\/$/;"	m	struct:WherePath	file:
nRow	testdocs/sqlite3.c	/^  int nRow;$/;"	m	struct:RbuState	file:
nRow	testdocs/sqlite3.c	/^  tRowcnt nRow;             \/* Number of rows in the entire table *\/$/;"	m	struct:Stat4Accum	file:
nRow	testdocs/sqlite3.c	/^  u32 nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:
nRowAvg	testdocs/sqlite3.c	/^  int nRowAvg;                    \/* Average size of database rows, in pages *\/$/;"	m	struct:Fts3Cursor	file:
nRowEst	testdocs/sqlite3.c	/^  i64 nRowEst;                \/* Estimated number of rows in this table *\/$/;"	m	struct:Rtree	file:
nRowEst0	testdocs/sqlite3.c	/^  tRowcnt nRowEst0;        \/* Non-logarithmic number of rows in the index *\/$/;"	m	struct:Index	file:
nRowLogEst	testdocs/sqlite3.c	/^  LogEst nRowLogEst;   \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	file:
nRowOut	testdocs/sqlite3.c	/^  LogEst nRowOut;           \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo	file:
nRowid	testdocs/sqlite3.c	/^  u32 nRowid;                     \/* Sizeof aRowid[] *\/$/;"	m	struct:Stat4Sample	file:
nRowidOffset	testdocs/sqlite3.c	/^  int nRowidOffset;               \/* Allocated size of aRowidOffset[] array *\/$/;"	m	struct:Fts5SegIter	file:
nSample	testdocs/sqlite3.c	/^  int nSample;              \/* Current number of samples *\/$/;"	m	struct:Stat4Accum	file:
nSample	testdocs/sqlite3.c	/^  int nSample;             \/* Number of elements in aSample[] *\/$/;"	m	struct:Index	file:
nSampleCol	testdocs/sqlite3.c	/^  int nSampleCol;          \/* Size of IndexSample.anEq[] and so on *\/$/;"	m	struct:Index	file:
nSavepoint	testdocs/sqlite3.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	file:
nSavepoint	testdocs/sqlite3.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:
nScan	testdocs/sqlite3.c	/^  int nScan;              \/* Entries in aScan[] *\/$/;"	m	struct:Vdbe	file:
nScratch	testdocs/sqlite3.c	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config	file:
nScratchFree	testdocs/sqlite3.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:
nSdst	testdocs/sqlite3.c	/^  int nSdst;           \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	file:
nSeg	testdocs/sqlite3.c	/^  int nSeg;                       \/* Size of aSeg[] array *\/$/;"	m	struct:Fts5Iter	file:
nSeg	testdocs/sqlite3.c	/^  int nSeg;                       \/* Total number of segments on level *\/$/;"	m	struct:Fts5StructureLevel	file:
nSegment	testdocs/sqlite3.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:
nSegment	testdocs/sqlite3.c	/^  int nSegment;                   \/* Size of apSegment array *\/$/;"	m	struct:Fts3MultiSegReader	file:
nSegment	testdocs/sqlite3.c	/^  int nSegment;                   \/* Total segments in this structure *\/$/;"	m	struct:Fts5Structure	file:
nSelect	testdocs/sqlite3.c	/^  int nSelect;         \/* Number of SELECT statements seen *\/$/;"	m	struct:Parse	file:
nSelectIndent	testdocs/sqlite3.c	/^  int nSelectIndent;   \/* How far to indent SELECTTRACE() output *\/$/;"	m	struct:Parse	file:
nSelectRow	testdocs/sqlite3.c	/^  LogEst nSelectRow;     \/* Estimated number of result rows *\/$/;"	m	struct:Select	file:
nSet	testdocs/sqlite3.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:
nShared	testdocs/sqlite3.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:
nShm	testdocs/sqlite3.c	/^  int nShm;                       \/* Number of entries in apShm[] array *\/$/;"	m	struct:rbu_file	file:
nSize	testdocs/sqlite3.c	/^  int nSize;                      \/* Bytes of data currently in memory *\/$/;"	m	struct:MemJournal	file:
nSize	testdocs/sqlite3.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:
nSize	testdocs/sqlite3.c	/^  int nSize;$/;"	m	struct:Fts5DoclistIter	file:
nSize	testdocs/sqlite3.c	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo	file:
nSkip	testdocs/sqlite3.c	/^  u16 nSkip;            \/* Number of NULL aLTerm[] entries *\/$/;"	m	struct:WhereLoop	file:
nSlot	testdocs/sqlite3.c	/^  int nSlot;                      \/* Size of aSlot[] array *\/$/;"	m	struct:Fts5Hash	file:
nSlot	testdocs/sqlite3.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nSlot	testdocs/sqlite3.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:
nSnippet	testdocs/sqlite3.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:
nSortingColumn	testdocs/sqlite3.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	file:
nSpace	testdocs/sqlite3.c	/^  int nSpace;$/;"	m	struct:Fts5Buffer	file:
nSpace	testdocs/sqlite3.c	/^  int nSpace;$/;"	m	struct:PendingList	file:
nSpill	testdocs/sqlite3.c	/^  int nSpill;                     \/* Bytes of data before flushing *\/$/;"	m	struct:MemJournal	file:
nSqlExec	testdocs/sqlite3.c	/^  u8 nSqlExec;                  \/* Number of pending OP_SqlExec opcodes *\/$/;"	m	struct:sqlite3	file:
nSrc	testdocs/sqlite3.c	/^  int nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	file:
nStat	testdocs/sqlite3.c	/^  int nStat;                      \/* Size of aStat[] array *\/$/;"	m	struct:Fts3auxCursor	file:
nStatement	testdocs/sqlite3.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	file:
nStep	testdocs/sqlite3.c	/^  int nStep;                      \/* Rows processed for current object *\/$/;"	m	struct:sqlite3rbu	file:
nStmtDefCons	testdocs/sqlite3.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStmtDefImmCons	testdocs/sqlite3.c	/^  i64 nStmtDefImmCons;    \/* Number of def. imm constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStmtSpill	testdocs/sqlite3.c	/^  int nStmtSpill;                   \/* Stmt-journal spill-to-disk threshold *\/$/;"	m	struct:Sqlite3Config	file:
nStop	testdocs/sqlite3.c	/^  int nStop;                      \/* Byte-length of string zStop *\/$/;"	m	struct:Fts3auxCursor	file:
nSub	testdocs/sqlite3.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:
nSubRec	testdocs/sqlite3.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:
nSuffix	testdocs/sqlite3.c	/^  int nSuffix;$/;"	m	struct:PorterRule	file:
nTab	testdocs/sqlite3.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	file:
nTabRef	testdocs/sqlite3.c	/^  u32 nTabRef;         \/* Number of pointers to this Table *\/$/;"	m	struct:Table	file:
nTableLock	testdocs/sqlite3.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	file:
nTask	testdocs/sqlite3.c	/^  u8 nTask;                       \/* Size of aTask[] array *\/$/;"	m	struct:VdbeSorter	file:
nTblCol	testdocs/sqlite3.c	/^  int nTblCol;                    \/* Size of azTblCol[] array *\/$/;"	m	struct:RbuObjIter	file:
nTempReg	testdocs/sqlite3.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	file:
nTerm	testdocs/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:
nTerm	testdocs/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:
nTerm	testdocs/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:
nTerm	testdocs/sqlite3.c	/^  int nTerm;                      \/* Number of entries in aTerm[] *\/$/;"	m	struct:Fts5ExprPhrase	file:
nTerm	testdocs/sqlite3.c	/^  int nTerm;                      \/* Size of phrase in terms *\/$/;"	m	struct:Fts5MatchPhrase	file:
nTerm	testdocs/sqlite3.c	/^  int nTerm;                      \/* Size of zTerm in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nTerm	testdocs/sqlite3.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:
nTerm	testdocs/sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts3SegFilter	file:
nTerm	testdocs/sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts5TermsetEntry	file:
nTermAlloc	testdocs/sqlite3.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:
nThis	testdocs/sqlite3.c	/^  int nThis;       \/* Number of references to columns in pSrcList *\/$/;"	m	struct:SrcCount	file:
nTitle	testdocs/sqlite3.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon20	file:
nTitle	testdocs/sqlite3.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:
nToken	testdocs/sqlite3.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:
nToken	testdocs/sqlite3.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nToken	testdocs/sqlite3.c	/^  int nToken;                     \/* Size of zToken in bytes *\/$/;"	m	struct:Fts3tokCursor	file:
nToken	testdocs/sqlite3.c	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
nTokenAllocated	testdocs/sqlite3.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nTop	testdocs/sqlite3.c	/^      u16 nTop;              \/* Size of TOP vector *\/$/;"	m	struct:WhereLoop::__anon29::__anon30	file:
nTotalChange	testdocs/sqlite3.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	file:
nTotalRow	testdocs/sqlite3.c	/^  i64 nTotalRow;                  \/* Total number of rows in FTS table *\/$/;"	m	struct:Fts5Storage	file:
nTransaction	testdocs/sqlite3.c	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared	file:
nTree	testdocs/sqlite3.c	/^  int nTree;                 \/* Used size of aTree\/aReadr (power of 2) *\/$/;"	m	struct:MergeEngine	file:
nUnused	testdocs/sqlite3.c	/^  int nUnused;                    \/* Number of unused bytes on page *\/$/;"	m	struct:StatPage	file:
nUnused	testdocs/sqlite3.c	/^  int nUnused;                    \/* Value of 'unused' column *\/$/;"	m	struct:StatCursor	file:
nUsed	testdocs/sqlite3.c	/^  int nUsed;               \/* Number of arguments used so far *\/$/;"	m	struct:PrintfArguments	file:
nUsed	testdocs/sqlite3.c	/^  u64 nUsed;               \/* Bytes of zBuf[] currently used *\/$/;"	m	struct:JsonString	file:
nUsermerge	testdocs/sqlite3.c	/^  int nUsermerge;                 \/* 'usermerge' setting *\/$/;"	m	struct:Fts5Config	file:
nVDestroy	testdocs/sqlite3.c	/^  int nVDestroy;                \/* Number of active OP_VDestroy operations *\/$/;"	m	struct:sqlite3	file:
nVTrans	testdocs/sqlite3.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	file:
nVal	testdocs/sqlite3.c	/^  int nVal;                       \/* Size of the record in bytes *\/$/;"	m	struct:SorterRecord	file:
nVar	testdocs/sqlite3.c	/^  ynVar nVar;               \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	file:
nVar	testdocs/sqlite3.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	file:
nVdbeActive	testdocs/sqlite3.c	/^  int nVdbeActive;              \/* Number of VDBEs currently running *\/$/;"	m	struct:sqlite3	file:
nVdbeExec	testdocs/sqlite3.c	/^  int nVdbeExec;                \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	file:
nVdbeRead	testdocs/sqlite3.c	/^  int nVdbeRead;                \/* Number of active VDBEs that read or write *\/$/;"	m	struct:sqlite3	file:
nVdbeWrite	testdocs/sqlite3.c	/^  int nVdbeWrite;               \/* Number of active VDBEs that read and write *\/$/;"	m	struct:sqlite3	file:
nVtabLock	testdocs/sqlite3.c	/^  int nVtabLock;            \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	file:
nWiData	testdocs/sqlite3.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:
nWork	testdocs/sqlite3.c	/^  int nWork;                      \/* Number of leaf pages flushed *\/$/;"	m	struct:IncrmergeWriter	file:
nWorkUnit	testdocs/sqlite3.c	/^  int nWorkUnit;                  \/* Leaf pages in a "unit" of work *\/$/;"	m	struct:Fts5Index	file:
nWorker	testdocs/sqlite3.c	/^# define nWorker /;"	d	file:
nWorker	testdocs/sqlite3.c	/^#undef nWorker /;"	d	file:
nWriteCounter	testdocs/sqlite3.c	/^  u64 nWriteCounter;              \/* Total leaves written to level 0 *\/$/;"	m	struct:Fts5Structure	file:
nXField	testdocs/sqlite3.c	/^  u16 nXField;        \/* Number of columns beyond the key columns *\/$/;"	m	struct:KeyInfo	file:
nXor	testdocs/sqlite3.c	/^  int nXor;           \/* Number of XOR operations done *\/$/;"	m	struct:EntropyGatherer	file:
nZero	testdocs/sqlite3.c	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:sqlite3_value::MemValue	file:
nZero	testdocs/sqlite3.c	/^  int nZero;              \/* Extra zero data appended after pData,nData *\/$/;"	m	struct:BtreePayload	file:
na	testdocs/sqlite3.c	/^  int na;             \/* Size of a[] in bytes *\/$/;"	m	struct:EntropyGatherer	file:
nameInUsingClause	testdocs/sqlite3.c	/^static int nameInUsingClause(IdList *pUsing, const char *zCol){$/;"	f	file:
ncFlags	testdocs/sqlite3.c	/^  u16 ncFlags;         \/* Zero or more NC_* flags defined below *\/$/;"	m	struct:NameContext	file:
nearlyFull	testdocs/sqlite3.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:
needFree	testdocs/sqlite3.c	/^      u8 needFree;           \/* True if sqlite3_free(idxStr) is needed *\/$/;"	m	struct:WhereLoop::__anon29::__anon31	file:
needToFreeIdxStr	testdocs/sqlite3.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	file:
nelem	stdc.h	/^    #define nelem(/;"	d
nested	testdocs/sqlite3.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	file:
neverCorrupt	testdocs/sqlite3.c	/^  int neverCorrupt;                 \/* Database is always well-formed *\/$/;"	m	struct:Sqlite3Config	file:
newDatabase	testdocs/sqlite3.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:
newRowid	testdocs/sqlite3.c	/^static int newRowid(Rtree *pRtree, i64 *piRowid){$/;"	f	file:
newTnum	testdocs/sqlite3.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
newmask	testdocs/sqlite3.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	file:
next	edit.h	/^    struct Log* next;   \/* pointer to next operation in the stack *\/$/;"	m	struct:Log	typeref:struct:Log::Log
next	testdocs/sqlite3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon21::__anon23	file:
next	testdocs/sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
next	testdocs/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
next	testdocs/sqlite3.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:
nextAutovac	testdocs/sqlite3.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	file:
nextPagesize	testdocs/sqlite3.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	file:
nextShmId	testdocs/sqlite3.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:
nextShmId	testdocs/sqlite3.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:
next_size	buf.c	/^static size_t next_size(size_t curr) {$/;"	f	file:
next_stmt	testdocs/sqlite3.c	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
nextrune	buf.c	/^static Rune nextrune(Buf* buf, size_t off, int move, bool (*testfn)(Rune)) {$/;"	f	file:
nfsUnlock	testdocs/sqlite3.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
nn	testdocs/sqlite3.c	/^  int nn;                         \/* Size of record in bytes *\/$/;"	m	struct:Fts5Data	file:
noCase	testdocs/sqlite3.c	/^  u8 noCase;            \/* true to ignore case differences *\/$/;"	m	struct:compareInfo	file:
noLock	testdocs/sqlite3.c	/^  u8 noLock;                  \/* Do not lock (except in WAL mode) *\/$/;"	m	struct:Pager	file:
noSkipScan	testdocs/sqlite3.c	/^  unsigned noSkipScan:1;   \/* Do not try to use skip-scan if true *\/$/;"	m	struct:Index	file:
noSync	testdocs/sqlite3.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:
nocaseCollatingFunc	testdocs/sqlite3.c	/^static int nocaseCollatingFunc($/;"	f	file:
nodeAcquire	testdocs/sqlite3.c	/^static int nodeAcquire($/;"	f	file:
nodeBlobReset	testdocs/sqlite3.c	/^static void nodeBlobReset(Rtree *pRtree){$/;"	f	file:
nodeDeleteCell	testdocs/sqlite3.c	/^static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){$/;"	f	file:
nodeGetCell	testdocs/sqlite3.c	/^static void nodeGetCell($/;"	f	file:
nodeGetCoord	testdocs/sqlite3.c	/^static void nodeGetCoord($/;"	f	file:
nodeGetRowid	testdocs/sqlite3.c	/^static i64 nodeGetRowid($/;"	f	file:
nodeHash	testdocs/sqlite3.c	/^static int nodeHash(i64 iNode){$/;"	f	file:
nodeHashDelete	testdocs/sqlite3.c	/^static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashInsert	testdocs/sqlite3.c	/^static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashLookup	testdocs/sqlite3.c	/^static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){$/;"	f	file:
nodeInsertCell	testdocs/sqlite3.c	/^static int nodeInsertCell($/;"	f	file:
nodeNew	testdocs/sqlite3.c	/^static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){$/;"	f	file:
nodeOverwriteCell	testdocs/sqlite3.c	/^static void nodeOverwriteCell($/;"	f	file:
nodeParentIndex	testdocs/sqlite3.c	/^static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){$/;"	f	file:
nodeReaderInit	testdocs/sqlite3.c	/^static int nodeReaderInit(NodeReader *p, const char *aNode, int nNode){$/;"	f	file:
nodeReaderNext	testdocs/sqlite3.c	/^static int nodeReaderNext(NodeReader *p){$/;"	f	file:
nodeReaderRelease	testdocs/sqlite3.c	/^static void nodeReaderRelease(NodeReader *p){$/;"	f	file:
nodeReference	testdocs/sqlite3.c	/^static void nodeReference(RtreeNode *p){$/;"	f	file:
nodeRelease	testdocs/sqlite3.c	/^static int nodeRelease(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeRowidIndex	testdocs/sqlite3.c	/^static int nodeRowidIndex($/;"	f	file:
nodeWrite	testdocs/sqlite3.c	/^static int nodeWrite(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeZero	testdocs/sqlite3.c	/^static void nodeZero(Rtree *pRtree, RtreeNode *p){$/;"	f	file:
nolockCheckReservedLock	testdocs/sqlite3.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:
nolockClose	testdocs/sqlite3.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:
nolockLock	testdocs/sqlite3.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nolockUnlock	testdocs/sqlite3.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
noopFunc	testdocs/sqlite3.c	/^#define noopFunc /;"	d	file:
noopMutexAlloc	testdocs/sqlite3.c	/^static sqlite3_mutex *noopMutexAlloc(int id){$/;"	f	file:
noopMutexEnd	testdocs/sqlite3.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexEnter	testdocs/sqlite3.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexFree	testdocs/sqlite3.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexInit	testdocs/sqlite3.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexLeave	testdocs/sqlite3.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexTry	testdocs/sqlite3.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:
notIndexed	testdocs/sqlite3.c	/^      unsigned notIndexed :1;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item::__anon14	file:
notNull	testdocs/sqlite3.c	/^  u8 notNull;      \/* An OE_ code for handling a NOT NULL constraint *\/$/;"	m	struct:Column	file:
notReady	testdocs/sqlite3.c	/^  Bitmask notReady;          \/* FROM entries not usable at this level *\/$/;"	m	struct:WhereLevel	file:
notUsed0	testdocs/sqlite3.c	/^  u32 notUsed0;                   \/* Available for future enhancements *\/$/;"	m	struct:WalCkptInfo	file:
notUsed1	testdocs/sqlite3.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon8	file:
notValid	testdocs/sqlite3.c	/^static void notValid($/;"	f	file:
nowValue	testdocs/sqlite3.c	/^  sqlite3StatValueType nowValue[10];  \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:
nrhs	testdocs/sqlite3.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:__anon35	file:
nrhs	testdocs/sqlite3.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:__anon39	file:
nullRow	testdocs/sqlite3.c	/^  u8 nullRow;             \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	file:
nullifFunc	testdocs/sqlite3.c	/^static void nullifFunc($/;"	f	file:
numberOfCachePages	testdocs/sqlite3.c	/^static int numberOfCachePages(PCache *p){$/;"	f	file:
numericType	testdocs/sqlite3.c	/^static u16 numericType(Mem *pMem){$/;"	f	file:
objiter	testdocs/sqlite3.c	/^  RbuObjIter objiter;             \/* Iterator for skipping through tbl\/idx *\/$/;"	m	struct:sqlite3rbu	file:
off	edit.h	/^            size_t off;  \/* offset in the file where the deletion occurred *\/$/;"	m	struct:Log::__anon2::__anon4
offset	testdocs/sqlite3.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
offsetof	testdocs/sqlite3.c	/^#define offsetof(/;"	d	file:
okConstFactor	testdocs/sqlite3.c	/^  u8 okConstFactor;    \/* OK to factor out constants *\/$/;"	m	struct:Parse	file:
oldLockingContext	testdocs/sqlite3.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:
oldmask	testdocs/sqlite3.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	file:
omit	testdocs/sqlite3.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
omitMask	testdocs/sqlite3.c	/^      u16 omitMask;          \/* Terms that may be omitted *\/$/;"	m	struct:WhereLoop::__anon29::__anon31	file:
onError	testdocs/sqlite3.c	/^  u8 onError;              \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	file:
onErrorText	testdocs/sqlite3.c	/^static const char *onErrorText(int onError){$/;"	f	file:
onerror	testbuf.c	/^static void onerror(char* msg) {$/;"	f	file:
oom	testdocs/sqlite3.c	/^  u8 oom;            \/* Set to true if out of memory *\/$/;"	m	struct:JsonParse	file:
op	testdocs/sqlite3.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
op	testdocs/sqlite3.c	/^  int op;                         \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:
op	testdocs/sqlite3.c	/^  int op;                         \/* Current operation *\/$/;"	m	struct:sqlite3_changeset_iter	file:
op	testdocs/sqlite3.c	/^  int op;                         \/* One of SQLITE_INSERT, UPDATE, DELETE *\/$/;"	m	struct:PreUpdate	file:
op	testdocs/sqlite3.c	/^  int op;                         \/* One of UPDATE, DELETE, INSERT *\/$/;"	m	struct:SessionChange	file:
op	testdocs/sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
op	testdocs/sqlite3.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:
op	testdocs/sqlite3.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	file:
op	testdocs/sqlite3.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	file:
op	testdocs/sqlite3.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	file:
op	testdocs/sqlite3.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	file:
op2	testdocs/sqlite3.c	/^  u8 op2;                \/* TK_REGISTER: original value of Expr.op$/;"	m	struct:Expr	file:
opIterNext	testdocs/sqlite3.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:
opMask	testdocs/sqlite3.c	/^  u32 opMask;                \/* Acceptable operators *\/$/;"	m	struct:WhereScan	file:
opPrecedence	testdocs/sqlite3.c	/^static int opPrecedence(Fts3Expr *p){$/;"	f	file:
opcode	testdocs/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	file:
opcode	testdocs/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	file:
open	testdocs/sqlite3.c	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
open16	testdocs/sqlite3.c	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
openDatabase	testdocs/sqlite3.c	/^static int openDatabase($/;"	f	file:
openDirectory	testdocs/sqlite3.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:
openFlags	testdocs/sqlite3.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:
openFlags	testdocs/sqlite3.c	/^  int openFlags;                  \/* Flags this file was opened with *\/$/;"	m	struct:rbu_file	file:
openFlags	testdocs/sqlite3.c	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared	file:
openFlags	testdocs/sqlite3.c	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	file:
openRbuHandle	testdocs/sqlite3.c	/^static sqlite3rbu *openRbuHandle($/;"	f	file:
openStatTable	testdocs/sqlite3.c	/^static void openStatTable($/;"	f	file:
openSubJournal	testdocs/sqlite3.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:
open_v2	testdocs/sqlite3.c	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	file:
operatorMask	testdocs/sqlite3.c	/^static u16 operatorMask(int op){$/;"	f	file:
optimalReserve	testdocs/sqlite3.c	/^  u8 optimalReserve;    \/* Desired amount of reserved space per page *\/$/;"	m	struct:BtShared	file:
orconf	testdocs/sqlite3.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	file:
orconf	testdocs/sqlite3.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	file:
orderByConsumed	testdocs/sqlite3.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	file:
orphanTrigger	testdocs/sqlite3.c	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
os	testdocs/waf	/^import os, sys, inspect$/;"	i
osAccess	testdocs/sqlite3.c	/^#define osAccess /;"	d	file:
osAreFileApisANSI	testdocs/sqlite3.c	/^#  define osAreFileApisANSI(/;"	d	file:
osAreFileApisANSI	testdocs/sqlite3.c	/^#define osAreFileApisANSI /;"	d	file:
osCharLowerW	testdocs/sqlite3.c	/^#define osCharLowerW /;"	d	file:
osCharUpperW	testdocs/sqlite3.c	/^#define osCharUpperW /;"	d	file:
osClose	testdocs/sqlite3.c	/^#define osClose /;"	d	file:
osCloseHandle	testdocs/sqlite3.c	/^#define osCloseHandle /;"	d	file:
osCreateEventExW	testdocs/sqlite3.c	/^#define osCreateEventExW /;"	d	file:
osCreateFile2	testdocs/sqlite3.c	/^#define osCreateFile2 /;"	d	file:
osCreateFileA	testdocs/sqlite3.c	/^#define osCreateFileA /;"	d	file:
osCreateFileMappingA	testdocs/sqlite3.c	/^#define osCreateFileMappingA /;"	d	file:
osCreateFileMappingFromApp	testdocs/sqlite3.c	/^#define osCreateFileMappingFromApp /;"	d	file:
osCreateFileMappingW	testdocs/sqlite3.c	/^#define osCreateFileMappingW /;"	d	file:
osCreateFileW	testdocs/sqlite3.c	/^#define osCreateFileW /;"	d	file:
osCreateMutexW	testdocs/sqlite3.c	/^#define osCreateMutexW /;"	d	file:
osDeleteFileA	testdocs/sqlite3.c	/^#define osDeleteFileA /;"	d	file:
osDeleteFileW	testdocs/sqlite3.c	/^#define osDeleteFileW /;"	d	file:
osFallocate	testdocs/sqlite3.c	/^#define osFallocate /;"	d	file:
osFchmod	testdocs/sqlite3.c	/^#define osFchmod /;"	d	file:
osFchown	testdocs/sqlite3.c	/^#define osFchown /;"	d	file:
osFcntl	testdocs/sqlite3.c	/^#define osFcntl /;"	d	file:
osFcntl	testdocs/sqlite3.c	/^#undef osFcntl$/;"	d	file:
osFileTimeToLocalFileTime	testdocs/sqlite3.c	/^#define osFileTimeToLocalFileTime /;"	d	file:
osFileTimeToSystemTime	testdocs/sqlite3.c	/^#define osFileTimeToSystemTime /;"	d	file:
osFlushFileBuffers	testdocs/sqlite3.c	/^#define osFlushFileBuffers /;"	d	file:
osFlushViewOfFile	testdocs/sqlite3.c	/^#define osFlushViewOfFile /;"	d	file:
osFormatMessageA	testdocs/sqlite3.c	/^#define osFormatMessageA /;"	d	file:
osFormatMessageW	testdocs/sqlite3.c	/^#define osFormatMessageW /;"	d	file:
osFreeLibrary	testdocs/sqlite3.c	/^#define osFreeLibrary /;"	d	file:
osFstat	testdocs/sqlite3.c	/^#define osFstat(/;"	d	file:
osFtruncate	testdocs/sqlite3.c	/^#define osFtruncate /;"	d	file:
osGetCurrentProcessId	testdocs/sqlite3.c	/^#define osGetCurrentProcessId /;"	d	file:
osGetDiskFreeSpaceA	testdocs/sqlite3.c	/^#define osGetDiskFreeSpaceA /;"	d	file:
osGetDiskFreeSpaceW	testdocs/sqlite3.c	/^#define osGetDiskFreeSpaceW /;"	d	file:
osGetFileAttributesA	testdocs/sqlite3.c	/^#define osGetFileAttributesA /;"	d	file:
osGetFileAttributesExW	testdocs/sqlite3.c	/^#define osGetFileAttributesExW /;"	d	file:
osGetFileAttributesW	testdocs/sqlite3.c	/^#define osGetFileAttributesW /;"	d	file:
osGetFileInformationByHandleEx	testdocs/sqlite3.c	/^#define osGetFileInformationByHandleEx /;"	d	file:
osGetFileSize	testdocs/sqlite3.c	/^#define osGetFileSize /;"	d	file:
osGetFullPathNameA	testdocs/sqlite3.c	/^#define osGetFullPathNameA /;"	d	file:
osGetFullPathNameW	testdocs/sqlite3.c	/^#define osGetFullPathNameW /;"	d	file:
osGetLastError	testdocs/sqlite3.c	/^#define osGetLastError /;"	d	file:
osGetNativeSystemInfo	testdocs/sqlite3.c	/^#define osGetNativeSystemInfo /;"	d	file:
osGetProcAddressA	testdocs/sqlite3.c	/^#define osGetProcAddressA /;"	d	file:
osGetProcessHeap	testdocs/sqlite3.c	/^#define osGetProcessHeap /;"	d	file:
osGetSystemInfo	testdocs/sqlite3.c	/^#define osGetSystemInfo /;"	d	file:
osGetSystemTime	testdocs/sqlite3.c	/^#define osGetSystemTime /;"	d	file:
osGetSystemTimeAsFileTime	testdocs/sqlite3.c	/^#define osGetSystemTimeAsFileTime /;"	d	file:
osGetTempPathA	testdocs/sqlite3.c	/^#define osGetTempPathA /;"	d	file:
osGetTempPathW	testdocs/sqlite3.c	/^#define osGetTempPathW /;"	d	file:
osGetTickCount	testdocs/sqlite3.c	/^#define osGetTickCount /;"	d	file:
osGetTickCount64	testdocs/sqlite3.c	/^#define osGetTickCount64 /;"	d	file:
osGetVersionExA	testdocs/sqlite3.c	/^#define osGetVersionExA /;"	d	file:
osGetVersionExW	testdocs/sqlite3.c	/^#define osGetVersionExW /;"	d	file:
osGetcwd	testdocs/sqlite3.c	/^#define osGetcwd /;"	d	file:
osGeteuid	testdocs/sqlite3.c	/^#define osGeteuid /;"	d	file:
osGetpagesize	testdocs/sqlite3.c	/^#define osGetpagesize /;"	d	file:
osGetpid	testdocs/sqlite3.c	/^#define osGetpid(/;"	d	file:
osHeapAlloc	testdocs/sqlite3.c	/^#define osHeapAlloc /;"	d	file:
osHeapCompact	testdocs/sqlite3.c	/^#define osHeapCompact /;"	d	file:
osHeapCreate	testdocs/sqlite3.c	/^#define osHeapCreate /;"	d	file:
osHeapDestroy	testdocs/sqlite3.c	/^#define osHeapDestroy /;"	d	file:
osHeapFree	testdocs/sqlite3.c	/^#define osHeapFree /;"	d	file:
osHeapReAlloc	testdocs/sqlite3.c	/^#define osHeapReAlloc /;"	d	file:
osHeapSize	testdocs/sqlite3.c	/^#define osHeapSize /;"	d	file:
osHeapValidate	testdocs/sqlite3.c	/^#define osHeapValidate /;"	d	file:
osInterlockedCompareExchange	testdocs/sqlite3.c	/^#define osInterlockedCompareExchange /;"	d	file:
osIsNT	testdocs/sqlite3.c	/^# define osIsNT(/;"	d	file:
osLoadLibraryA	testdocs/sqlite3.c	/^#define osLoadLibraryA /;"	d	file:
osLoadLibraryW	testdocs/sqlite3.c	/^#define osLoadLibraryW /;"	d	file:
osLoadPackagedLibrary	testdocs/sqlite3.c	/^#define osLoadPackagedLibrary /;"	d	file:
osLocalFree	testdocs/sqlite3.c	/^#define osLocalFree /;"	d	file:
osLocaltime	testdocs/sqlite3.c	/^static int osLocaltime(time_t *t, struct tm *pTm){$/;"	f	file:
osLockFile	testdocs/sqlite3.c	/^#define osLockFile /;"	d	file:
osLockFileEx	testdocs/sqlite3.c	/^#define osLockFileEx /;"	d	file:
osLstat	testdocs/sqlite3.c	/^#define osLstat /;"	d	file:
osMapViewOfFile	testdocs/sqlite3.c	/^#define osMapViewOfFile /;"	d	file:
osMapViewOfFileFromApp	testdocs/sqlite3.c	/^#define osMapViewOfFileFromApp /;"	d	file:
osMkdir	testdocs/sqlite3.c	/^#define osMkdir /;"	d	file:
osMmap	testdocs/sqlite3.c	/^#define osMmap /;"	d	file:
osMremap	testdocs/sqlite3.c	/^#define osMremap /;"	d	file:
osMultiByteToWideChar	testdocs/sqlite3.c	/^#define osMultiByteToWideChar /;"	d	file:
osMunmap	testdocs/sqlite3.c	/^#define osMunmap /;"	d	file:
osOpen	testdocs/sqlite3.c	/^#define osOpen /;"	d	file:
osOpenDirectory	testdocs/sqlite3.c	/^#define osOpenDirectory /;"	d	file:
osOutputDebugStringA	testdocs/sqlite3.c	/^#define osOutputDebugStringA /;"	d	file:
osOutputDebugStringW	testdocs/sqlite3.c	/^#define osOutputDebugStringW /;"	d	file:
osPread	testdocs/sqlite3.c	/^#define osPread /;"	d	file:
osPread64	testdocs/sqlite3.c	/^#define osPread64 /;"	d	file:
osPwrite	testdocs/sqlite3.c	/^#define osPwrite /;"	d	file:
osPwrite64	testdocs/sqlite3.c	/^#define osPwrite64 /;"	d	file:
osQueryPerformanceCounter	testdocs/sqlite3.c	/^#define osQueryPerformanceCounter /;"	d	file:
osRead	testdocs/sqlite3.c	/^#define osRead /;"	d	file:
osReadFile	testdocs/sqlite3.c	/^#define osReadFile /;"	d	file:
osReadlink	testdocs/sqlite3.c	/^#define osReadlink /;"	d	file:
osRmdir	testdocs/sqlite3.c	/^#define osRmdir /;"	d	file:
osSetEndOfFile	testdocs/sqlite3.c	/^#define osSetEndOfFile /;"	d	file:
osSetFilePointer	testdocs/sqlite3.c	/^#define osSetFilePointer /;"	d	file:
osSetFilePointerEx	testdocs/sqlite3.c	/^#define osSetFilePointerEx /;"	d	file:
osSleep	testdocs/sqlite3.c	/^#define osSleep /;"	d	file:
osStat	testdocs/sqlite3.c	/^#define osStat /;"	d	file:
osSystemTimeToFileTime	testdocs/sqlite3.c	/^#define osSystemTimeToFileTime /;"	d	file:
osUnlink	testdocs/sqlite3.c	/^#define osUnlink /;"	d	file:
osUnlockFile	testdocs/sqlite3.c	/^#define osUnlockFile /;"	d	file:
osUnlockFileEx	testdocs/sqlite3.c	/^#define osUnlockFileEx /;"	d	file:
osUnmapViewOfFile	testdocs/sqlite3.c	/^#define osUnmapViewOfFile /;"	d	file:
osUuidCreate	testdocs/sqlite3.c	/^#define osUuidCreate /;"	d	file:
osUuidCreateSequential	testdocs/sqlite3.c	/^#define osUuidCreateSequential /;"	d	file:
osWaitForSingleObject	testdocs/sqlite3.c	/^#define osWaitForSingleObject /;"	d	file:
osWaitForSingleObjectEx	testdocs/sqlite3.c	/^#define osWaitForSingleObjectEx /;"	d	file:
osWideCharToMultiByte	testdocs/sqlite3.c	/^#define osWideCharToMultiByte /;"	d	file:
osWrite	testdocs/sqlite3.c	/^#define osWrite /;"	d	file:
osWriteFile	testdocs/sqlite3.c	/^#define osWriteFile /;"	d	file:
out2Prerelease	testdocs/sqlite3.c	/^static Mem *out2Prerelease(Vdbe *p, VdbeOp *pOp){$/;"	f	file:
out2PrereleaseWithClear	testdocs/sqlite3.c	/^static SQLITE_NOINLINE Mem *out2PrereleaseWithClear(Mem *pOut){$/;"	f	file:
overflow	testdocs/sqlite3.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:
overload_function	testdocs/sqlite3.c	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	file:
owner	testdocs/sqlite3.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	testdocs/sqlite3.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
p	testdocs/sqlite3.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::p4union	file:
p	testdocs/sqlite3.c	/^  const char *p;                  \/* Token text (not NULL terminated) *\/$/;"	m	struct:Fts5Token	file:
p	testdocs/sqlite3.c	/^  u8 *p;                          \/* Pointer to buffer containing record *\/$/;"	m	struct:Fts5Data	file:
p	testdocs/sqlite3.c	/^  u8 *p;$/;"	m	struct:Fts5Buffer	file:
p	testdocs/sqlite3.c	/^  void *p;          \/* Pointer to sampled record *\/$/;"	m	struct:IndexSample	file:
p1	testdocs/sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p1	testdocs/sqlite3.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	file:
p1	testdocs/sqlite3.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	file:
p2	testdocs/sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p2	testdocs/sqlite3.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	file:
p2	testdocs/sqlite3.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	file:
p3	testdocs/sqlite3.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	file:
p3	testdocs/sqlite3.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	file:
p3	testdocs/sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p4	testdocs/sqlite3.c	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::p4union	file:
p4type	testdocs/sqlite3.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	file:
p4union	testdocs/sqlite3.c	/^  union p4union {     \/* fourth parameter *\/$/;"	u	struct:VdbeOp	file:
p5	testdocs/sqlite3.c	/^  u16 p5;             \/* Fifth parameter is an unsigned 16-bit integer *\/$/;"	m	struct:VdbeOp	file:
p5	testdocs/sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
pAggInfo	testdocs/sqlite3.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	file:
pAggInfo	testdocs/sqlite3.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	file:
pAinc	testdocs/sqlite3.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	file:
pAltCursor	testdocs/sqlite3.c	/^  VdbeCursor *pAltCursor; \/* Associated index cursor from which to read *\/$/;"	m	struct:VdbeCursor	file:
pAndInfo	testdocs/sqlite3.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if (eOperator& WO_AND)!=0 *\/$/;"	m	union:WhereTerm::__anon32	file:
pApi	testdocs/sqlite3.c	/^  const Fts5ExtensionApi *pApi;   \/* API offered by current FTS version *\/$/;"	m	struct:CInstIter	file:
pAppData	testdocs/sqlite3.c	/^  void *pAppData;                    \/* The extra pAppData, if any. *\/$/;"	m	struct:winVfsAppData	file:
pAppData	testdocs/sqlite3.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	file:
pAppData	testdocs/sqlite3.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	file:
pArg	testdocs/sqlite3.c	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	file:
pArg	testdocs/sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	file:
pArg	testdocs/sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	file:
pAuthArg	testdocs/sqlite3.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	file:
pAux	testdocs/sqlite3.c	/^  Fts5Auxiliary *pAux;            \/* Currently executing extension function *\/$/;"	m	struct:Fts5Cursor	file:
pAux	testdocs/sqlite3.c	/^  Fts5Auxiliary *pAux;            \/* Extension to which this belongs *\/$/;"	m	struct:Fts5Auxdata	file:
pAux	testdocs/sqlite3.c	/^  Fts5Auxiliary *pAux;            \/* First in list of all aux. functions *\/$/;"	m	struct:Fts5Global	file:
pAux	testdocs/sqlite3.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	file:
pAux	testdocs/sqlite3.c	/^  void *pAux;                     \/* Aux data pointer *\/$/;"	m	struct:AuxData	file:
pAuxData	testdocs/sqlite3.c	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:Vdbe	file:
pAuxData	testdocs/sqlite3.c	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:VdbeFrame	file:
pAuxdata	testdocs/sqlite3.c	/^  Fts5Auxdata *pAuxdata;          \/* First in linked list of saved aux-data *\/$/;"	m	struct:Fts5Cursor	file:
pBackup	testdocs/sqlite3.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:
pBlob	testdocs/sqlite3.c	/^  sqlite3_blob *pBlob;            \/* If not NULL, blob handle to read node *\/$/;"	m	struct:Fts3SegReader	file:
pBlockingConnection	testdocs/sqlite3.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	file:
pBt	testdocs/sqlite3.c	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor	file:
pBt	testdocs/sqlite3.c	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage	file:
pBt	testdocs/sqlite3.c	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree	file:
pBt	testdocs/sqlite3.c	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk	file:
pBt	testdocs/sqlite3.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	file:
pBtree	testdocs/sqlite3.c	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor	file:
pBtree	testdocs/sqlite3.c	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock	file:
pBtx	testdocs/sqlite3.c	/^  Btree *pBtx;            \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	file:
pBuf	testdocs/sqlite3.c	/^  Fts5Buffer *pBuf;               \/* Append to this buffer *\/$/;"	m	struct:PoslistCallbackCtx	file:
pBuf	testdocs/sqlite3.c	/^  Fts5Buffer *pBuf;               \/* Append to this buffer *\/$/;"	m	struct:PoslistOffsetsCtx	file:
pBuf	testdocs/sqlite3.c	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pBulk	testdocs/sqlite3.c	/^  void *pBulk;                        \/* Bulk memory used by pcache-local *\/$/;"	m	struct:PCache1	file:
pBusyHandlerArg	testdocs/sqlite3.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:
pCCurHint	testdocs/sqlite3.c	/^    struct CCurHint *pCCurHint;               \/* Used by codeCursorHint() *\/$/;"	m	union:Walker::__anon17	typeref:struct:Walker::__anon17::CCurHint	file:
pCache	testdocs/sqlite3.c	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr	file:
pCache	testdocs/sqlite3.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:
pCache	testdocs/sqlite3.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:
pCheck	testdocs/sqlite3.c	/^  ExprList *pCheck;    \/* All CHECK constraints *\/$/;"	m	struct:Table	file:
pChunk	testdocs/sqlite3.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:
pChunk	testdocs/sqlite3.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:
pCodec	testdocs/sqlite3.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:
pColl	testdocs/sqlite3.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::p4union	file:
pCollNeededArg	testdocs/sqlite3.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	file:
pCols	testdocs/sqlite3.c	/^    ExprList *pCols;                \/* List of explicit column names, or NULL *\/$/;"	m	struct:With::Cte	file:
pColset	testdocs/sqlite3.c	/^  Fts5Colset *pColset;            \/* Columns to search (NULL -> all columns) *\/$/;"	m	struct:Fts5ExprNearset	file:
pColset	testdocs/sqlite3.c	/^  Fts5Colset *pColset;            \/* Restrict matches to these columns *\/$/;"	m	struct:Fts5Iter	file:
pColset	testdocs/sqlite3.c	/^  Fts5Colset *pColset;            \/* Restrict matches to this column *\/$/;"	m	struct:PoslistCallbackCtx	file:
pColset	testdocs/sqlite3.c	/^  Fts5Colset *pColset;            \/* Restrict matches to this column *\/$/;"	m	struct:PoslistOffsetsCtx	file:
pColumns	testdocs/sqlite3.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	file:
pCommitArg	testdocs/sqlite3.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/$/;"	m	struct:sqlite3	file:
pConfig	testdocs/sqlite3.c	/^  Fts5Config *pConfig;            \/* Fts5 table configuration *\/$/;"	m	struct:Fts5VocabCursor	file:
pConfig	testdocs/sqlite3.c	/^  Fts5Config *pConfig;            \/* Virtual table configuration *\/$/;"	m	struct:Fts5Index	file:
pConfig	testdocs/sqlite3.c	/^  Fts5Config *pConfig;            \/* Virtual table configuration *\/$/;"	m	struct:Fts5Table	file:
pConfig	testdocs/sqlite3.c	/^  Fts5Config *pConfig;$/;"	m	struct:Fts5Expr	file:
pConfig	testdocs/sqlite3.c	/^  Fts5Config *pConfig;$/;"	m	struct:Fts5IntegrityCtx	file:
pConfig	testdocs/sqlite3.c	/^  Fts5Config *pConfig;$/;"	m	struct:Fts5Parse	file:
pConfig	testdocs/sqlite3.c	/^  Fts5Config *pConfig;$/;"	m	struct:Fts5Storage	file:
pConflict	testdocs/sqlite3.c	/^  sqlite3_stmt *pConflict;        \/* Points to conflicting row, if any *\/$/;"	m	struct:sqlite3_changeset_iter	file:
pConstExpr	testdocs/sqlite3.c	/^  ExprList *pConstExpr;\/* Constant expressions *\/$/;"	m	struct:Parse	file:
pContext	testdocs/sqlite3.c	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
pContext	testdocs/sqlite3.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pContext	testdocs/sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeGeomCallback	file:
pCovidx	testdocs/sqlite3.c	/^    Index *pCovidx;       \/* Possible covering index for WHERE_MULTI_OR *\/$/;"	m	union:WhereLevel::__anon27	file:
pCsr	testdocs/sqlite3.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:
pCsr	testdocs/sqlite3.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:
pCsr	testdocs/sqlite3.c	/^  Fts3Cursor *pCsr;               \/* FTS3 Cursor *\/$/;"	m	struct:LoadDoclistCtx	file:
pCsr	testdocs/sqlite3.c	/^  Fts3Cursor *pCsr;$/;"	m	struct:TermOffsetCtx	file:
pCsr	testdocs/sqlite3.c	/^  Fts5Cursor *pCsr;               \/* First in list of all open cursors *\/$/;"	m	struct:Fts5Global	file:
pCsr	testdocs/sqlite3.c	/^  VdbeCursor *pCsr;               \/* Cursor to read old values from *\/$/;"	m	struct:PreUpdate	file:
pCsr	testdocs/sqlite3.c	/^  sqlite3_tokenizer_cursor *pCsr; \/* Cursor to iterate through zInput *\/$/;"	m	struct:Fts3tokCursor	file:
pCtx	testdocs/sqlite3.c	/^    sqlite3_context *pCtx; \/* Used when p4type is P4_FUNCCTX *\/$/;"	m	union:VdbeOp::p4union	file:
pCtx	testdocs/sqlite3.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:
pCtx	testdocs/sqlite3.c	/^  sqlite3_context *pCtx;   \/* Function context - put error messages here *\/$/;"	m	struct:JsonString	file:
pCtx	testdocs/sqlite3.c	/^  void *pCtx;$/;"	m	struct:PorterContext	file:
pCtx	testdocs/sqlite3.c	/^  void *pCtx;$/;"	m	struct:SessionHook	file:
pCurrent	testdocs/sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:unix_syscall	file:
pCurrent	testdocs/sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:win_syscall	file:
pCursor	testdocs/sqlite3.c	/^    BtCursor *pCursor;          \/* CURTYPE_BTREE.  Btree cursor *\/$/;"	m	union:VdbeCursor::__anon18	file:
pCursor	testdocs/sqlite3.c	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared	file:
pCursor	testdocs/sqlite3.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:
pData	testdocs/sqlite3.c	/^  Fts5Data *pData;              \/* Data for current page of this level *\/$/;"	m	struct:Fts5DlidxLvl	file:
pData	testdocs/sqlite3.c	/^  const u8 *pData;$/;"	m	struct:Fts5IndexIter	file:
pData	testdocs/sqlite3.c	/^  const void *pData;      \/* Data for tables.  NULL for indexes *\/$/;"	m	struct:BtreePayload	file:
pData	testdocs/sqlite3.c	/^  void *pData;                   \/* Page data *\/$/;"	m	struct:PgHdr	file:
pDataVersion	testdocs/sqlite3.c	/^  sqlite3_stmt *pDataVersion;$/;"	m	struct:Fts5Index	file:
pDbFd	testdocs/sqlite3.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:
pDbPage	testdocs/sqlite3.c	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage	file:
pDef	testdocs/sqlite3.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:sqlite3_value::MemValue	file:
pDefault	testdocs/sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:unix_syscall	file:
pDefault	testdocs/sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:win_syscall	file:
pDeferred	testdocs/sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred search tokens, if any *\/$/;"	m	struct:Fts3Cursor	file:
pDeferred	testdocs/sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred token object for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pDelFrame	testdocs/sqlite3.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	file:
pDelete	testdocs/sqlite3.c	/^  sqlite3_stmt *pDelete;          \/* DELETE statement *\/$/;"	m	struct:SessionApplyCtx	file:
pDelete	testdocs/sqlite3.c	/^  sqlite3_stmt *pDelete;          \/* Statement for DELETE ops *\/$/;"	m	struct:RbuObjIter	file:
pDeleteNode	testdocs/sqlite3.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:
pDeleteParent	testdocs/sqlite3.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:
pDeleteRowid	testdocs/sqlite3.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:
pDeleted	testdocs/sqlite3.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:
pDeleter	testdocs/sqlite3.c	/^  sqlite3_stmt *pDeleter;         \/* "DELETE FROM %_data ... id>=? AND id<=?" *\/$/;"	m	struct:Fts5Index	file:
pDest	testdocs/sqlite3.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pDestDb	testdocs/sqlite3.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:
pDestructor	testdocs/sqlite3.c	/^    FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	union:FuncDef::__anon9	file:
pDflt	testdocs/sqlite3.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	file:
pDfltColl	testdocs/sqlite3.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	file:
pDfltTok	testdocs/sqlite3.c	/^  Fts5TokenizerModule *pDfltTok;  \/* Default tokenizer module *\/$/;"	m	struct:Fts5Global	file:
pDirty	testdocs/sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDirty	testdocs/sqlite3.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty sorted by pgno *\/$/;"	m	struct:PgHdr	file:
pDirtyNext	testdocs/sqlite3.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyPrev	testdocs/sqlite3.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyTail	testdocs/sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDisconnect	testdocs/sqlite3.c	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	file:
pDlidx	testdocs/sqlite3.c	/^  Fts5DlidxIter *pDlidx;          \/* If there is a doclist-index *\/$/;"	m	struct:Fts5SegIter	file:
pEList	testdocs/sqlite3.c	/^  ExprList *pEList;         \/* Replacement expressions *\/$/;"	m	struct:SubstContext	file:
pEList	testdocs/sqlite3.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	file:
pEList	testdocs/sqlite3.c	/^  ExprList *pEList;    \/* Optional list of result-set columns *\/$/;"	m	struct:NameContext	file:
pEnd	testdocs/sqlite3.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	file:
pEnd	testdocs/sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of global page cache memory *\/$/;"	m	struct:PCacheGlobal	file:
pEntry	testdocs/sqlite3.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pEpoTab	testdocs/sqlite3.c	/^  Table *pEpoTab;                      \/* Eponymous table for this module *\/$/;"	m	struct:Module	file:
pErr	testdocs/sqlite3.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	file:
pExpr	testdocs/sqlite3.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pExpr	testdocs/sqlite3.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pExpr	testdocs/sqlite3.c	/^    Expr *pExpr;            \/* The parse tree for this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
pExpr	testdocs/sqlite3.c	/^    Expr *pExpr;           \/* Used when p4type is P4_EXPR *\/$/;"	m	union:VdbeOp::p4union	file:
pExpr	testdocs/sqlite3.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:
pExpr	testdocs/sqlite3.c	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan	file:
pExpr	testdocs/sqlite3.c	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor	file:
pExpr	testdocs/sqlite3.c	/^  Fts3Expr *pExpr;                \/* Pointer to phrase expression *\/$/;"	m	struct:LcsIterator	file:
pExpr	testdocs/sqlite3.c	/^  Fts5Expr *pExpr;                \/* Expression for MATCH queries *\/$/;"	m	struct:Fts5Cursor	file:
pExpr	testdocs/sqlite3.c	/^  Fts5Expr *pExpr;$/;"	m	struct:Fts5ExprCtx	file:
pExpr	testdocs/sqlite3.c	/^  Fts5ExprNode *pExpr;            \/* Result of a successful parse *\/$/;"	m	struct:Fts5Parse	file:
pExprList	testdocs/sqlite3.c	/^  ExprList *pExprList; \/* SET clause for UPDATE. *\/$/;"	m	struct:TriggerStep	file:
pExtra	testdocs/sqlite3.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	file:
pExtra	testdocs/sqlite3.c	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pFKey	testdocs/sqlite3.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	file:
pFd	testdocs/sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle *\/$/;"	m	struct:SorterFile	file:
pFd	testdocs/sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle to write to *\/$/;"	m	struct:PmaWriter	file:
pFd	testdocs/sqlite3.c	/^  sqlite3_file *pFd;           \/* The WAL file to which we write *\/$/;"	m	struct:WalWriter	file:
pFd	testdocs/sqlite3.c	/^  sqlite3_file *pFd;          \/* File handle we are reading from *\/$/;"	m	struct:PmaReader	file:
pFiller	testdocs/sqlite3.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:sqlite3_value	file:
pFilter	testdocs/sqlite3.c	/^  Fts3SegFilter *pFilter;         \/* Pointer to filter object *\/$/;"	m	struct:Fts3MultiSegReader	file:
pFilterCtx	testdocs/sqlite3.c	/^  void *pFilterCtx;               \/* First argument to pass to xTableFilter *\/$/;"	m	struct:sqlite3_session	file:
pFirst	testdocs/sqlite3.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:
pFirst	testdocs/sqlite3.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon20	typeref:struct:__anon20::MemBlockHdr	file:
pFirst	testdocs/sqlite3.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
pFirst	testdocs/sqlite3.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
pForest	testdocs/sqlite3.c	/^  struct RowSetEntry *pForest;   \/* List of binary trees of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrame	testdocs/sqlite3.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:sqlite3_value::MemValue	file:
pFrame	testdocs/sqlite3.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	file:
pFree	testdocs/sqlite3.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	file:
pFree	testdocs/sqlite3.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:
pFree	testdocs/sqlite3.c	/^  PgHdr1 *pFree;                      \/* List of unused pcache-local pages *\/$/;"	m	struct:PCache1	file:
pFree	testdocs/sqlite3.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	file:
pFresh	testdocs/sqlite3.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrom	testdocs/sqlite3.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	file:
pFts	testdocs/sqlite3.c	/^  Fts5Context *pFts;              \/* First arg to pass to pApi functions *\/$/;"	m	struct:CInstIter	file:
pFts3Tab	testdocs/sqlite3.c	/^  Fts3Table *pFts3Tab;$/;"	m	struct:Fts3auxTable	file:
pFunc	testdocs/sqlite3.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pFunc	testdocs/sqlite3.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::p4union	file:
pFunc	testdocs/sqlite3.c	/^  FuncDef *pFunc;         \/* Pointer to function information *\/$/;"	m	struct:sqlite3_context	file:
pFuncArg	testdocs/sqlite3.c	/^      ExprList *pFuncArg;  \/* Arguments to table-valued-function *\/$/;"	m	union:SrcList::SrcList_item::__anon15	file:
pGlobal	testdocs/sqlite3.c	/^  Fts5Global *pGlobal;            \/* FTS5 global object for this database *\/$/;"	m	struct:Fts5VocabTable	file:
pGlobal	testdocs/sqlite3.c	/^  Fts5Global *pGlobal;            \/* Global (connection wide) data *\/$/;"	m	struct:Fts5Table	file:
pGlobal	testdocs/sqlite3.c	/^  Fts5Global *pGlobal;            \/* Global context for this function *\/$/;"	m	struct:Fts5Auxiliary	file:
pGroup	testdocs/sqlite3.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:
pGroupBy	testdocs/sqlite3.c	/^    ExprList *pGroupBy;                       \/* GROUP BY clause *\/$/;"	m	union:Walker::__anon17	file:
pGroupBy	testdocs/sqlite3.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	file:
pGroupBy	testdocs/sqlite3.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	file:
pGroupBy	testdocs/sqlite3.c	/^  ExprList *pGroupBy;$/;"	m	struct:HavingToWhereCtx	file:
pHasContent	testdocs/sqlite3.c	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared	file:
pHash	testdocs/sqlite3.c	/^    FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	union:FuncDef::__anon9	file:
pHash	testdocs/sqlite3.c	/^  Fts5Hash *pHash;                \/* Hash table for in-memory data *\/$/;"	m	struct:Fts5Index	file:
pHashNext	testdocs/sqlite3.c	/^  Fts5HashEntry *pHashNext;       \/* Next hash entry with same hash-key *\/$/;"	m	struct:Fts5HashEntry	file:
pHaving	testdocs/sqlite3.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	file:
pHavingCtx	testdocs/sqlite3.c	/^    struct HavingToWhereCtx *pHavingCtx;      \/* HAVING to WHERE clause ctx *\/$/;"	m	union:Walker::__anon17	typeref:struct:Walker::__anon17::HavingToWhereCtx	file:
pHead	testdocs/sqlite3.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:
pHeap	testdocs/sqlite3.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	file:
pI64	testdocs/sqlite3.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::p4union	file:
pIBIndex	testdocs/sqlite3.c	/^    Index *pIBIndex;  \/* Index structure corresponding to u1.zIndexedBy *\/$/;"	m	struct:SrcList::SrcList_item	file:
pId	testdocs/sqlite3.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:
pId	testdocs/sqlite3.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:
pIdList	testdocs/sqlite3.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	file:
pIdx	testdocs/sqlite3.c	/^  Fts5Index *pIdx;$/;"	m	struct:Fts5FlushCtx	file:
pIdx	testdocs/sqlite3.c	/^  Index *pIdx;     \/* The index to be tested for coverage *\/$/;"	m	struct:IdxCover	file:
pIdx	testdocs/sqlite3.c	/^  Index *pIdx;    \/* The index used to access the table *\/$/;"	m	struct:CCurHint	file:
pIdx	testdocs/sqlite3.c	/^  Index *pIdx;$/;"	m	struct:ValueNewStat4Ctx	file:
pIdxCover	testdocs/sqlite3.c	/^    struct IdxCover *pIdxCover;               \/* Check for index coverage *\/$/;"	m	union:Walker::__anon17	typeref:struct:Walker::__anon17::IdxCover	file:
pIdxDeleter	testdocs/sqlite3.c	/^  sqlite3_stmt *pIdxDeleter;      \/* "DELETE FROM %_idx WHERE segid=? *\/$/;"	m	struct:Fts5Index	file:
pIdxExpr	testdocs/sqlite3.c	/^  Expr *pIdxExpr;            \/* Search for this index expression *\/$/;"	m	struct:WhereScan	file:
pIdxExpr	testdocs/sqlite3.c	/^  Expr *pIdxExpr;    \/* The index expression *\/$/;"	m	struct:IdxExprTrans	file:
pIdxIter	testdocs/sqlite3.c	/^  sqlite3_stmt *pIdxIter;         \/* Index iterator *\/$/;"	m	struct:RbuObjIter	file:
pIdxSelect	testdocs/sqlite3.c	/^  sqlite3_stmt *pIdxSelect;$/;"	m	struct:Fts5Index	file:
pIdxTrans	testdocs/sqlite3.c	/^    struct IdxExprTrans *pIdxTrans;           \/* Convert indexed expr to column *\/$/;"	m	union:Walker::__anon17	typeref:struct:Walker::__anon17::IdxExprTrans	file:
pIdxWriter	testdocs/sqlite3.c	/^  sqlite3_stmt *pIdxWriter;       \/* "INSERT ... %_idx VALUES(?,?,?,?)" *\/$/;"	m	struct:Fts5Index	file:
pIn	testdocs/sqlite3.c	/^  void *pIn;                                \/* First argument to xInput *\/$/;"	m	struct:SessionInput	file:
pIn	testdocs/sqlite3.c	/^  void *pIn;                     \/* Argument to the thread *\/$/;"	m	struct:SQLiteThread	file:
pIn	testdocs/sqlite3.c	/^  void *pIn;               \/* Argument to xTask *\/$/;"	m	struct:SQLiteThread	file:
pInJournal	testdocs/sqlite3.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:
pInSavepoint	testdocs/sqlite3.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:
pIncr	testdocs/sqlite3.c	/^  IncrMerger *pIncr;          \/* Incremental merger *\/$/;"	m	struct:PmaReader	file:
pIndex	testdocs/sqlite3.c	/^      Index *pIndex;         \/* Index used, or NULL *\/$/;"	m	struct:WhereLoop::__anon29::__anon30	file:
pIndex	testdocs/sqlite3.c	/^  Fts5Index *pIndex;              \/* Associated FTS5 index *\/$/;"	m	struct:Fts5VocabCursor	file:
pIndex	testdocs/sqlite3.c	/^  Fts5Index *pIndex;              \/* Full-text index *\/$/;"	m	struct:Fts5Table	file:
pIndex	testdocs/sqlite3.c	/^  Fts5Index *pIndex;              \/* Index that owns this iterator *\/$/;"	m	struct:Fts5Iter	file:
pIndex	testdocs/sqlite3.c	/^  Fts5Index *pIndex;$/;"	m	struct:Fts5Expr	file:
pIndex	testdocs/sqlite3.c	/^  Fts5Index *pIndex;$/;"	m	struct:Fts5Storage	file:
pIndex	testdocs/sqlite3.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	file:
pInfo	testdocs/sqlite3.c	/^  sqlite3_rtree_query_info *pInfo;  \/* xGeom and xQueryFunc argument *\/$/;"	m	struct:RtreeConstraint	file:
pInitMutex	testdocs/sqlite3.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	file:
pInode	testdocs/sqlite3.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:
pInode	testdocs/sqlite3.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:
pInput	testdocs/sqlite3.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pInsert	testdocs/sqlite3.c	/^  sqlite3_stmt *pInsert;          \/* INSERT statement *\/$/;"	m	struct:SessionApplyCtx	file:
pInsert	testdocs/sqlite3.c	/^  sqlite3_stmt *pInsert;          \/* Statement for INSERT operations *\/$/;"	m	struct:RbuObjIter	file:
pIter	testdocs/sqlite3.c	/^  Fts5IndexIter *pIter;           \/* Iterator for this term *\/$/;"	m	struct:Fts5ExprTerm	file:
pIter	testdocs/sqlite3.c	/^  Fts5IndexIter *pIter;           \/* Term\/rowid iterator object *\/$/;"	m	struct:Fts5VocabCursor	file:
pIter	testdocs/sqlite3.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:
pKey	testdocs/sqlite3.c	/^  const char *pKey;            \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
pKey	testdocs/sqlite3.c	/^  const void *pKey;       \/* Key content for indexes.  NULL for tables *\/$/;"	m	struct:BtreePayload	file:
pKey	testdocs/sqlite3.c	/^  void *pKey;               \/* Saved key that was cursor last known position *\/$/;"	m	struct:BtCursor	file:
pKey	testdocs/sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
pKeyInfo	testdocs/sqlite3.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::p4union	file:
pKeyInfo	testdocs/sqlite3.c	/^  KeyInfo *pKeyInfo;              \/* How to compare records *\/$/;"	m	struct:VdbeSorter	file:
pKeyInfo	testdocs/sqlite3.c	/^  KeyInfo *pKeyInfo;      \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	file:
pKeyInfo	testdocs/sqlite3.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	file:
pKeyInfo	testdocs/sqlite3.c	/^  struct KeyInfo *pKeyInfo;            \/* Arg passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo	file:
pLast	testdocs/sqlite3.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	file:
pLast	testdocs/sqlite3.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon20	typeref:struct:__anon20::MemBlockHdr	file:
pLast	testdocs/sqlite3.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pLeaf	testdocs/sqlite3.c	/^  Fts5Data *pLeaf;                \/* Current leaf data *\/$/;"	m	struct:Fts5SegIter	file:
pLeft	testdocs/sqlite3.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	file:
pLeft	testdocs/sqlite3.c	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr	file:
pLeft	testdocs/sqlite3.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pLeftmost	testdocs/sqlite3.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:
pLimit	testdocs/sqlite3.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pLimit	testdocs/sqlite3.c	/^  Expr *pLimit;    \/* The LIMIT expression.  NULL if there is no limit *\/$/;"	m	struct:LimitVal	file:
pList	testdocs/sqlite3.c	/^    ExprList *pList;     \/* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN *\/$/;"	m	union:Expr::__anon11	file:
pList	testdocs/sqlite3.c	/^  PendingList *pList;             \/* Doclist is assembled here *\/$/;"	m	struct:Fts3DeferredToken	file:
pList	testdocs/sqlite3.c	/^  SessionTable *pList;            \/* List of tables in current patch *\/$/;"	m	struct:sqlite3_changegroup	file:
pList	testdocs/sqlite3.c	/^  SorterRecord *pList;            \/* Linked list of records *\/$/;"	m	struct:SorterList	file:
pList	testdocs/sqlite3.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:
pList	testdocs/sqlite3.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:
pList	testdocs/sqlite3.c	/^  char *pList;                   \/* Pointer to position list following iDocid *\/$/;"	m	struct:Fts3Doclist	file:
pList	testdocs/sqlite3.c	/^  char *pList;$/;"	m	struct:TokenDoclist	file:
pLock	testdocs/sqlite3.c	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared	file:
pLogArg	testdocs/sqlite3.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	file:
pLoops	testdocs/sqlite3.c	/^  WhereLoop *pLoops;        \/* List of all WhereLoop objects *\/$/;"	m	struct:WhereInfo	file:
pLruNext	testdocs/sqlite3.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruPrev	testdocs/sqlite3.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pMIBuffer	testdocs/sqlite3.c	/^  MatchinfoBuffer *pMIBuffer;     \/* Buffer for matchinfo data *\/$/;"	m	struct:Fts3Cursor	file:
pMain	testdocs/sqlite3.c	/^  rbu_file *pMain;                \/* Linked list of main db files *\/$/;"	m	struct:rbu_vfs	file:
pMainNext	testdocs/sqlite3.c	/^  rbu_file *pMainNext;            \/* Next MAIN_DB file *\/$/;"	m	struct:rbu_file	file:
pMap	testdocs/sqlite3.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:
pMapRegion	testdocs/sqlite3.c	/^  void *pMapRegion;                   \/* Memory mapped region *\/$/;"	m	struct:unixFile	file:
pMapRegion	testdocs/sqlite3.c	/^  void *pMapRegion;             \/* Area memory mapped *\/$/;"	m	struct:winFile	file:
pMem	testdocs/sqlite3.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::p4union	file:
pMem	testdocs/sqlite3.c	/^  Mem *pMem;              \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	file:
pMerger	testdocs/sqlite3.c	/^  MergeEngine *pMerger;           \/* Merge engine thread reads data from *\/$/;"	m	struct:IncrMerger	file:
pMerger	testdocs/sqlite3.c	/^  MergeEngine *pMerger;           \/* Or here, if bUseThreads==0 *\/$/;"	m	struct:VdbeSorter	file:
pMethod	testdocs/sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:
pMethod	testdocs/sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/* The file I\/O methods to use. *\/$/;"	m	struct:winVfsAppData	file:
pMethod	testdocs/sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:
pMethod	testdocs/sqlite3.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:
pMethods	testdocs/sqlite3.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	file:
pMmapFreelist	testdocs/sqlite3.c	/^  PgHdr *pMmapFreelist;       \/* List of free mmap page headers (pDirty) *\/$/;"	m	struct:Pager	file:
pMod	testdocs/sqlite3.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	file:
pMod	testdocs/sqlite3.c	/^  const sqlite3_tokenizer_module *pMod;$/;"	m	struct:Fts3tokTable	file:
pModule	testdocs/sqlite3.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	file:
pModule	testdocs/sqlite3.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	file:
pModule	testdocs/sqlite3.c	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer	file:
pNC	testdocs/sqlite3.c	/^    NameContext *pNC;                         \/* Naming context *\/$/;"	m	union:Walker::__anon17	file:
pName	testdocs/sqlite3.c	/^  const PragmaName *pName;  \/* Name of the pragma *\/$/;"	m	struct:PragmaVtab	file:
pName	testdocs/sqlite3.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
pNear	testdocs/sqlite3.c	/^  Fts5ExprNearset *pNear;         \/* For FTS5_STRING - cluster of phrases *\/$/;"	m	struct:Fts5ExprNode	file:
pNew	testdocs/sqlite3.c	/^  WhereLoop *pNew;          \/* Template WhereLoop *\/$/;"	m	struct:WhereLoopBuilder	file:
pNewTable	testdocs/sqlite3.c	/^  Table *pNewTable;         \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	file:
pNewTrigger	testdocs/sqlite3.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	file:
pNewUnpacked	testdocs/sqlite3.c	/^  UnpackedRecord *pNewUnpacked;   \/* Unpacked version of new.* record *\/$/;"	m	struct:PreUpdate	file:
pNext	testdocs/sqlite3.c	/^    SorterRecord *pNext;          \/* Pointer to next record in list *\/$/;"	m	union:SorterRecord::__anon25	file:
pNext	testdocs/sqlite3.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	file:
pNext	testdocs/sqlite3.c	/^  BtCursor *pNext;          \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pNext	testdocs/sqlite3.c	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock	file:
pNext	testdocs/sqlite3.c	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared	file:
pNext	testdocs/sqlite3.c	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree	file:
pNext	testdocs/sqlite3.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:
pNext	testdocs/sqlite3.c	/^  Fts3DeferredToken *pNext;       \/* Next in list of deferred tokens *\/$/;"	m	struct:Fts3DeferredToken	file:
pNext	testdocs/sqlite3.c	/^  Fts5Auxdata *pNext;             \/* Next object in linked list *\/$/;"	m	struct:Fts5Auxdata	file:
pNext	testdocs/sqlite3.c	/^  Fts5Auxiliary *pNext;           \/* Next registered auxiliary function *\/$/;"	m	struct:Fts5Auxiliary	file:
pNext	testdocs/sqlite3.c	/^  Fts5Cursor *pNext;              \/* Next cursor in Fts5Cursor.pCsr list *\/$/;"	m	struct:Fts5Cursor	file:
pNext	testdocs/sqlite3.c	/^  Fts5TermsetEntry *pNext;$/;"	m	struct:Fts5TermsetEntry	file:
pNext	testdocs/sqlite3.c	/^  Fts5TokenizerModule *pNext;     \/* Next registered tokenizer module *\/$/;"	m	struct:Fts5TokenizerModule	file:
pNext	testdocs/sqlite3.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	file:
pNext	testdocs/sqlite3.c	/^  Index *pNext;            \/* The next index associated with the same table *\/$/;"	m	struct:Index	file:
pNext	testdocs/sqlite3.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	file:
pNext	testdocs/sqlite3.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	file:
pNext	testdocs/sqlite3.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:
pNext	testdocs/sqlite3.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:
pNext	testdocs/sqlite3.c	/^  RbuUpdateStmt *pNext;$/;"	m	struct:RbuUpdateStmt	file:
pNext	testdocs/sqlite3.c	/^  RtreeNode *pNext;           \/* Next node in this hash collision chain *\/$/;"	m	struct:RtreeNode	file:
pNext	testdocs/sqlite3.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	file:
pNext	testdocs/sqlite3.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	file:
pNext	testdocs/sqlite3.c	/^  SessionChange *pNext;           \/* For hash-table collisions *\/$/;"	m	struct:SessionChange	file:
pNext	testdocs/sqlite3.c	/^  SessionTable *pNext;$/;"	m	struct:SessionTable	file:
pNext	testdocs/sqlite3.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	file:
pNext	testdocs/sqlite3.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	file:
pNext	testdocs/sqlite3.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	file:
pNext	testdocs/sqlite3.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	file:
pNext	testdocs/sqlite3.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:
pNext	testdocs/sqlite3.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	file:
pNext	testdocs/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pNext	testdocs/sqlite3.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:
pNext	testdocs/sqlite3.c	/^  sqlite3_session *pNext;         \/* Next session object on same db. *\/$/;"	m	struct:sqlite3_session	file:
pNext	testdocs/sqlite3.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	file:
pNext	testdocs/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:
pNext	testdocs/sqlite3.c	/^  struct ScratchFreeslot *pNext;   \/* Next unused scratch buffer *\/$/;"	m	struct:ScratchFreeslot	typeref:struct:ScratchFreeslot::ScratchFreeslot	file:
pNext	testdocs/sqlite3.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:
pNext	testdocs/sqlite3.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:
pNext	testdocs/sqlite3.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:
pNext	testdocs/sqlite3.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:
pNext	testdocs/sqlite3.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:
pNextAux	testdocs/sqlite3.c	/^  AuxData *pNextAux;              \/* Next element in list *\/$/;"	m	struct:AuxData	file:
pNextBlocked	testdocs/sqlite3.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	file:
pNextChunk	testdocs/sqlite3.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:
pNextDocid	testdocs/sqlite3.c	/^  char *pNextDocid;              \/* Pointer to next docid *\/$/;"	m	struct:Fts3Doclist	file:
pNextFrom	testdocs/sqlite3.c	/^  FKey *pNextFrom;  \/* Next FKey with the same in pFrom. Next parent of pFrom *\/$/;"	m	struct:FKey	file:
pNextId	testdocs/sqlite3.c	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
pNextLeaf	testdocs/sqlite3.c	/^  Fts5Data *pNextLeaf;            \/* Leaf page (iLeafPgno+1) *\/$/;"	m	struct:Fts5SegIter	file:
pNextLoop	testdocs/sqlite3.c	/^  WhereLoop *pNextLoop; \/* Next WhereLoop object in the WhereClause *\/$/;"	m	struct:WhereLoop	file:
pNextTo	testdocs/sqlite3.c	/^  FKey *pNextTo;    \/* Next with the same zTo. Next child of zTo. *\/$/;"	m	struct:FKey	file:
pNextZombie	testdocs/sqlite3.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	file:
pNode	testdocs/sqlite3.c	/^  Fts5ExprNode *pNode;            \/* FTS5_STRING node this phrase is part of *\/$/;"	m	struct:Fts5ExprPhrase	file:
pNodeBlob	testdocs/sqlite3.c	/^  sqlite3_blob *pNodeBlob;$/;"	m	struct:Rtree	file:
pOffset	testdocs/sqlite3.c	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pOffset	testdocs/sqlite3.c	/^  Expr *pOffset;   \/* The OFFSET expression.  NULL if there is none *\/$/;"	m	struct:LimitVal	file:
pOffsetList	testdocs/sqlite3.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:
pOldMethod	testdocs/sqlite3.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:
pOn	testdocs/sqlite3.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pOrInfo	testdocs/sqlite3.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if (eOperator & WO_OR)!=0 *\/$/;"	m	union:WhereTerm::__anon32	file:
pOrPoslist	testdocs/sqlite3.c	/^  char *pOrPoslist;$/;"	m	struct:Fts3Phrase	file:
pOrSet	testdocs/sqlite3.c	/^  WhereOrSet *pOrSet;       \/* Record best loops here, if not NULL *\/$/;"	m	struct:WhereLoopBuilder	file:
pOrderBy	testdocs/sqlite3.c	/^  ExprList *pOrderBy;       \/* ORDER BY clause *\/$/;"	m	struct:WhereLoopBuilder	file:
pOrderBy	testdocs/sqlite3.c	/^  ExprList *pOrderBy;       \/* The ORDER BY clause or NULL *\/$/;"	m	struct:WhereInfo	file:
pOrderBy	testdocs/sqlite3.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	file:
pOrderBy	testdocs/sqlite3.c	/^  ExprList *pOrderBy;   \/* The ORDER BY (or GROUP BY clause) *\/$/;"	m	struct:SortCtx	file:
pOrderBy	testdocs/sqlite3.c	/^  ExprList *pOrderBy;  \/* Key columns for SRT_Queue and SRT_DistQueue *\/$/;"	m	struct:SelectDest	file:
pOrigWC	testdocs/sqlite3.c	/^  WhereClause *pOrigWC;      \/* Original, innermost WhereClause *\/$/;"	m	struct:WhereScan	file:
pOut	testdocs/sqlite3.c	/^  Fts5Buffer *pOut;               \/* Output poslist *\/$/;"	m	struct:Fts5NearTrimmer	file:
pOut	testdocs/sqlite3.c	/^  Mem *pOut;              \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	file:
pOut	testdocs/sqlite3.c	/^  void *pOut;                    \/* Result returned by the thread *\/$/;"	m	struct:SQLiteThread	file:
pOuter	testdocs/sqlite3.c	/^  WhereClause *pOuter;     \/* Outer conjunction *\/$/;"	m	struct:WhereClause	file:
pOuter	testdocs/sqlite3.c	/^  With *pOuter;                   \/* Containing WITH clause, or NULL *\/$/;"	m	struct:With	file:
pPCache	testdocs/sqlite3.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:
pPage	testdocs/sqlite3.c	/^  sqlite3_pcache_page *pPage;    \/* Pcache object page handle *\/$/;"	m	struct:PgHdr	file:
pPage	testdocs/sqlite3.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	file:
pPage1	testdocs/sqlite3.c	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared	file:
pPager	testdocs/sqlite3.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	file:
pPager	testdocs/sqlite3.c	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared	file:
pPager	testdocs/sqlite3.c	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk	file:
pParent	testdocs/sqlite3.c	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr	file:
pParent	testdocs/sqlite3.c	/^  RtreeNode *pParent;         \/* Parent node *\/$/;"	m	struct:RtreeNode	file:
pParent	testdocs/sqlite3.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:
pParent	testdocs/sqlite3.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	file:
pParse	testdocs/sqlite3.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	file:
pParse	testdocs/sqlite3.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	file:
pParse	testdocs/sqlite3.c	/^  Parse *pParse;            \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo	file:
pParse	testdocs/sqlite3.c	/^  Parse *pParse;            \/* The parsing context *\/$/;"	m	struct:SubstContext	file:
pParse	testdocs/sqlite3.c	/^  Parse *pParse;          \/* Parsing context used to create this Vdbe *\/$/;"	m	struct:Vdbe	file:
pParse	testdocs/sqlite3.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	file:
pParse	testdocs/sqlite3.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	file:
pParse	testdocs/sqlite3.c	/^  Parse *pParse;$/;"	m	struct:ValueNewStat4Ctx	file:
pPartIdxWhere	testdocs/sqlite3.c	/^  Expr *pPartIdxWhere;     \/* WHERE clause for partial indices *\/$/;"	m	struct:Index	file:
pPatch	testdocs/sqlite3.c	/^    JsonNode *pPatch;      \/* Node chain of patch for JNODE_PATCH *\/$/;"	m	union:JsonNode::__anon37	file:
pPayload	testdocs/sqlite3.c	/^  u8 *pPayload;  \/* Pointer to the start of payload *\/$/;"	m	struct:CellInfo	file:
pPg	testdocs/sqlite3.c	/^  DbPage *pPg;$/;"	m	struct:StatPage	file:
pPhrase	testdocs/sqlite3.c	/^  Fts3Phrase *pPhrase;            \/* The phrase the token belongs to *\/$/;"	m	struct:Fts3TokenAndCost	file:
pPhrase	testdocs/sqlite3.c	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr	file:
pPhrase	testdocs/sqlite3.c	/^  Fts5ExprPhrase *pPhrase;$/;"	m	struct:TokenCtx	file:
pPk	testdocs/sqlite3.c	/^  Index *pPk;                     \/* PK index if pTab is WITHOUT ROWID *\/$/;"	m	struct:PreUpdate	file:
pPoslist	testdocs/sqlite3.c	/^  Fts5Buffer *pPoslist;           \/* Pointer to current poslist *\/$/;"	m	struct:Fts5MatchPhrase	file:
pPragma	testdocs/sqlite3.c	/^  sqlite3_stmt *pPragma;    \/* The pragma statement to run *\/$/;"	m	struct:PragmaVtabCursor	file:
pPreUpdate	testdocs/sqlite3.c	/^  PreUpdate *pPreUpdate;        \/* Context for active pre-update callback *\/$/;"	m	struct:sqlite3	file:
pPreUpdateArg	testdocs/sqlite3.c	/^  void *pPreUpdateArg;          \/* First argument to xPreUpdateCallback *\/$/;"	m	struct:sqlite3	file:
pPrev	testdocs/sqlite3.c	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree	file:
pPrev	testdocs/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pPrev	testdocs/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:
pPrev	testdocs/sqlite3.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:
pPrevTo	testdocs/sqlite3.c	/^  FKey *pPrevTo;    \/* Previous with the same zTo *\/$/;"	m	struct:FKey	file:
pPrior	testdocs/sqlite3.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	file:
pPrior	testdocs/sqlite3.c	/^  VtabCtx *pPrior;    \/* Parent context (if any) *\/$/;"	m	struct:VtabCtx	file:
pProfileArg	testdocs/sqlite3.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	file:
pProgram	testdocs/sqlite3.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::p4union	file:
pProgram	testdocs/sqlite3.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	file:
pProgram	testdocs/sqlite3.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	file:
pProgressArg	testdocs/sqlite3.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	file:
pPtr	testdocs/sqlite3.c	/^  void *pPtr;                     \/* Pointer value *\/$/;"	m	struct:Fts5Auxdata	file:
pRank	testdocs/sqlite3.c	/^  Fts5Auxiliary *pRank;           \/* Rank callback (or NULL) *\/$/;"	m	struct:Fts5Cursor	file:
pRankArgStmt	testdocs/sqlite3.c	/^  sqlite3_stmt *pRankArgStmt;     \/* Origin of objects in apRankArg[] *\/$/;"	m	struct:Fts5Cursor	file:
pRbu	testdocs/sqlite3.c	/^  sqlite3rbu *pRbu;               \/* Pointer to rbu object (rbu target only) *\/$/;"	m	struct:rbu_file	file:
pRbuFd	testdocs/sqlite3.c	/^  rbu_file *pRbuFd;               \/* Fd for main db of dbRbu *\/$/;"	m	struct:sqlite3rbu	file:
pRbuUpdate	testdocs/sqlite3.c	/^  RbuUpdateStmt *pRbuUpdate;$/;"	m	struct:RbuObjIter	file:
pRbuVfs	testdocs/sqlite3.c	/^  rbu_vfs *pRbuVfs;               \/* Pointer to the rbu_vfs object *\/$/;"	m	struct:rbu_file	file:
pRead	testdocs/sqlite3.c	/^  char *pRead;                    \/* Cursor used to iterate through aDoclist *\/$/;"	m	struct:LcsIterator	file:
pReadParent	testdocs/sqlite3.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:
pReadRowid	testdocs/sqlite3.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:
pReader	testdocs/sqlite3.c	/^  PmaReader *pReader;             \/* Readr data from here after Rewind() *\/$/;"	m	struct:VdbeSorter	file:
pReader	testdocs/sqlite3.c	/^  sqlite3_blob *pReader;          \/* RO incr-blob open on %_data table *\/$/;"	m	struct:Fts5Index	file:
pReal	testdocs/sqlite3.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::p4union	file:
pReal	testdocs/sqlite3.c	/^  sqlite3_file *pReal;            \/* Underlying file handle *\/$/;"	m	struct:rbu_file	file:
pRealVfs	testdocs/sqlite3.c	/^  sqlite3_vfs *pRealVfs;          \/* Underlying VFS *\/$/;"	m	struct:rbu_vfs	file:
pRec	testdocs/sqlite3.c	/^  UnpackedRecord *pRec;     \/* Probe for stat4 (if required) *\/$/;"	m	struct:WhereLoopBuilder	file:
pRef	testdocs/sqlite3.c	/^  MemPage *pRef;          \/* Reference page *\/$/;"	m	struct:CellArray	file:
pReprepare	testdocs/sqlite3.c	/^  Vdbe *pReprepare;         \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	file:
pResult	testdocs/sqlite3.c	/^  void *pResult;           \/* Result of xTask *\/$/;"	m	struct:SQLiteThread	file:
pResultSet	testdocs/sqlite3.c	/^  ExprList *pResultSet;     \/* Result set of the query *\/$/;"	m	struct:WhereInfo	file:
pResultSet	testdocs/sqlite3.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	file:
pRight	testdocs/sqlite3.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	file:
pRight	testdocs/sqlite3.c	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr	file:
pRight	testdocs/sqlite3.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:
pRight	testdocs/sqlite3.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pRollbackArg	testdocs/sqlite3.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/$/;"	m	struct:sqlite3	file:
pRoot	testdocs/sqlite3.c	/^  Fts3Expr *pRoot;                \/* Root of NEAR\/AND cluster *\/$/;"	m	struct:Fts3TokenAndCost	file:
pRoot	testdocs/sqlite3.c	/^  Fts5ExprNode *pRoot;$/;"	m	struct:Fts5Expr	file:
pRowSet	testdocs/sqlite3.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:sqlite3_value::MemValue	file:
pSavepoint	testdocs/sqlite3.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	file:
pScan	testdocs/sqlite3.c	/^  Fts5HashEntry *pScan;           \/* Current ordered scan item *\/$/;"	m	struct:Fts5Hash	file:
pScanNext	testdocs/sqlite3.c	/^  Fts5HashEntry *pScanNext;       \/* Next entry in sorted order *\/$/;"	m	struct:Fts5HashEntry	file:
pSchema	testdocs/sqlite3.c	/^    Schema *pSchema;  \/* Schema to which this item is fixed *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSchema	testdocs/sqlite3.c	/^  Schema *pSchema;         \/* Schema containing this index *\/$/;"	m	struct:Index	file:
pSchema	testdocs/sqlite3.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	file:
pSchema	testdocs/sqlite3.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	file:
pSchema	testdocs/sqlite3.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	file:
pSchema	testdocs/sqlite3.c	/^  Schema *pSchema;    \/* Fix items to this schema *\/$/;"	m	struct:DbFixer	file:
pSchema	testdocs/sqlite3.c	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared	file:
pScopyFrom	testdocs/sqlite3.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:sqlite3_value	file:
pScratch	testdocs/sqlite3.c	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config	file:
pScratchEnd	testdocs/sqlite3.c	/^  void *pScratchEnd;$/;"	m	struct:Mem0Global	file:
pScratchFree	testdocs/sqlite3.c	/^  ScratchFreeslot *pScratchFree;$/;"	m	struct:Mem0Global	file:
pSeekStmt	testdocs/sqlite3.c	/^  sqlite3_stmt *pSeekStmt;        \/* Cache for fts3CursorSeekStmt() *\/$/;"	m	struct:Fts3Table	file:
pSeg	testdocs/sqlite3.c	/^  Fts5StructureSegment *pSeg;     \/* Segment to iterate through *\/$/;"	m	struct:Fts5SegIter	file:
pSegcsr	testdocs/sqlite3.c	/^  Fts3MultiSegReader *pSegcsr;    \/* Segment-reader for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pSegments	testdocs/sqlite3.c	/^  sqlite3_blob *pSegments;        \/* Blob handle open on %_segments table *\/$/;"	m	struct:Fts3Table	file:
pSelect	testdocs/sqlite3.c	/^    Select *pSelect;                \/* The definition of this CTE *\/$/;"	m	struct:With::Cte	file:
pSelect	testdocs/sqlite3.c	/^    Select *pSelect;     \/* EP_xIsSelect and op = IN, EXISTS, SELECT *\/$/;"	m	union:Expr::__anon11	file:
pSelect	testdocs/sqlite3.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSelect	testdocs/sqlite3.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	file:
pSelect	testdocs/sqlite3.c	/^  Select *pSelect;     \/* SELECT statement or RHS of INSERT INTO SELECT ... *\/$/;"	m	struct:TriggerStep	file:
pSelect	testdocs/sqlite3.c	/^  sqlite3_stmt *pSelect;          \/* SELECT statement *\/$/;"	m	struct:SessionApplyCtx	file:
pSelect	testdocs/sqlite3.c	/^  sqlite3_stmt *pSelect;          \/* Source data *\/$/;"	m	struct:RbuObjIter	file:
pSem	testdocs/sqlite3.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:
pSeqTab	testdocs/sqlite3.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	file:
pShm	testdocs/sqlite3.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:
pShm	testdocs/sqlite3.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:
pShmNode	testdocs/sqlite3.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:
pShmNode	testdocs/sqlite3.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:
pShmNode	testdocs/sqlite3.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:
pSnapshot	testdocs/sqlite3.c	/^  WalIndexHdr *pSnapshot;    \/* Start transaction here if not NULL *\/$/;"	m	struct:Wal	file:
pSortCsr	testdocs/sqlite3.c	/^  Fts5Cursor *pSortCsr;           \/* Sort data from this cursor *\/$/;"	m	struct:Fts5Table	file:
pSorter	testdocs/sqlite3.c	/^    VdbeSorter *pSorter;        \/* CURTYPE_SORTER. Sorter object *\/$/;"	m	union:VdbeCursor::__anon18	file:
pSorter	testdocs/sqlite3.c	/^  Fts5Sorter *pSorter;            \/* Sorter for "ORDER BY rank" queries *\/$/;"	m	struct:Fts5Cursor	file:
pSorter	testdocs/sqlite3.c	/^  VdbeSorter *pSorter;            \/* Sorter that owns this sub-task *\/$/;"	m	struct:SortSubtask	file:
pSpace	testdocs/sqlite3.c	/^  u8 *pSpace;          \/* Available memory *\/$/;"	m	struct:ReusableSpace	file:
pSqllogArg	testdocs/sqlite3.c	/^  void *pSqllogArg;$/;"	m	struct:Sqlite3Config	file:
pSrc	testdocs/sqlite3.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pSrc	testdocs/sqlite3.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	file:
pSrc	testdocs/sqlite3.c	/^  SrcList *pSrc;   \/* One particular FROM clause in a nested query *\/$/;"	m	struct:SrcCount	file:
pSrcCount	testdocs/sqlite3.c	/^    struct SrcCount *pSrcCount;               \/* Counting column references *\/$/;"	m	union:Walker::__anon17	typeref:struct:Walker::__anon17::SrcCount	file:
pSrcDb	testdocs/sqlite3.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:
pSrcList	testdocs/sqlite3.c	/^    SrcList *pSrcList;                        \/* FROM clause *\/$/;"	m	union:Walker::__anon17	file:
pSrcList	testdocs/sqlite3.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	file:
pStart	testdocs/sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of global page cache memory *\/$/;"	m	struct:PCacheGlobal	file:
pStart	testdocs/sqlite3.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	file:
pStmt	testdocs/sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Iterates through set of root pages *\/$/;"	m	struct:StatCursor	file:
pStmt	testdocs/sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor	file:
pStmt	testdocs/sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Statement holding lock on pIndex *\/$/;"	m	struct:Fts5VocabCursor	file:
pStmt	testdocs/sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Statement used to read %_content *\/$/;"	m	struct:Fts5Cursor	file:
pStmt	testdocs/sqlite3.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:
pStmt	testdocs/sqlite3.c	/^  sqlite3_stmt *pStmt;$/;"	m	struct:Fts5Sorter	file:
pStmt	testdocs/sqlite3.c	/^  sqlite3_stmt *pStmt;$/;"	m	struct:SessionDiffCtx	file:
pStorage	testdocs/sqlite3.c	/^  Fts5Storage *pStorage;          \/* Document store *\/$/;"	m	struct:Fts5Table	file:
pStorage	testdocs/sqlite3.c	/^  Fts5Storage *pStorage;$/;"	m	struct:Fts5InsertCtx	file:
pStress	testdocs/sqlite3.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:
pStruct	testdocs/sqlite3.c	/^  Fts5Structure *pStruct;         \/* Current db structure (or NULL) *\/$/;"	m	struct:Fts5Index	file:
pStruct	testdocs/sqlite3.c	/^  Fts5Structure *pStruct;         \/* Database structure for this iterator *\/$/;"	m	struct:Fts5Iter	file:
pSynced	testdocs/sqlite3.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:
pSynonym	testdocs/sqlite3.c	/^  Fts5ExprTerm *pSynonym;         \/* Pointer to first in list of synonyms *\/$/;"	m	struct:Fts5ExprTerm	file:
pTab	testdocs/sqlite3.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pTab	testdocs/sqlite3.c	/^    Table *pTab;           \/* Used when p4type is P4_TABLE *\/$/;"	m	union:VdbeOp::p4union	file:
pTab	testdocs/sqlite3.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	file:
pTab	testdocs/sqlite3.c	/^  Table *pTab;                    \/* Schema object being upated *\/$/;"	m	struct:PreUpdate	file:
pTab	testdocs/sqlite3.c	/^  Table *pTab;            \/* Table object *\/$/;"	m	struct:Incrblob	file:
pTab	testdocs/sqlite3.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr	file:
pTab	testdocs/sqlite3.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	file:
pTab	testdocs/sqlite3.c	/^  Table *pTab;        \/* The Table object to which the virtual table belongs *\/$/;"	m	struct:VtabCtx	file:
pTabList	testdocs/sqlite3.c	/^  SrcList *pTabList;        \/* List of tables in the join *\/$/;"	m	struct:WhereInfo	file:
pTabSchema	testdocs/sqlite3.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	file:
pTable	testdocs/sqlite3.c	/^  SessionTable *pTable;           \/* List of attached tables *\/$/;"	m	struct:sqlite3_session	file:
pTable	testdocs/sqlite3.c	/^  Table *pTable;           \/* The SQL table being indexed *\/$/;"	m	struct:Index	file:
pTail	testdocs/sqlite3.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:
pTargetFd	testdocs/sqlite3.c	/^  rbu_file *pTargetFd;            \/* File handle open on target db *\/$/;"	m	struct:sqlite3rbu	file:
pTask	testdocs/sqlite3.c	/^  SortSubtask *pTask;             \/* Task that owns this merger *\/$/;"	m	struct:IncrMerger	file:
pTask	testdocs/sqlite3.c	/^  SortSubtask *pTask;        \/* Used by this thread only *\/$/;"	m	struct:MergeEngine	file:
pTblIter	testdocs/sqlite3.c	/^  sqlite3_stmt *pTblIter;         \/* Iterate through tables *\/$/;"	m	struct:RbuObjIter	file:
pTerm	testdocs/sqlite3.c	/^  char *pTerm;$/;"	m	struct:Fts5TermsetEntry	file:
pTermset	testdocs/sqlite3.c	/^  Fts5Termset *pTermset;$/;"	m	struct:Fts5IntegrityCtx	file:
pThread	testdocs/sqlite3.c	/^  SQLiteThread *pThread;          \/* Background thread, if any *\/$/;"	m	struct:SortSubtask	file:
pTmpInsert	testdocs/sqlite3.c	/^  sqlite3_stmt *pTmpInsert;       \/* Insert into rbu_tmp_$zDataTbl *\/$/;"	m	struct:RbuObjIter	file:
pTmpSpace	testdocs/sqlite3.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:
pTmpSpace	testdocs/sqlite3.c	/^  u8 *pTmpSpace;        \/* Temp space sufficient to hold a single cell *\/$/;"	m	struct:BtShared	file:
pTok	testdocs/sqlite3.c	/^  Fts5Tokenizer *pTok;$/;"	m	struct:Fts5Config	file:
pTok	testdocs/sqlite3.c	/^  Fts5TokenizerModule *pTok;      \/* First in list of all tokenizer modules *\/$/;"	m	struct:Fts5Global	file:
pTok	testdocs/sqlite3.c	/^  sqlite3_tokenizer *pTok;$/;"	m	struct:Fts3tokTable	file:
pTokApi	testdocs/sqlite3.c	/^  fts5_tokenizer *pTokApi;$/;"	m	struct:Fts5Config	file:
pToken	testdocs/sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* Pointer to corresponding expr token *\/$/;"	m	struct:Fts3DeferredToken	file:
pToken	testdocs/sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* The token itself *\/$/;"	m	struct:Fts3TokenAndCost	file:
pToken	testdocs/sqlite3.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pTokenizer	testdocs/sqlite3.c	/^  Fts5Tokenizer *pTokenizer;      \/* Parent tokenizer instance *\/$/;"	m	struct:PorterTokenizer	file:
pTokenizer	testdocs/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor	file:
pTokenizer	testdocs/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:
pTokenizer	testdocs/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table	file:
pToplevel	testdocs/sqlite3.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	file:
pTraceArg	testdocs/sqlite3.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	file:
pTree	testdocs/sqlite3.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:
pTrig	testdocs/sqlite3.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	file:
pTrigger	testdocs/sqlite3.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	file:
pTrigger	testdocs/sqlite3.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	file:
pTrigger	testdocs/sqlite3.c	/^ #undef pTrigger$/;"	d	file:
pTriggerPrg	testdocs/sqlite3.c	/^  TriggerPrg *pTriggerPrg;  \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	file:
pTriggerTab	testdocs/sqlite3.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	file:
pUnlockArg	testdocs/sqlite3.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	file:
pUnlockConnection	testdocs/sqlite3.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	file:
pUnpacked	testdocs/sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Space to unpack a record *\/$/;"	m	struct:SortSubtask	file:
pUnpacked	testdocs/sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Unpacked version of aRecord[] *\/$/;"	m	struct:PreUpdate	file:
pUnpacked	testdocs/sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Used by VdbeSorterCompare() *\/$/;"	m	struct:VdbeSorter	file:
pUnused	testdocs/sqlite3.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:
pUnused	testdocs/sqlite3.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:
pUpdate	testdocs/sqlite3.c	/^  sqlite3_stmt *pUpdate;          \/* Last update statement (or NULL) *\/$/;"	m	struct:RbuUpdateStmt	file:
pUpdate	testdocs/sqlite3.c	/^  sqlite3_stmt *pUpdate;          \/* UPDATE statement *\/$/;"	m	struct:SessionApplyCtx	file:
pUpdateArg	testdocs/sqlite3.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	file:
pUser	testdocs/sqlite3.c	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
pUser	testdocs/sqlite3.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pUser	testdocs/sqlite3.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	file:
pUserData	testdocs/sqlite3.c	/^  void *pUserData;                \/* User pointer passed to xCreate() *\/$/;"	m	struct:Fts5TokenizerModule	file:
pUserData	testdocs/sqlite3.c	/^  void *pUserData;                \/* User-data pointer *\/$/;"	m	struct:Fts5Auxiliary	file:
pUserData	testdocs/sqlite3.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	file:
pUserData	testdocs/sqlite3.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	file:
pUsing	testdocs/sqlite3.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pVCur	testdocs/sqlite3.c	/^    sqlite3_vtab_cursor *pVCur; \/* CURTYPE_VTAB.   Vtab cursor *\/$/;"	m	union:VdbeCursor::__anon18	file:
pVList	testdocs/sqlite3.c	/^  VList *pVList;            \/* Mapping between variable names and numbers *\/$/;"	m	struct:Parse	file:
pVList	testdocs/sqlite3.c	/^  VList *pVList;          \/* Name of variables *\/$/;"	m	struct:Vdbe	file:
pVTable	testdocs/sqlite3.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	file:
pVTable	testdocs/sqlite3.c	/^  VTable *pVTable;    \/* The virtual table being constructed *\/$/;"	m	struct:VtabCtx	file:
pVdbe	testdocs/sqlite3.c	/^  Vdbe *pVdbe;            \/* The VM that owns this context *\/$/;"	m	struct:sqlite3_context	file:
pVdbe	testdocs/sqlite3.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	file:
pVdbe	testdocs/sqlite3.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe	file:
pVdbeBranchArg	testdocs/sqlite3.c	/^  void *pVdbeBranchArg;                                     \/* 1st argument *\/$/;"	m	struct:Sqlite3Config	file:
pVfs	testdocs/sqlite3.c	/^  sqlite3_vfs *pVfs;                  \/* The VFS that created this unixFile *\/$/;"	m	struct:unixFile	file:
pVfs	testdocs/sqlite3.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:MemJournal	file:
pVfs	testdocs/sqlite3.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	file:
pVfs	testdocs/sqlite3.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:
pVfs	testdocs/sqlite3.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:
pVfs	testdocs/sqlite3.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:
pVtab	testdocs/sqlite3.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::p4union	file:
pVtab	testdocs/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	file:
pVtab	testdocs/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	file:
pVtabCtx	testdocs/sqlite3.c	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3	file:
pWC	testdocs/sqlite3.c	/^  WhereClause *pWC;          \/* WhereClause currently being scanned *\/$/;"	m	struct:WhereScan	file:
pWC	testdocs/sqlite3.c	/^  WhereClause *pWC;         \/* WHERE clause terms *\/$/;"	m	struct:WhereLoopBuilder	file:
pWC	testdocs/sqlite3.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:
pWInfo	testdocs/sqlite3.c	/^  WhereInfo *pWInfo;        \/* Information about this WHERE *\/$/;"	m	struct:WhereLoopBuilder	file:
pWInfo	testdocs/sqlite3.c	/^  WhereInfo *pWInfo;       \/* WHERE clause processing context *\/$/;"	m	struct:WhereClause	file:
pWLoop	testdocs/sqlite3.c	/^  struct WhereLoop *pWLoop;  \/* The selected WhereLoop object *\/$/;"	m	struct:WhereLevel	typeref:struct:WhereLevel::WhereLoop	file:
pWal	testdocs/sqlite3.c	/^  Wal *pWal;                   \/* The complete WAL information *\/$/;"	m	struct:WalWriter	file:
pWal	testdocs/sqlite3.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:
pWalArg	testdocs/sqlite3.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	file:
pWalFd	testdocs/sqlite3.c	/^  rbu_file *pWalFd;               \/* Wal file descriptor for this main db *\/$/;"	m	struct:rbu_file	file:
pWalFd	testdocs/sqlite3.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:
pWhen	testdocs/sqlite3.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	file:
pWhere	testdocs/sqlite3.c	/^  Expr *pWhere;             \/* The complete WHERE clause *\/$/;"	m	struct:WhereInfo	file:
pWhere	testdocs/sqlite3.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	file:
pWhere	testdocs/sqlite3.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	file:
pWith	testdocs/sqlite3.c	/^  With *pWith;              \/* Current WITH clause, or NULL *\/$/;"	m	struct:Parse	file:
pWith	testdocs/sqlite3.c	/^  With *pWith;           \/* WITH clause attached to this select. Or NULL. *\/$/;"	m	struct:Select	file:
pWithToFree	testdocs/sqlite3.c	/^  With *pWithToFree;        \/* Free this WITH object at the end of the parse *\/$/;"	m	struct:Parse	file:
pWriteNode	testdocs/sqlite3.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:
pWriteParent	testdocs/sqlite3.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:
pWriteRowid	testdocs/sqlite3.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:
pWriter	testdocs/sqlite3.c	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared	file:
pWriter	testdocs/sqlite3.c	/^  sqlite3_stmt *pWriter;          \/* "INSERT ... %_data VALUES(?,?)" *\/$/;"	m	struct:Fts5Index	file:
pZombieTab	testdocs/sqlite3.c	/^  Table *pZombieTab;        \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	file:
padToSectorBoundary	testdocs/sqlite3.c	/^  u8 padToSectorBoundary;    \/* Pad transactions out to the next sector *\/$/;"	m	struct:Wal	file:
page	testdocs/sqlite3.c	/^  sqlite3_pcache_page page;      \/* Base class. Must be first. pBuf & pExtra *\/$/;"	m	struct:PgHdr1	file:
pageFindSlot	testdocs/sqlite3.c	/^static u8 *pageFindSlot(MemPage *pPg, int nByte, int *pRc){$/;"	f	file:
pageFreeArray	testdocs/sqlite3.c	/^static int pageFreeArray($/;"	f	file:
pageHash	testdocs/sqlite3.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	file:
pageInJournal	testdocs/sqlite3.c	/^static int pageInJournal(Pager *pPager, PgHdr *pPg){$/;"	f	file:
pageInsertArray	testdocs/sqlite3.c	/^static int pageInsertArray($/;"	f	file:
pageReinit	testdocs/sqlite3.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:
pageSize	testdocs/sqlite3.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:
pageSize	testdocs/sqlite3.c	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared	file:
pagealign	buf.c	/^static size_t pagealign(size_t sz) {$/;"	f	file:
pagerAcquireMapPage	testdocs/sqlite3.c	/^static int pagerAcquireMapPage($/;"	f	file:
pagerAddPageToRollbackJournal	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int pagerAddPageToRollbackJournal(PgHdr *pPg){$/;"	f	file:
pagerBeginReadTransaction	testdocs/sqlite3.c	/^# define pagerBeginReadTransaction(/;"	d	file:
pagerBeginReadTransaction	testdocs/sqlite3.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:
pagerExclusiveLock	testdocs/sqlite3.c	/^static int pagerExclusiveLock(Pager *pPager){$/;"	f	file:
pagerFixMaplimit	testdocs/sqlite3.c	/^static void pagerFixMaplimit(Pager *pPager){$/;"	f	file:
pagerFlushOnCommit	testdocs/sqlite3.c	/^static int pagerFlushOnCommit(Pager *pPager, int bCommit){$/;"	f	file:
pagerFreeMapHdrs	testdocs/sqlite3.c	/^static void pagerFreeMapHdrs(Pager *pPager){$/;"	f	file:
pagerLockDb	testdocs/sqlite3.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerOpenSavepoint	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int pagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f	file:
pagerOpenWal	testdocs/sqlite3.c	/^static int pagerOpenWal(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	testdocs/sqlite3.c	/^# define pagerOpenWalIfPresent(/;"	d	file:
pagerOpenWalIfPresent	testdocs/sqlite3.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:
pagerOpentemp	testdocs/sqlite3.c	/^static int pagerOpentemp($/;"	f	file:
pagerPagecount	testdocs/sqlite3.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:
pagerPlaybackSavepoint	testdocs/sqlite3.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:
pagerReleaseMapPage	testdocs/sqlite3.c	/^static void pagerReleaseMapPage(PgHdr *pPg){$/;"	f	file:
pagerReportSize	testdocs/sqlite3.c	/^# define pagerReportSize(/;"	d	file:
pagerReportSize	testdocs/sqlite3.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:
pagerRollbackWal	testdocs/sqlite3.c	/^# define pagerRollbackWal(/;"	d	file:
pagerRollbackWal	testdocs/sqlite3.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:
pagerStress	testdocs/sqlite3.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:
pagerSyncHotJournal	testdocs/sqlite3.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:
pagerUndoCallback	testdocs/sqlite3.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:
pagerUnlockAndRollback	testdocs/sqlite3.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:
pagerUnlockDb	testdocs/sqlite3.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerUnlockIfUnused	testdocs/sqlite3.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:
pagerUseWal	testdocs/sqlite3.c	/^# define pagerUseWal(/;"	d	file:
pagerWalFrames	testdocs/sqlite3.c	/^# define pagerWalFrames(/;"	d	file:
pagerWalFrames	testdocs/sqlite3.c	/^static int pagerWalFrames($/;"	f	file:
pagerWriteLargeSector	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int pagerWriteLargeSector(PgHdr *pPg){$/;"	f	file:
pager_cksum	testdocs/sqlite3.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:
pager_datahash	testdocs/sqlite3.c	/^#define pager_datahash(/;"	d	file:
pager_datahash	testdocs/sqlite3.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:
pager_delmaster	testdocs/sqlite3.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:
pager_end_transaction	testdocs/sqlite3.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster, int bCommit){$/;"	f	file:
pager_error	testdocs/sqlite3.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:
pager_incr_changecounter	testdocs/sqlite3.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:
pager_open_journal	testdocs/sqlite3.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:
pager_pagehash	testdocs/sqlite3.c	/^#define pager_pagehash(/;"	d	file:
pager_pagehash	testdocs/sqlite3.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:
pager_playback	testdocs/sqlite3.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:
pager_playback_one_page	testdocs/sqlite3.c	/^static int pager_playback_one_page($/;"	f	file:
pager_reset	testdocs/sqlite3.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:
pager_set_pagehash	testdocs/sqlite3.c	/^#define pager_set_pagehash(/;"	d	file:
pager_set_pagehash	testdocs/sqlite3.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:
pager_truncate	testdocs/sqlite3.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:
pager_unlock	testdocs/sqlite3.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:
pager_wait_on_lock	testdocs/sqlite3.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:
pager_write	testdocs/sqlite3.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:
pager_write_changecounter	testdocs/sqlite3.c	/^static void pager_write_changecounter(PgHdr *pPg){$/;"	f	file:
pager_write_pagelist	testdocs/sqlite3.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:
parentWrite	testdocs/sqlite3.c	/^static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){$/;"	f	file:
parseDateOrTime	testdocs/sqlite3.c	/^static int parseDateOrTime($/;"	f	file:
parseHhMmSs	testdocs/sqlite3.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:
parseModifier	testdocs/sqlite3.c	/^static int parseModifier($/;"	f	file:
parseTimezone	testdocs/sqlite3.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:
parseYyyyMmDd	testdocs/sqlite3.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:
parserAddExprIdListTerm	testdocs/sqlite3.c	/^  static ExprList *parserAddExprIdListTerm($/;"	f	file:
parserDoubleLinkSelect	testdocs/sqlite3.c	/^  static void parserDoubleLinkSelect(Parse *pParse, Select *p){$/;"	f	file:
path	edit.h	/^    char* path;           \/* the path to the open file *\/$/;"	m	struct:__anon5
patternCompare	testdocs/sqlite3.c	/^static int patternCompare($/;"	f	file:
payloadSize	testdocs/sqlite3.c	/^  u32 payloadSize;        \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	file:
pc	testdocs/sqlite3.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	file:
pc	testdocs/sqlite3.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	file:
pcache1	testdocs/sqlite3.c	/^#define pcache1 /;"	d	file:
pcache1Alloc	testdocs/sqlite3.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:
pcache1AllocPage	testdocs/sqlite3.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache, int benignMalloc){$/;"	f	file:
pcache1Cachesize	testdocs/sqlite3.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:
pcache1Create	testdocs/sqlite3.c	/^static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){$/;"	f	file:
pcache1Destroy	testdocs/sqlite3.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:
pcache1EnforceMaxPage	testdocs/sqlite3.c	/^static void pcache1EnforceMaxPage(PCache1 *pCache){$/;"	f	file:
pcache1EnterMutex	testdocs/sqlite3.c	/^# define pcache1EnterMutex(/;"	d	file:
pcache1Fetch	testdocs/sqlite3.c	/^static sqlite3_pcache_page *pcache1Fetch($/;"	f	file:
pcache1FetchNoMutex	testdocs/sqlite3.c	/^static PgHdr1 *pcache1FetchNoMutex($/;"	f	file:
pcache1FetchStage2	testdocs/sqlite3.c	/^static SQLITE_NOINLINE PgHdr1 *pcache1FetchStage2($/;"	f	file:
pcache1FetchWithMutex	testdocs/sqlite3.c	/^static PgHdr1 *pcache1FetchWithMutex($/;"	f	file:
pcache1Free	testdocs/sqlite3.c	/^static void pcache1Free(void *p){$/;"	f	file:
pcache1FreePage	testdocs/sqlite3.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:
pcache1Init	testdocs/sqlite3.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:
pcache1InitBulk	testdocs/sqlite3.c	/^static int pcache1InitBulk(PCache1 *pCache){$/;"	f	file:
pcache1LeaveMutex	testdocs/sqlite3.c	/^# define pcache1LeaveMutex(/;"	d	file:
pcache1MemSize	testdocs/sqlite3.c	/^static int pcache1MemSize(void *p){$/;"	f	file:
pcache1Pagecount	testdocs/sqlite3.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:
pcache1PinPage	testdocs/sqlite3.c	/^static PgHdr1 *pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:
pcache1Rekey	testdocs/sqlite3.c	/^static void pcache1Rekey($/;"	f	file:
pcache1RemoveFromHash	testdocs/sqlite3.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage, int freeFlag){$/;"	f	file:
pcache1ResizeHash	testdocs/sqlite3.c	/^static void pcache1ResizeHash(PCache1 *p){$/;"	f	file:
pcache1Shrink	testdocs/sqlite3.c	/^static void pcache1Shrink(sqlite3_pcache *p){$/;"	f	file:
pcache1Shutdown	testdocs/sqlite3.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:
pcache1Truncate	testdocs/sqlite3.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:
pcache1TruncateUnsafe	testdocs/sqlite3.c	/^static void pcache1TruncateUnsafe($/;"	f	file:
pcache1UnderMemoryPressure	testdocs/sqlite3.c	/^static int pcache1UnderMemoryPressure(PCache1 *pCache){$/;"	f	file:
pcache1Unpin	testdocs/sqlite3.c	/^static void pcache1Unpin($/;"	f	file:
pcache1_g	testdocs/sqlite3.c	/^} pcache1_g;$/;"	v	typeref:struct:PCacheGlobal	file:
pcache2	testdocs/sqlite3.c	/^  sqlite3_pcache_methods2 pcache2;  \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	file:
pcacheDump	testdocs/sqlite3.c	/^  void pcacheDump(PCache *pCache){$/;"	f
pcacheDump	testdocs/sqlite3.c	/^# define pcacheDump(/;"	d	file:
pcacheFetchFinishWithInit	testdocs/sqlite3.c	/^static SQLITE_NOINLINE PgHdr *pcacheFetchFinishWithInit($/;"	f	file:
pcacheManageDirtyList	testdocs/sqlite3.c	/^static void pcacheManageDirtyList(PgHdr *pPage, u8 addRemove){$/;"	f	file:
pcacheMergeDirtyList	testdocs/sqlite3.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:
pcacheSortDirtyList	testdocs/sqlite3.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:
pcacheTrace	testdocs/sqlite3.c	/^# define pcacheTrace(/;"	d	file:
pcacheUnpin	testdocs/sqlite3.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:
pgidx	testdocs/sqlite3.c	/^  Fts5Buffer pgidx;               \/* Buffer containing page-index *\/$/;"	m	struct:Fts5PageWriter	file:
pgno	testdocs/sqlite3.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	file:
pgno	testdocs/sqlite3.c	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage	file:
pgno	testdocs/sqlite3.c	/^  int pgno;                       \/* Page number for this page *\/$/;"	m	struct:Fts5DlidxWriter	file:
pgno	testdocs/sqlite3.c	/^  int pgno;                       \/* Page number for this page *\/$/;"	m	struct:Fts5PageWriter	file:
pgnoFirst	testdocs/sqlite3.c	/^  int pgnoFirst;                  \/* First leaf page number in segment *\/$/;"	m	struct:Fts5StructureSegment	file:
pgnoLast	testdocs/sqlite3.c	/^  int pgnoLast;                   \/* Last leaf page number in segment *\/$/;"	m	struct:Fts5StructureSegment	file:
pgnoRoot	testdocs/sqlite3.c	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor	file:
pgnoRoot	testdocs/sqlite3.c	/^  Pgno pgnoRoot;          \/* Root page of the open btree cursor *\/$/;"	m	struct:VdbeCursor	file:
pgsz	testdocs/sqlite3.c	/^  int pgsz;                       \/* Approximate page size used in %_data *\/$/;"	m	struct:Fts5Config	file:
pgsz	testdocs/sqlite3.c	/^  int pgsz;                       \/* Main database page size *\/$/;"	m	struct:VdbeSorter	file:
pgsz	testdocs/sqlite3.c	/^  int pgsz;$/;"	m	struct:sqlite3rbu	file:
pnByte	testdocs/sqlite3.c	/^  int *pnByte;                    \/* Pointer to bytes counter *\/$/;"	m	struct:Fts5Hash	file:
pnBytesFreed	testdocs/sqlite3.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	file:
populateCellCache	testdocs/sqlite3.c	/^static void populateCellCache(CellArray *p, int idx, int N){$/;"	f	file:
porterClose	testdocs/sqlite3.c	/^static int porterClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
porterCreate	testdocs/sqlite3.c	/^static int porterCreate($/;"	f	file:
porterDestroy	testdocs/sqlite3.c	/^static int porterDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
porterIdChar	testdocs/sqlite3.c	/^static const char porterIdChar[] = {$/;"	v	file:
porterNext	testdocs/sqlite3.c	/^static int porterNext($/;"	f	file:
porterOpen	testdocs/sqlite3.c	/^static int porterOpen($/;"	f	file:
porterTokenizerModule	testdocs/sqlite3.c	/^static const sqlite3_tokenizer_module porterTokenizerModule = {$/;"	v	file:
porter_stemmer	testdocs/sqlite3.c	/^static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
porter_tokenizer	testdocs/sqlite3.c	/^typedef struct porter_tokenizer {$/;"	s	file:
porter_tokenizer	testdocs/sqlite3.c	/^} porter_tokenizer;$/;"	t	typeref:struct:porter_tokenizer	file:
porter_tokenizer_cursor	testdocs/sqlite3.c	/^typedef struct porter_tokenizer_cursor {$/;"	s	file:
porter_tokenizer_cursor	testdocs/sqlite3.c	/^} porter_tokenizer_cursor;$/;"	t	typeref:struct:porter_tokenizer_cursor	file:
posixOpen	testdocs/sqlite3.c	/^static int posixOpen(const char *zFile, int flags, int mode){$/;"	f	file:
posixUnlock	testdocs/sqlite3.c	/^static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:
poslist	testdocs/sqlite3.c	/^  Fts5Buffer poslist;             \/* Buffer containing current poslist *\/$/;"	m	struct:Fts5Iter	file:
poslist	testdocs/sqlite3.c	/^  Fts5Buffer poslist;             \/* Current position list *\/$/;"	m	struct:Fts5ExprPhrase	file:
ppNextElem	testdocs/sqlite3.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:
ppRec	testdocs/sqlite3.c	/^  UnpackedRecord **ppRec;$/;"	m	struct:ValueNewStat4Ctx	file:
ppWhere	testdocs/sqlite3.c	/^  Expr **ppWhere;$/;"	m	struct:HavingToWhereCtx	file:
pragCName	testdocs/sqlite3.c	/^static const char *const pragCName[] = {$/;"	v	file:
pragmaLocate	testdocs/sqlite3.c	/^static const PragmaName *pragmaLocate(const char *zName){$/;"	f	file:
pragmaVtabBestIndex	testdocs/sqlite3.c	/^static int pragmaVtabBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
pragmaVtabClose	testdocs/sqlite3.c	/^static int pragmaVtabClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
pragmaVtabColumn	testdocs/sqlite3.c	/^static int pragmaVtabColumn($/;"	f	file:
pragmaVtabConnect	testdocs/sqlite3.c	/^static int pragmaVtabConnect($/;"	f	file:
pragmaVtabCursorClear	testdocs/sqlite3.c	/^static void pragmaVtabCursorClear(PragmaVtabCursor *pCsr){$/;"	f	file:
pragmaVtabDisconnect	testdocs/sqlite3.c	/^static int pragmaVtabDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
pragmaVtabEof	testdocs/sqlite3.c	/^static int pragmaVtabEof(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
pragmaVtabFilter	testdocs/sqlite3.c	/^static int pragmaVtabFilter($/;"	f	file:
pragmaVtabModule	testdocs/sqlite3.c	/^static const sqlite3_module pragmaVtabModule = {$/;"	v	file:
pragmaVtabNext	testdocs/sqlite3.c	/^static int pragmaVtabNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
pragmaVtabOpen	testdocs/sqlite3.c	/^static int pragmaVtabOpen(sqlite3_vtab *pVtab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
pragmaVtabRowid	testdocs/sqlite3.c	/^static int pragmaVtabRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *p){$/;"	f	file:
prefix	testdocs/sqlite3.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:
prepare	testdocs/sqlite3.c	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16	testdocs/sqlite3.c	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16_v2	testdocs/sqlite3.c	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepareAndCollectError	testdocs/sqlite3.c	/^static int prepareAndCollectError($/;"	f	file:
prepareFreeAndCollectError	testdocs/sqlite3.c	/^static int prepareFreeAndCollectError($/;"	f	file:
prepare_v2	testdocs/sqlite3.c	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prereq	testdocs/sqlite3.c	/^  Bitmask prereq;       \/* Bitmask of other loops that must run first *\/$/;"	m	struct:WhereLoop	file:
prereq	testdocs/sqlite3.c	/^  Bitmask prereq;     \/* Prerequisites *\/$/;"	m	struct:WhereOrCost	file:
prereqAll	testdocs/sqlite3.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:
prereqRight	testdocs/sqlite3.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:
prev	testdocs/sqlite3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon21::__anon23	file:
prev	testdocs/sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
prev	testdocs/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
prev	testdocs/sqlite3.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:
prevSize	testdocs/sqlite3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon21::__anon22	file:
print_error	stdc.h	/^#define print_error(/;"	d
print_pager_state	testdocs/sqlite3.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:
printfFlags	testdocs/sqlite3.c	/^  u8   printfFlags;    \/* SQLITE_PRINTF flags below *\/$/;"	m	struct:StrAccum	file:
printfFunc	testdocs/sqlite3.c	/^static void printfFunc($/;"	f	file:
profile	testdocs/sqlite3.c	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	file:
progress_handler	testdocs/sqlite3.c	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
proxyBreakConchLock	testdocs/sqlite3.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:
proxyCheckReservedLock	testdocs/sqlite3.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
proxyClose	testdocs/sqlite3.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:
proxyConchLock	testdocs/sqlite3.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:
proxyCreateConchPathname	testdocs/sqlite3.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:
proxyCreateLockPath	testdocs/sqlite3.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:
proxyCreateUnixFile	testdocs/sqlite3.c	/^static int proxyCreateUnixFile($/;"	f	file:
proxyFileControl	testdocs/sqlite3.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
proxyGetDbPathForUnixFile	testdocs/sqlite3.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:
proxyGetHostID	testdocs/sqlite3.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:
proxyGetLockPath	testdocs/sqlite3.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:
proxyLock	testdocs/sqlite3.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
proxyLockingContext	testdocs/sqlite3.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	testdocs/sqlite3.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	typeref:struct:proxyLockingContext	file:
proxyReleaseConch	testdocs/sqlite3.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:
proxyTakeConch	testdocs/sqlite3.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:
proxyTransformUnixFile	testdocs/sqlite3.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:
proxyUnlock	testdocs/sqlite3.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
pseudoTableReg	testdocs/sqlite3.c	/^    int pseudoTableReg;         \/* CURTYPE_PSEUDO. Reg holding content. *\/$/;"	m	union:VdbeCursor::__anon18	file:
pthreadMutexAlloc	testdocs/sqlite3.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:
pthreadMutexEnd	testdocs/sqlite3.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexEnter	testdocs/sqlite3.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexFree	testdocs/sqlite3.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexHeld	testdocs/sqlite3.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexInit	testdocs/sqlite3.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexLeave	testdocs/sqlite3.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexNotheld	testdocs/sqlite3.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexTry	testdocs/sqlite3.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:
ptrmapGet	testdocs/sqlite3.c	/^  #define ptrmapGet(/;"	d	file:
ptrmapGet	testdocs/sqlite3.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:
ptrmapPageno	testdocs/sqlite3.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:
ptrmapPut	testdocs/sqlite3.c	/^  #define ptrmapPut(/;"	d	file:
ptrmapPut	testdocs/sqlite3.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:
ptrmapPutOvflPtr	testdocs/sqlite3.c	/^  #define ptrmapPutOvflPtr(/;"	d	file:
ptrmapPutOvflPtr	testdocs/sqlite3.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:
pushDownWhereTerms	testdocs/sqlite3.c	/^static int pushDownWhereTerms($/;"	f	file:
pushOntoSorter	testdocs/sqlite3.c	/^static void pushOntoSorter($/;"	f	file:
put2byte	testdocs/sqlite3.c	/^#define put2byte(/;"	d	file:
put32bits	testdocs/sqlite3.c	/^#define put32bits(/;"	d	file:
put4byte	testdocs/sqlite3.c	/^#define put4byte /;"	d	file:
putVarint	testdocs/sqlite3.c	/^#define putVarint /;"	d	file:
putVarint32	testdocs/sqlite3.c	/^#define putVarint32(/;"	d	file:
putVarint64	testdocs/sqlite3.c	/^static int SQLITE_NOINLINE putVarint64(unsigned char *p, u64 v){$/;"	f	file:
pzErrMsg	testdocs/sqlite3.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon16	file:
pzErrmsg	testdocs/sqlite3.c	/^  char **pzErrmsg;$/;"	m	struct:Fts5Config	file:
querySharedCacheTableLock	testdocs/sqlite3.c	/^  #define querySharedCacheTableLock(/;"	d	file:
querySharedCacheTableLock	testdocs/sqlite3.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:
queryTestTokenizer	testdocs/sqlite3.c	/^static int queryTestTokenizer($/;"	f	file:
queryTokenizer	testdocs/sqlite3.c	/^int queryTokenizer($/;"	f	file:
quoteFunc	testdocs/sqlite3.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
r	testdocs/sqlite3.c	/^    double r;           \/* Real value used when MEM_Real is set in flags *\/$/;"	m	union:sqlite3_value::MemValue	file:
r1	testdocs/sqlite3.c	/^  i8 r1;              \/* Value to return if (lhs > rhs) *\/$/;"	m	struct:UnpackedRecord	file:
r2	testdocs/sqlite3.c	/^  i8 r2;              \/* Value to return if (rhs < lhs) *\/$/;"	m	struct:UnpackedRecord	file:
rCost	testdocs/sqlite3.c	/^  LogEst rCost;         \/* Total cost of this path *\/$/;"	m	struct:WherePath	file:
rLimit	testdocs/sqlite3.c	/^  double rLimit;      \/* Maximum NNN value for this transform *\/$/;"	m	struct:__anon19	file:
rParentScore	testdocs/sqlite3.c	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
rRun	testdocs/sqlite3.c	/^  LogEst rRun;          \/* Cost of running each loop *\/$/;"	m	struct:WhereLoop	file:
rRun	testdocs/sqlite3.c	/^  LogEst rRun;        \/* Cost of running this subquery *\/$/;"	m	struct:WhereOrCost	file:
rScore	testdocs/sqlite3.c	/^  RtreeDValue rScore;    \/* The score for this node.  Smallest goes first. *\/$/;"	m	struct:RtreeSearchPoint	file:
rScore	testdocs/sqlite3.c	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
rSetup	testdocs/sqlite3.c	/^  LogEst rSetup;        \/* One-time setup cost (ex: create transient index) *\/$/;"	m	struct:WhereLoop	file:
rSum	testdocs/sqlite3.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:
rUnsorted	testdocs/sqlite3.c	/^  LogEst rUnsorted;     \/* Total cost of this path ignoring sorting costs *\/$/;"	m	struct:WherePath	file:
rValue	testdocs/sqlite3.c	/^    RtreeDValue rValue;             \/* Constraint value. *\/$/;"	m	union:RtreeConstraint::__anon36	file:
rXform	testdocs/sqlite3.c	/^  double rXform;      \/* Constant used for this transform *\/$/;"	m	struct:__anon19	file:
randomBlob	testdocs/sqlite3.c	/^static void randomBlob($/;"	f	file:
randomFill	testdocs/sqlite3.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:
randomFunc	testdocs/sqlite3.c	/^static void randomFunc($/;"	f	file:
randomness	testdocs/sqlite3.c	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	file:
randomnessPid	testdocs/sqlite3.c	/^static pid_t randomnessPid = 0;$/;"	v	file:
rawS	testdocs/sqlite3.c	/^  char rawS;          \/* Raw numeric value stored in s *\/$/;"	m	struct:DateTime	file:
rbuAllocateIterArrays	testdocs/sqlite3.c	/^static void rbuAllocateIterArrays(sqlite3rbu *p, RbuObjIter *pIter, int nCol){$/;"	f	file:
rbuBadControlError	testdocs/sqlite3.c	/^static void rbuBadControlError(sqlite3rbu *p){$/;"	f	file:
rbuCaptureDbWrite	testdocs/sqlite3.c	/^static int rbuCaptureDbWrite(sqlite3rbu *pRbu, i64 iOff){$/;"	f	file:
rbuCaptureWalRead	testdocs/sqlite3.c	/^static int rbuCaptureWalRead(sqlite3rbu *pRbu, i64 iOff, int iAmt){$/;"	f	file:
rbuCheckpointFrame	testdocs/sqlite3.c	/^static void rbuCheckpointFrame(sqlite3rbu *p, RbuFrame *pFrame){$/;"	f	file:
rbuCopyPragma	testdocs/sqlite3.c	/^static void rbuCopyPragma(sqlite3rbu *p, const char *zPragma){$/;"	f	file:
rbuCreateImposterTable	testdocs/sqlite3.c	/^static void rbuCreateImposterTable(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuCreateImposterTable2	testdocs/sqlite3.c	/^static void rbuCreateImposterTable2(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuCreateTargetSchema	testdocs/sqlite3.c	/^static void rbuCreateTargetSchema(sqlite3rbu *p){$/;"	f	file:
rbuCreateVfs	testdocs/sqlite3.c	/^static void rbuCreateVfs(sqlite3rbu *p){$/;"	f	file:
rbuDeleteOalFile	testdocs/sqlite3.c	/^static void rbuDeleteOalFile(sqlite3rbu *p){$/;"	f	file:
rbuDeleteVfs	testdocs/sqlite3.c	/^static void rbuDeleteVfs(sqlite3rbu *p){$/;"	f	file:
rbuDeltaApply	testdocs/sqlite3.c	/^static int rbuDeltaApply($/;"	f	file:
rbuDeltaChecksum	testdocs/sqlite3.c	/^static unsigned int rbuDeltaChecksum(const char *zIn, size_t N){$/;"	f	file:
rbuDeltaGetInt	testdocs/sqlite3.c	/^static unsigned int rbuDeltaGetInt(const char **pz, int *pLen){$/;"	f	file:
rbuDeltaOutputSize	testdocs/sqlite3.c	/^static int rbuDeltaOutputSize(const char *zDelta, int lenDelta){$/;"	f	file:
rbuEditErrmsg	testdocs/sqlite3.c	/^static void rbuEditErrmsg(sqlite3rbu *p){$/;"	f	file:
rbuFileSuffix3	testdocs/sqlite3.c	/^static void rbuFileSuffix3(const char *zBase, char *z){$/;"	f	file:
rbuFinalize	testdocs/sqlite3.c	/^static void rbuFinalize(sqlite3rbu *p, sqlite3_stmt *pStmt){$/;"	f	file:
rbuFindMaindb	testdocs/sqlite3.c	/^static rbu_file *rbuFindMaindb(rbu_vfs *pRbuVfs, const char *zWal){$/;"	f	file:
rbuFossilDeltaFunc	testdocs/sqlite3.c	/^static void rbuFossilDeltaFunc($/;"	f	file:
rbuFreeState	testdocs/sqlite3.c	/^static void rbuFreeState(RbuState *p){$/;"	f	file:
rbuGetU32	testdocs/sqlite3.c	/^static u32 rbuGetU32(u8 *aBuf){$/;"	f	file:
rbuGetUpdateStmt	testdocs/sqlite3.c	/^static int rbuGetUpdateStmt($/;"	f	file:
rbuIncrSchemaCookie	testdocs/sqlite3.c	/^static void rbuIncrSchemaCookie(sqlite3rbu *p){$/;"	f	file:
rbuIndexCntFunc	testdocs/sqlite3.c	/^static void rbuIndexCntFunc($/;"	f	file:
rbuInitPhaseOneSteps	testdocs/sqlite3.c	/^static void rbuInitPhaseOneSteps(sqlite3rbu *p){$/;"	f	file:
rbuIsVacuum	testdocs/sqlite3.c	/^#define rbuIsVacuum(/;"	d	file:
rbuLoadState	testdocs/sqlite3.c	/^static RbuState *rbuLoadState(sqlite3rbu *p){$/;"	f	file:
rbuLockDatabase	testdocs/sqlite3.c	/^static void rbuLockDatabase(sqlite3rbu *p){$/;"	f	file:
rbuMPrintf	testdocs/sqlite3.c	/^static char *rbuMPrintf(sqlite3rbu *p, const char *zFmt, ...){$/;"	f	file:
rbuMPrintfExec	testdocs/sqlite3.c	/^static int rbuMPrintfExec(sqlite3rbu *p, sqlite3 *db, const char *zFmt, ...){$/;"	f	file:
rbuMainToWal	testdocs/sqlite3.c	/^static const char *rbuMainToWal(const char *zName, int flags){$/;"	f	file:
rbuMalloc	testdocs/sqlite3.c	/^static void *rbuMalloc(sqlite3rbu *p, int nByte){$/;"	f	file:
rbuMisuseError	testdocs/sqlite3.c	/^static sqlite3rbu *rbuMisuseError(void){$/;"	f	file:
rbuMoveOalFile	testdocs/sqlite3.c	/^static void rbuMoveOalFile(sqlite3rbu *p){$/;"	f	file:
rbuObjIterCacheIndexedCols	testdocs/sqlite3.c	/^static void rbuObjIterCacheIndexedCols(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuObjIterCacheTableInfo	testdocs/sqlite3.c	/^static int rbuObjIterCacheTableInfo(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuObjIterClearStatements	testdocs/sqlite3.c	/^static void rbuObjIterClearStatements(RbuObjIter *pIter){$/;"	f	file:
rbuObjIterFinalize	testdocs/sqlite3.c	/^static void rbuObjIterFinalize(RbuObjIter *pIter){$/;"	f	file:
rbuObjIterFirst	testdocs/sqlite3.c	/^static int rbuObjIterFirst(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuObjIterFreeCols	testdocs/sqlite3.c	/^static void rbuObjIterFreeCols(RbuObjIter *pIter){$/;"	f	file:
rbuObjIterGetBindlist	testdocs/sqlite3.c	/^static char *rbuObjIterGetBindlist(sqlite3rbu *p, int nBind){$/;"	f	file:
rbuObjIterGetCollist	testdocs/sqlite3.c	/^static char *rbuObjIterGetCollist($/;"	f	file:
rbuObjIterGetIndexCols	testdocs/sqlite3.c	/^static char *rbuObjIterGetIndexCols($/;"	f	file:
rbuObjIterGetOldlist	testdocs/sqlite3.c	/^static char *rbuObjIterGetOldlist($/;"	f	file:
rbuObjIterGetSetlist	testdocs/sqlite3.c	/^static char *rbuObjIterGetSetlist($/;"	f	file:
rbuObjIterGetWhere	testdocs/sqlite3.c	/^static char *rbuObjIterGetWhere($/;"	f	file:
rbuObjIterNext	testdocs/sqlite3.c	/^static int rbuObjIterNext(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuObjIterPrepareAll	testdocs/sqlite3.c	/^static int rbuObjIterPrepareAll($/;"	f	file:
rbuObjIterPrepareTmpInsert	testdocs/sqlite3.c	/^static void rbuObjIterPrepareTmpInsert($/;"	f	file:
rbuOpenDatabase	testdocs/sqlite3.c	/^static void rbuOpenDatabase(sqlite3rbu *p, int *pbRetry){$/;"	f	file:
rbuOpenDbhandle	testdocs/sqlite3.c	/^static sqlite3 *rbuOpenDbhandle($/;"	f	file:
rbuPutU16	testdocs/sqlite3.c	/^static void rbuPutU16(u8 *aBuf, u16 iVal){$/;"	f	file:
rbuPutU32	testdocs/sqlite3.c	/^static void rbuPutU32(u8 *aBuf, u32 iVal){$/;"	f	file:
rbuSaveState	testdocs/sqlite3.c	/^static void rbuSaveState(sqlite3rbu *p, int eStage){$/;"	f	file:
rbuSetupCheckpoint	testdocs/sqlite3.c	/^static void rbuSetupCheckpoint(sqlite3rbu *p, RbuState *pState){$/;"	f	file:
rbuSetupOal	testdocs/sqlite3.c	/^static void rbuSetupOal(sqlite3rbu *p, RbuState *pState){$/;"	f	file:
rbuShmChecksum	testdocs/sqlite3.c	/^static i64 rbuShmChecksum(sqlite3rbu *p){$/;"	f	file:
rbuStep	testdocs/sqlite3.c	/^static int rbuStep(sqlite3rbu *p){$/;"	f	file:
rbuStepOneOp	testdocs/sqlite3.c	/^static void rbuStepOneOp(sqlite3rbu *p, int eType){$/;"	f	file:
rbuStepType	testdocs/sqlite3.c	/^static int rbuStepType(sqlite3rbu *p, const char **pzMask){$/;"	f	file:
rbuStrCompare	testdocs/sqlite3.c	/^static int rbuStrCompare(const char *z1, const char *z2){$/;"	f	file:
rbuStrndup	testdocs/sqlite3.c	/^static char *rbuStrndup(const char *zStr, int *pRc){$/;"	f	file:
rbuTableType	testdocs/sqlite3.c	/^static void rbuTableType($/;"	f	file:
rbuTargetNameFunc	testdocs/sqlite3.c	/^static void rbuTargetNameFunc($/;"	f	file:
rbuTmpInsertFunc	testdocs/sqlite3.c	/^static void rbuTmpInsertFunc($/;"	f	file:
rbuUnlockShm	testdocs/sqlite3.c	/^static void rbuUnlockShm(rbu_file *p){$/;"	f	file:
rbuVfsAccess	testdocs/sqlite3.c	/^static int rbuVfsAccess($/;"	f	file:
rbuVfsCheckReservedLock	testdocs/sqlite3.c	/^static int rbuVfsCheckReservedLock(sqlite3_file *pFile, int *pResOut){$/;"	f	file:
rbuVfsClose	testdocs/sqlite3.c	/^static int rbuVfsClose(sqlite3_file *pFile){$/;"	f	file:
rbuVfsCurrentTime	testdocs/sqlite3.c	/^static int rbuVfsCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){$/;"	f	file:
rbuVfsDelete	testdocs/sqlite3.c	/^static int rbuVfsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f	file:
rbuVfsDeviceCharacteristics	testdocs/sqlite3.c	/^static int rbuVfsDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
rbuVfsDlClose	testdocs/sqlite3.c	/^static void rbuVfsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
rbuVfsDlError	testdocs/sqlite3.c	/^static void rbuVfsDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){$/;"	f	file:
rbuVfsDlOpen	testdocs/sqlite3.c	/^static void *rbuVfsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	file:
rbuVfsDlSym	testdocs/sqlite3.c	/^static void (*rbuVfsDlSym($/;"	f	file:
rbuVfsFileControl	testdocs/sqlite3.c	/^static int rbuVfsFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
rbuVfsFileSize	testdocs/sqlite3.c	/^static int rbuVfsFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
rbuVfsFullPathname	testdocs/sqlite3.c	/^static int rbuVfsFullPathname($/;"	f	file:
rbuVfsGetLastError	testdocs/sqlite3.c	/^static int rbuVfsGetLastError(sqlite3_vfs *pVfs, int a, char *b){$/;"	f	file:
rbuVfsLock	testdocs/sqlite3.c	/^static int rbuVfsLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
rbuVfsOpen	testdocs/sqlite3.c	/^static int rbuVfsOpen($/;"	f	file:
rbuVfsRandomness	testdocs/sqlite3.c	/^static int rbuVfsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	file:
rbuVfsRead	testdocs/sqlite3.c	/^static int rbuVfsRead($/;"	f	file:
rbuVfsSectorSize	testdocs/sqlite3.c	/^static int rbuVfsSectorSize(sqlite3_file *pFile){$/;"	f	file:
rbuVfsShmBarrier	testdocs/sqlite3.c	/^static void rbuVfsShmBarrier(sqlite3_file *pFile){$/;"	f	file:
rbuVfsShmLock	testdocs/sqlite3.c	/^static int rbuVfsShmLock(sqlite3_file *pFile, int ofst, int n, int flags){$/;"	f	file:
rbuVfsShmMap	testdocs/sqlite3.c	/^static int rbuVfsShmMap($/;"	f	file:
rbuVfsShmUnmap	testdocs/sqlite3.c	/^static int rbuVfsShmUnmap(sqlite3_file *pFile, int delFlag){$/;"	f	file:
rbuVfsSleep	testdocs/sqlite3.c	/^static int rbuVfsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	file:
rbuVfsSync	testdocs/sqlite3.c	/^static int rbuVfsSync(sqlite3_file *pFile, int flags){$/;"	f	file:
rbuVfsTruncate	testdocs/sqlite3.c	/^static int rbuVfsTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
rbuVfsUnlock	testdocs/sqlite3.c	/^static int rbuVfsUnlock(sqlite3_file *pFile, int eLock){$/;"	f	file:
rbuVfsWrite	testdocs/sqlite3.c	/^static int rbuVfsWrite($/;"	f	file:
rbuWinUtf8ToUnicode	testdocs/sqlite3.c	/^static LPWSTR rbuWinUtf8ToUnicode(const char *zFilename){$/;"	f	file:
rbuWithoutRowidPK	testdocs/sqlite3.c	/^static char *rbuWithoutRowidPK(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbu_file	testdocs/sqlite3.c	/^struct rbu_file {$/;"	s	file:
rbu_file	testdocs/sqlite3.c	/^typedef struct rbu_file rbu_file;$/;"	t	typeref:struct:rbu_file	file:
rbu_vfs	testdocs/sqlite3.c	/^struct rbu_vfs {$/;"	s	file:
rbu_vfs	testdocs/sqlite3.c	/^typedef struct rbu_vfs rbu_vfs;$/;"	t	typeref:struct:rbu_vfs	file:
rc	testdocs/sqlite3.c	/^  int rc;                         \/* Current error code *\/$/;"	m	struct:Fts5Index	file:
rc	testdocs/sqlite3.c	/^  int rc;                         \/* Error code *\/$/;"	m	struct:sqlite3_changegroup	file:
rc	testdocs/sqlite3.c	/^  int rc;                         \/* Iterator error code *\/$/;"	m	struct:sqlite3_changeset_iter	file:
rc	testdocs/sqlite3.c	/^  int rc;                         \/* Non-zero if an error has occurred *\/$/;"	m	struct:sqlite3_session	file:
rc	testdocs/sqlite3.c	/^  int rc;                         \/* Value returned by last rbu_step() call *\/$/;"	m	struct:sqlite3rbu	file:
rc	testdocs/sqlite3.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:
rc	testdocs/sqlite3.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	file:
rc	testdocs/sqlite3.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	file:
rc	testdocs/sqlite3.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon16	file:
rc	testdocs/sqlite3.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:
rc	testdocs/sqlite3.c	/^  int rc;$/;"	m	struct:Fts5Parse	file:
rc	testdocs/sqlite3.c	/^  int rc;$/;"	m	struct:TokenCtx	file:
rcApp	testdocs/sqlite3.c	/^  int rcApp;              \/* errcode set by sqlite3_result_error_code() *\/$/;"	m	struct:Vdbe	file:
read32bits	testdocs/sqlite3.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:
readCoord	testdocs/sqlite3.c	/^static void readCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
readDbPage	testdocs/sqlite3.c	/^static int readDbPage(PgHdr *pPg, u32 iFrame){$/;"	f	file:
readInt16	testdocs/sqlite3.c	/^static int readInt16(u8 *p){$/;"	f	file:
readInt64	testdocs/sqlite3.c	/^static i64 readInt64(u8 *p){$/;"	f	file:
readJournalHdr	testdocs/sqlite3.c	/^static int readJournalHdr($/;"	f	file:
readLock	testdocs/sqlite3.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:
readMasterJournal	testdocs/sqlite3.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:
readOnly	testdocs/sqlite3.c	/^  bft readOnly:1;         \/* True for statements that do not write *\/$/;"	m	struct:Vdbe	file:
readOnly	testdocs/sqlite3.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:
readOnly	testdocs/sqlite3.c	/^  u8 readOnly;               \/* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY *\/$/;"	m	struct:Wal	file:
reader	testdocs/sqlite3.c	/^  Fts5LookaheadReader reader;     \/* Input iterator *\/$/;"	m	struct:Fts5NearTrimmer	file:
readpoint	testdocs/sqlite3.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:
readsTable	testdocs/sqlite3.c	/^static int readsTable(Parse *p, int iDb, Table *pTab){$/;"	f	file:
realloc	testdocs/sqlite3.c	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	file:
realloc64	testdocs/sqlite3.c	/^  void *(*realloc64)(void*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
rebuildPage	testdocs/sqlite3.c	/^static int rebuildPage($/;"	f	file:
recordFunc	testdocs/sqlite3.c	/^static void recordFunc($/;"	f	file:
redo	edit.h	/^    Log* redo;            \/* redo list *\/$/;"	m	struct:__anon5
regCtr	testdocs/sqlite3.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	file:
regResult	testdocs/sqlite3.c	/^    int regResult;    \/* Registers holding results of a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:
regReturn	testdocs/sqlite3.c	/^    int regReturn;    \/* Register holding return address of addrFillSub *\/$/;"	m	struct:SrcList::SrcList_item	file:
regReturn	testdocs/sqlite3.c	/^  int regReturn;        \/* Register holding block-output return address *\/$/;"	m	struct:SortCtx	file:
regRoot	testdocs/sqlite3.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	file:
regRowid	testdocs/sqlite3.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	file:
registerTokenizer	testdocs/sqlite3.c	/^int registerTokenizer($/;"	f	file:
registerTrace	testdocs/sqlite3.c	/^static void registerTrace(int iReg, Mem *p){$/;"	f	file:
rehash	testdocs/sqlite3.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:
reindexDatabases	testdocs/sqlite3.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:
reindexTable	testdocs/sqlite3.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:
reinsertNodeContent	testdocs/sqlite3.c	/^static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
releaseAllSavepoints	testdocs/sqlite3.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:
releaseInodeInfo	testdocs/sqlite3.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:
releaseMemArray	testdocs/sqlite3.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:
releasePage	testdocs/sqlite3.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:
releasePageNotNull	testdocs/sqlite3.c	/^static void releasePageNotNull(MemPage *pPage){$/;"	f	file:
release_memory	testdocs/sqlite3.c	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	file:
reloadTableSchema	testdocs/sqlite3.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:
relocatePage	testdocs/sqlite3.c	/^static int relocatePage($/;"	f	file:
removeElementGivenHash	testdocs/sqlite3.c	/^static void removeElementGivenHash($/;"	f	file:
removeFromBlockedList	testdocs/sqlite3.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:
removeFromSharingList	testdocs/sqlite3.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:
removeNode	testdocs/sqlite3.c	/^static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){$/;"	f	file:
remove_diacritic	testdocs/sqlite3.c	/^static int remove_diacritic(int c){$/;"	f	file:
renameParentFunc	testdocs/sqlite3.c	/^static void renameParentFunc($/;"	f	file:
renameTableFunc	testdocs/sqlite3.c	/^static void renameTableFunc($/;"	f	file:
renameTriggerFunc	testdocs/sqlite3.c	/^static void renameTriggerFunc($/;"	f	file:
renderLogMsg	testdocs/sqlite3.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:
replaceFunc	testdocs/sqlite3.c	/^static void replaceFunc($/;"	f	file:
reportError	testdocs/sqlite3.c	/^static int reportError(int iErr, int lineno, const char *zType){$/;"	f	file:
reserved	testdocs/sqlite3.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:
reset	testdocs/sqlite3.c	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
resetAccumulator	testdocs/sqlite3.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
resetAndCollectError	testdocs/sqlite3.c	/^static int resetAndCollectError(sqlite3_stmt *pStmt, char **pzErrmsg){$/;"	f	file:
reset_auto_extension	testdocs/sqlite3.c	/^  void (*reset_auto_extension)(void);$/;"	m	struct:sqlite3_api_routines	file:
resizeIndexObject	testdocs/sqlite3.c	/^static int resizeIndexObject(sqlite3 *db, Index *pIdx, int N){$/;"	f	file:
resolveAlias	testdocs/sqlite3.c	/^static void resolveAlias($/;"	f	file:
resolveAsName	testdocs/sqlite3.c	/^static int resolveAsName($/;"	f	file:
resolveAttachExpr	testdocs/sqlite3.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:
resolveCompoundOrderBy	testdocs/sqlite3.c	/^static int resolveCompoundOrderBy($/;"	f	file:
resolveExprStep	testdocs/sqlite3.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:
resolveOrderByTermToExprList	testdocs/sqlite3.c	/^static int resolveOrderByTermToExprList($/;"	f	file:
resolveOrderGroupBy	testdocs/sqlite3.c	/^static int resolveOrderGroupBy($/;"	f	file:
resolveOutOfRangeError	testdocs/sqlite3.c	/^static void resolveOutOfRangeError($/;"	f	file:
resolveP2Values	testdocs/sqlite3.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:
resolveSelectStep	testdocs/sqlite3.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:
restoreCursorPosition	testdocs/sqlite3.c	/^#define restoreCursorPosition(/;"	d	file:
result_blob	testdocs/sqlite3.c	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_blob64	testdocs/sqlite3.c	/^  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
result_double	testdocs/sqlite3.c	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	file:
result_error	testdocs/sqlite3.c	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error16	testdocs/sqlite3.c	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_code	testdocs/sqlite3.c	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_nomem	testdocs/sqlite3.c	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_error_toobig	testdocs/sqlite3.c	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_int	testdocs/sqlite3.c	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_int64	testdocs/sqlite3.c	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
result_null	testdocs/sqlite3.c	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_subtype	testdocs/sqlite3.c	/^  void (*result_subtype)(sqlite3_context*,unsigned int);$/;"	m	struct:sqlite3_api_routines	file:
result_text	testdocs/sqlite3.c	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16	testdocs/sqlite3.c	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16be	testdocs/sqlite3.c	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16le	testdocs/sqlite3.c	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text64	testdocs/sqlite3.c	/^  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
result_value	testdocs/sqlite3.c	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
result_zeroblob	testdocs/sqlite3.c	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_zeroblob64	testdocs/sqlite3.c	/^  int (*result_zeroblob64)(sqlite3_context*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
retRangeStart	testdocs/sqlite3.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:
returnSingleInt	testdocs/sqlite3.c	/^static void returnSingleInt(Vdbe *v, i64 value){$/;"	f	file:
returnSingleText	testdocs/sqlite3.c	/^static void returnSingleText($/;"	f	file:
reusable	testdocs/sqlite3.c	/^    unsigned reusable :1;   \/* Constant expression is reusable *\/$/;"	m	struct:ExprList::ExprList_item	file:
revLoop	testdocs/sqlite3.c	/^  Bitmask revLoop;      \/* aLoop[]s that should be reversed for ORDER BY *\/$/;"	m	struct:WherePath	file:
revMask	testdocs/sqlite3.c	/^  Bitmask revMask;          \/* Mask of ORDER BY terms that need reversing *\/$/;"	m	struct:WhereInfo	file:
risblank	buf.c	/^bool risblank(Rune r) {$/;"	f
risword	buf.c	/^bool risword(Rune r) {$/;"	f
robustFchown	testdocs/sqlite3.c	/^static int robustFchown(int fd, uid_t uid, gid_t gid){$/;"	f	file:
robust_close	testdocs/sqlite3.c	/^static void robust_close(unixFile *pFile, int h, int lineno){$/;"	f	file:
robust_flock	testdocs/sqlite3.c	/^# define robust_flock(/;"	d	file:
robust_flock	testdocs/sqlite3.c	/^static int robust_flock(int fd, int op){$/;"	f	file:
robust_ftruncate	testdocs/sqlite3.c	/^static int robust_ftruncate(int h, sqlite3_int64 sz){$/;"	f	file:
robust_open	testdocs/sqlite3.c	/^static int robust_open(const char *z, int f, mode_t m){$/;"	f	file:
rollback_hook	testdocs/sqlite3.c	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
rootOnly	testdocs/sqlite3.c	/^  u8 rootOnly;                    \/* True for a root-only reader *\/$/;"	m	struct:Fts3SegReader	file:
roundFunc	testdocs/sqlite3.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
rowSetEntryAlloc	testdocs/sqlite3.c	/^static struct RowSetEntry *rowSetEntryAlloc(RowSet *p){$/;"	f	file:
rowSetEntryMerge	testdocs/sqlite3.c	/^static struct RowSetEntry *rowSetEntryMerge($/;"	f	file:
rowSetEntrySort	testdocs/sqlite3.c	/^static struct RowSetEntry *rowSetEntrySort(struct RowSetEntry *pIn){$/;"	f	file:
rowSetListToTree	testdocs/sqlite3.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:
rowSetNDeepTree	testdocs/sqlite3.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:
rowSetTreeToList	testdocs/sqlite3.c	/^static void rowSetTreeToList($/;"	f	file:
rowid	testdocs/sqlite3.c	/^  i64 rowid;                      \/* This table's current rowid value *\/$/;"	m	struct:Fts5VocabCursor	file:
rowidWrite	testdocs/sqlite3.c	/^static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){$/;"	f	file:
rsFlags	testdocs/sqlite3.c	/^  u16 rsFlags;                   \/* Various flags *\/$/;"	m	struct:RowSet	file:
rstrlen	buf.c	/^size_t rstrlen(Rune* runes) {$/;"	f
rtreeBeginTransaction	testdocs/sqlite3.c	/^static int rtreeBeginTransaction(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeBestIndex	testdocs/sqlite3.c	/^static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
rtreeCallbackConstraint	testdocs/sqlite3.c	/^static int rtreeCallbackConstraint($/;"	f	file:
rtreeClose	testdocs/sqlite3.c	/^static int rtreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeColumn	testdocs/sqlite3.c	/^static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
rtreeConnect	testdocs/sqlite3.c	/^static int rtreeConnect($/;"	f	file:
rtreeConstraintError	testdocs/sqlite3.c	/^static int rtreeConstraintError(Rtree *pRtree, int iCol){$/;"	f	file:
rtreeCreate	testdocs/sqlite3.c	/^static int rtreeCreate($/;"	f	file:
rtreeDeleteRowid	testdocs/sqlite3.c	/^static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){$/;"	f	file:
rtreeDestroy	testdocs/sqlite3.c	/^static int rtreeDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeDisconnect	testdocs/sqlite3.c	/^static int rtreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEndTransaction	testdocs/sqlite3.c	/^static int rtreeEndTransaction(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEnqueue	testdocs/sqlite3.c	/^static RtreeSearchPoint *rtreeEnqueue($/;"	f	file:
rtreeEof	testdocs/sqlite3.c	/^static int rtreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeFilter	testdocs/sqlite3.c	/^static int rtreeFilter($/;"	f	file:
rtreeFreeCallback	testdocs/sqlite3.c	/^static void rtreeFreeCallback(void *p){$/;"	f	file:
rtreeInit	testdocs/sqlite3.c	/^static int rtreeInit($/;"	f	file:
rtreeInsertCell	testdocs/sqlite3.c	/^static int rtreeInsertCell($/;"	f	file:
rtreeLeafConstraint	testdocs/sqlite3.c	/^static void rtreeLeafConstraint($/;"	f	file:
rtreeMatchArgFree	testdocs/sqlite3.c	/^static void rtreeMatchArgFree(void *pArg){$/;"	f	file:
rtreeModule	testdocs/sqlite3.c	/^static sqlite3_module rtreeModule = {$/;"	v	file:
rtreeNext	testdocs/sqlite3.c	/^static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
rtreeNodeOfFirstSearchPoint	testdocs/sqlite3.c	/^static RtreeNode *rtreeNodeOfFirstSearchPoint(RtreeCursor *pCur, int *pRC){$/;"	f	file:
rtreeNonleafConstraint	testdocs/sqlite3.c	/^static void rtreeNonleafConstraint($/;"	f	file:
rtreeOpen	testdocs/sqlite3.c	/^static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
rtreeQueryStat1	testdocs/sqlite3.c	/^static int rtreeQueryStat1(sqlite3 *db, Rtree *pRtree){$/;"	f	file:
rtreeReference	testdocs/sqlite3.c	/^static void rtreeReference(Rtree *pRtree){$/;"	f	file:
rtreeRelease	testdocs/sqlite3.c	/^static void rtreeRelease(Rtree *pRtree){$/;"	f	file:
rtreeRename	testdocs/sqlite3.c	/^static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){$/;"	f	file:
rtreeRowid	testdocs/sqlite3.c	/^static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:
rtreeSavepoint	testdocs/sqlite3.c	/^static int rtreeSavepoint(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
rtreeSearchPointCompare	testdocs/sqlite3.c	/^static int rtreeSearchPointCompare($/;"	f	file:
rtreeSearchPointFirst	testdocs/sqlite3.c	/^static RtreeSearchPoint *rtreeSearchPointFirst(RtreeCursor *pCur){$/;"	f	file:
rtreeSearchPointNew	testdocs/sqlite3.c	/^static RtreeSearchPoint *rtreeSearchPointNew($/;"	f	file:
rtreeSearchPointPop	testdocs/sqlite3.c	/^static void rtreeSearchPointPop(RtreeCursor *p){$/;"	f	file:
rtreeSearchPointSwap	testdocs/sqlite3.c	/^static void rtreeSearchPointSwap(RtreeCursor *p, int i, int j){$/;"	f	file:
rtreeSqlInit	testdocs/sqlite3.c	/^static int rtreeSqlInit($/;"	f	file:
rtreeStepToLeaf	testdocs/sqlite3.c	/^static int rtreeStepToLeaf(RtreeCursor *pCur){$/;"	f	file:
rtreeUpdate	testdocs/sqlite3.c	/^static int rtreeUpdate($/;"	f	file:
rtreeValueDown	testdocs/sqlite3.c	/^static RtreeValue rtreeValueDown(sqlite3_value *v){$/;"	f	file:
rtreeValueUp	testdocs/sqlite3.c	/^static RtreeValue rtreeValueUp(sqlite3_value *v){$/;"	f	file:
rtreedepth	testdocs/sqlite3.c	/^static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
rtreenode	testdocs/sqlite3.c	/^static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
runOnlyOnce	testdocs/sqlite3.c	/^  bft runOnlyOnce:1;      \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	file:
rune_match	buf.c	/^static int rune_match(Buf* buf, size_t mbeg, size_t mend, Rune* runes) {$/;"	f	file:
runelen	buf.c	/^static size_t runelen(Rune rune) {$/;"	f	file:
runes	edit.h	/^            Rune* runes; \/* array of runes containing deleted content *\/$/;"	m	struct:Log::__anon2::__anon4
runevalid	buf.c	/^static bool runevalid(Rune val) {$/;"	f	file:
runewidth	buf.c	/^int runewidth(unsigned col, Rune r) {$/;"	f
s	testdocs/sqlite3.c	/^  double s;           \/* Seconds *\/$/;"	m	struct:DateTime	file:
s	testdocs/sqlite3.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
sArg	testdocs/sqlite3.c	/^  Token sArg;               \/* Complete text of a module argument *\/$/;"	m	struct:Parse	file:
sColMap	testdocs/sqlite3.c	/^  struct sColMap {      \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:
sFts5Api	testdocs/sqlite3.c	/^static const Fts5ExtensionApi sFts5Api = {$/;"	v	file:
sLastToken	testdocs/sqlite3.c	/^  Token sLastToken;       \/* The last token parsed *\/$/;"	m	struct:Parse	file:
sMaskSet	testdocs/sqlite3.c	/^  WhereMaskSet sMaskSet;    \/* Map cursor numbers to bitmasks *\/$/;"	m	struct:WhereInfo	file:
sNameToken	testdocs/sqlite3.c	/^  Token sNameToken;       \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	file:
sParse	testdocs/sqlite3.c	/^  JsonParse sParse;          \/* Parse of the input JSON *\/$/;"	m	struct:JsonEachCursor	file:
sPoint	testdocs/sqlite3.c	/^  RtreeSearchPoint sPoint;          \/* Cached next search point *\/$/;"	m	struct:RtreeCursor	file:
sWC	testdocs/sqlite3.c	/^  WhereClause sWC;          \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	file:
safe_isalnum	testdocs/sqlite3.c	/^#  define safe_isalnum(/;"	d	file:
safe_isdigit	testdocs/sqlite3.c	/^#  define safe_isdigit(/;"	d	file:
safe_isspace	testdocs/sqlite3.c	/^#define safe_isspace(/;"	d	file:
safe_isxdigit	testdocs/sqlite3.c	/^#  define safe_isxdigit(/;"	d	file:
safety_level	testdocs/sqlite3.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	file:
sampleClear	testdocs/sqlite3.c	/^static void sampleClear(sqlite3 *db, Stat4Sample *p){$/;"	f	file:
sampleCopy	testdocs/sqlite3.c	/^static void sampleCopy(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom){$/;"	f	file:
sampleInsert	testdocs/sqlite3.c	/^static void sampleInsert(Stat4Accum *p, Stat4Sample *pNew, int nEqZero){$/;"	f	file:
sampleIsBetter	testdocs/sqlite3.c	/^static int sampleIsBetter($/;"	f	file:
sampleIsBetterPost	testdocs/sqlite3.c	/^static int sampleIsBetterPost($/;"	f	file:
samplePushPrevious	testdocs/sqlite3.c	/^static void samplePushPrevious(Stat4Accum *p, int iChng){$/;"	f	file:
sampleSetRowid	testdocs/sqlite3.c	/^static void sampleSetRowid(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData){$/;"	f	file:
sampleSetRowidInt64	testdocs/sqlite3.c	/^static void sampleSetRowidInt64(sqlite3 *db, Stat4Sample *p, i64 iRowid){$/;"	f	file:
saveAllCursors	testdocs/sqlite3.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:
saveCursorKey	testdocs/sqlite3.c	/^static int saveCursorKey(BtCursor *pCur){$/;"	f	file:
saveCursorPosition	testdocs/sqlite3.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:
saveCursorsOnList	testdocs/sqlite3.c	/^static int SQLITE_NOINLINE saveCursorsOnList($/;"	f	file:
savedNQueryLoop	testdocs/sqlite3.c	/^  int savedNQueryLoop;      \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
saved_cnt	testdocs/sqlite3.c	/^static int saved_cnt;$/;"	v	file:
schar	stdc.h	/^typedef signed char schar;$/;"	t
schemaFlags	testdocs/sqlite3.c	/^  u16 schemaFlags;     \/* Flags associated with this schema *\/$/;"	m	struct:Schema	file:
schemaIsValid	testdocs/sqlite3.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:
schema_cookie	testdocs/sqlite3.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	file:
scratchAllocOut	testdocs/sqlite3.c	/^static int scratchAllocOut = 0;$/;"	v	file:
searchWith	testdocs/sqlite3.c	/^static struct Cte *searchWith($/;"	f	file:
sectorSize	testdocs/sqlite3.c	/^  int sectorSize;                     \/* Device sector size *\/$/;"	m	struct:unixFile	file:
sectorSize	testdocs/sqlite3.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:
seekAndRead	testdocs/sqlite3.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:
seekAndWrite	testdocs/sqlite3.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:
seekAndWriteFd	testdocs/sqlite3.c	/^static int seekAndWriteFd($/;"	f	file:
seekOp	testdocs/sqlite3.c	/^  u8 seekOp;              \/* Most recent seek operation on this cursor *\/$/;"	m	struct:VdbeCursor	file:
seekResult	testdocs/sqlite3.c	/^  int seekResult;         \/* Result of previous sqlite3BtreeMoveto() or 0$/;"	m	struct:VdbeCursor	file:
selFlags	testdocs/sqlite3.c	/^  u32 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	file:
selectAddSubqueryTypeInfo	testdocs/sqlite3.c	/^static void selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:
selectExpander	testdocs/sqlite3.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:
selectInnerLoop	testdocs/sqlite3.c	/^static void selectInnerLoop($/;"	f	file:
selectNodeIsConstant	testdocs/sqlite3.c	/^static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){$/;"	f	file:
selectOpName	testdocs/sqlite3.c	/^static const char *selectOpName(int id){$/;"	f	file:
selectPopWith	testdocs/sqlite3.c	/^#define selectPopWith /;"	d	file:
selectPopWith	testdocs/sqlite3.c	/^static void selectPopWith(Walker *pWalker, Select *p){$/;"	f	file:
semXCheckReservedLock	testdocs/sqlite3.c	/^static int semXCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
semXClose	testdocs/sqlite3.c	/^static int semXClose(sqlite3_file *id) {$/;"	f	file:
semXLock	testdocs/sqlite3.c	/^static int semXLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
semXUnlock	testdocs/sqlite3.c	/^static int semXUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
sentinel	stdc.h	/^#define sentinel(/;"	d
separateCache	testdocs/sqlite3.c	/^  int separateCache;             \/* Use a new PGroup for each PCache *\/$/;"	m	struct:PCacheGlobal	file:
seqCount	testdocs/sqlite3.c	/^  i64 seqCount;           \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	file:
serialGet	testdocs/sqlite3.c	/^static u32 SQLITE_NOINLINE serialGet($/;"	f	file:
sessionAppendBlob	testdocs/sqlite3.c	/^static void sessionAppendBlob($/;"	f	file:
sessionAppendByte	testdocs/sqlite3.c	/^static void sessionAppendByte(SessionBuffer *p, u8 v, int *pRc){$/;"	f	file:
sessionAppendCol	testdocs/sqlite3.c	/^static void sessionAppendCol($/;"	f	file:
sessionAppendDelete	testdocs/sqlite3.c	/^static int sessionAppendDelete($/;"	f	file:
sessionAppendIdent	testdocs/sqlite3.c	/^static void sessionAppendIdent($/;"	f	file:
sessionAppendInteger	testdocs/sqlite3.c	/^static void sessionAppendInteger($/;"	f	file:
sessionAppendStr	testdocs/sqlite3.c	/^static void sessionAppendStr($/;"	f	file:
sessionAppendTableHdr	testdocs/sqlite3.c	/^static void sessionAppendTableHdr($/;"	f	file:
sessionAppendUpdate	testdocs/sqlite3.c	/^static int sessionAppendUpdate($/;"	f	file:
sessionAppendValue	testdocs/sqlite3.c	/^static void sessionAppendValue(SessionBuffer *p, sqlite3_value *pVal, int *pRc){$/;"	f	file:
sessionAppendVarint	testdocs/sqlite3.c	/^static void sessionAppendVarint(SessionBuffer *p, int v, int *pRc){$/;"	f	file:
sessionApplyOneOp	testdocs/sqlite3.c	/^static int sessionApplyOneOp($/;"	f	file:
sessionApplyOneWithRetry	testdocs/sqlite3.c	/^static int sessionApplyOneWithRetry($/;"	f	file:
sessionBindRow	testdocs/sqlite3.c	/^static int sessionBindRow($/;"	f	file:
sessionBindValue	testdocs/sqlite3.c	/^static int sessionBindValue($/;"	f	file:
sessionBufferGrow	testdocs/sqlite3.c	/^static int sessionBufferGrow(SessionBuffer *p, int nByte, int *pRc){$/;"	f	file:
sessionChangeEqual	testdocs/sqlite3.c	/^static int sessionChangeEqual($/;"	f	file:
sessionChangeHash	testdocs/sqlite3.c	/^static unsigned int sessionChangeHash($/;"	f	file:
sessionChangeMerge	testdocs/sqlite3.c	/^static int sessionChangeMerge($/;"	f	file:
sessionChangegroupOutput	testdocs/sqlite3.c	/^static int sessionChangegroupOutput($/;"	f	file:
sessionChangesetApply	testdocs/sqlite3.c	/^static int sessionChangesetApply($/;"	f	file:
sessionChangesetBufferRecord	testdocs/sqlite3.c	/^static int sessionChangesetBufferRecord($/;"	f	file:
sessionChangesetBufferTblhdr	testdocs/sqlite3.c	/^static int sessionChangesetBufferTblhdr(SessionInput *pIn, int *pnByte){$/;"	f	file:
sessionChangesetInvert	testdocs/sqlite3.c	/^static int sessionChangesetInvert($/;"	f	file:
sessionChangesetNew	testdocs/sqlite3.c	/^#define sessionChangesetNew(/;"	d	file:
sessionChangesetNext	testdocs/sqlite3.c	/^static int sessionChangesetNext($/;"	f	file:
sessionChangesetOld	testdocs/sqlite3.c	/^#define sessionChangesetOld(/;"	d	file:
sessionChangesetReadTblhdr	testdocs/sqlite3.c	/^static int sessionChangesetReadTblhdr(sqlite3_changeset_iter *p){$/;"	f	file:
sessionChangesetStart	testdocs/sqlite3.c	/^static int sessionChangesetStart($/;"	f	file:
sessionChangesetToHash	testdocs/sqlite3.c	/^static int sessionChangesetToHash($/;"	f	file:
sessionConflictHandler	testdocs/sqlite3.c	/^static int sessionConflictHandler($/;"	f	file:
sessionDeleteRow	testdocs/sqlite3.c	/^static int sessionDeleteRow($/;"	f	file:
sessionDeleteTable	testdocs/sqlite3.c	/^static void sessionDeleteTable(SessionTable *pList){$/;"	f	file:
sessionDiffCount	testdocs/sqlite3.c	/^static int sessionDiffCount(void *pCtx){$/;"	f	file:
sessionDiffDepth	testdocs/sqlite3.c	/^static int sessionDiffDepth(void *pCtx){$/;"	f	file:
sessionDiffFindModified	testdocs/sqlite3.c	/^static int sessionDiffFindModified($/;"	f	file:
sessionDiffFindNew	testdocs/sqlite3.c	/^static int sessionDiffFindNew($/;"	f	file:
sessionDiffHooks	testdocs/sqlite3.c	/^static void sessionDiffHooks($/;"	f	file:
sessionDiffNew	testdocs/sqlite3.c	/^static int sessionDiffNew(void *pCtx, int iVal, sqlite3_value **ppVal){$/;"	f	file:
sessionDiffOld	testdocs/sqlite3.c	/^static int sessionDiffOld(void *pCtx, int iVal, sqlite3_value **ppVal){$/;"	f	file:
sessionDiscardData	testdocs/sqlite3.c	/^static void sessionDiscardData(SessionInput *pIn){$/;"	f	file:
sessionExprCompareOther	testdocs/sqlite3.c	/^static char *sessionExprCompareOther($/;"	f	file:
sessionExprComparePK	testdocs/sqlite3.c	/^static char *sessionExprComparePK($/;"	f	file:
sessionFindTable	testdocs/sqlite3.c	/^static int sessionFindTable($/;"	f	file:
sessionGenerateChangeset	testdocs/sqlite3.c	/^static int sessionGenerateChangeset($/;"	f	file:
sessionGetI64	testdocs/sqlite3.c	/^static sqlite3_int64 sessionGetI64(u8 *aRec){$/;"	f	file:
sessionGrowHash	testdocs/sqlite3.c	/^static int sessionGrowHash(int bPatchset, SessionTable *pTab){$/;"	f	file:
sessionHashAppendBlob	testdocs/sqlite3.c	/^static unsigned int sessionHashAppendBlob(unsigned int h, int n, const u8 *z){$/;"	f	file:
sessionHashAppendI64	testdocs/sqlite3.c	/^static unsigned int sessionHashAppendI64(unsigned int h, i64 i){$/;"	f	file:
sessionHashAppendType	testdocs/sqlite3.c	/^static unsigned int sessionHashAppendType(unsigned int h, int eType){$/;"	f	file:
sessionInitTable	testdocs/sqlite3.c	/^static int sessionInitTable(sqlite3_session *pSession, SessionTable *pTab){$/;"	f	file:
sessionInputBuffer	testdocs/sqlite3.c	/^static int sessionInputBuffer(SessionInput *pIn, int nByte){$/;"	f	file:
sessionInsertRow	testdocs/sqlite3.c	/^static int sessionInsertRow($/;"	f	file:
sessionMergeRecord	testdocs/sqlite3.c	/^static void sessionMergeRecord($/;"	f	file:
sessionMergeUpdate	testdocs/sqlite3.c	/^static int sessionMergeUpdate($/;"	f	file:
sessionMergeValue	testdocs/sqlite3.c	/^static u8 *sessionMergeValue($/;"	f	file:
sessionPreupdateCount	testdocs/sqlite3.c	/^static int sessionPreupdateCount(void *pCtx){$/;"	f	file:
sessionPreupdateDepth	testdocs/sqlite3.c	/^static int sessionPreupdateDepth(void *pCtx){$/;"	f	file:
sessionPreupdateEqual	testdocs/sqlite3.c	/^static int sessionPreupdateEqual($/;"	f	file:
sessionPreupdateHash	testdocs/sqlite3.c	/^static int sessionPreupdateHash($/;"	f	file:
sessionPreupdateHooks	testdocs/sqlite3.c	/^static void sessionPreupdateHooks($/;"	f	file:
sessionPreupdateNew	testdocs/sqlite3.c	/^static int sessionPreupdateNew(void *pCtx, int iVal, sqlite3_value **ppVal){$/;"	f	file:
sessionPreupdateOld	testdocs/sqlite3.c	/^static int sessionPreupdateOld(void *pCtx, int iVal, sqlite3_value **ppVal){$/;"	f	file:
sessionPreupdateOneChange	testdocs/sqlite3.c	/^static void sessionPreupdateOneChange($/;"	f	file:
sessionPutI64	testdocs/sqlite3.c	/^static void sessionPutI64(u8 *aBuf, sqlite3_int64 i){$/;"	f	file:
sessionReadRecord	testdocs/sqlite3.c	/^static int sessionReadRecord($/;"	f	file:
sessionRetryConstraints	testdocs/sqlite3.c	/^static int sessionRetryConstraints($/;"	f	file:
sessionSeekToRow	testdocs/sqlite3.c	/^static int sessionSeekToRow($/;"	f	file:
sessionSelectBind	testdocs/sqlite3.c	/^static int sessionSelectBind($/;"	f	file:
sessionSelectFindNew	testdocs/sqlite3.c	/^static char *sessionSelectFindNew($/;"	f	file:
sessionSelectRow	testdocs/sqlite3.c	/^static int sessionSelectRow($/;"	f	file:
sessionSelectStmt	testdocs/sqlite3.c	/^static int sessionSelectStmt($/;"	f	file:
sessionSerialLen	testdocs/sqlite3.c	/^static int sessionSerialLen(u8 *a){$/;"	f	file:
sessionSerializeValue	testdocs/sqlite3.c	/^static int sessionSerializeValue($/;"	f	file:
sessionSkipRecord	testdocs/sqlite3.c	/^static void sessionSkipRecord($/;"	f	file:
sessionTableInfo	testdocs/sqlite3.c	/^static int sessionTableInfo($/;"	f	file:
sessionUpdateRow	testdocs/sqlite3.c	/^static int sessionUpdateRow($/;"	f	file:
sessionValueSetStr	testdocs/sqlite3.c	/^static int sessionValueSetStr($/;"	f	file:
sessionVarintGet	testdocs/sqlite3.c	/^static int sessionVarintGet(u8 *aBuf, int *piVal){$/;"	f	file:
sessionVarintLen	testdocs/sqlite3.c	/^static int sessionVarintLen(int iVal){$/;"	f	file:
sessionVarintPut	testdocs/sqlite3.c	/^static int sessionVarintPut(u8 *aBuf, int iVal){$/;"	f	file:
setAllPagerFlags	testdocs/sqlite3.c	/^# define setAllPagerFlags(/;"	d	file:
setAllPagerFlags	testdocs/sqlite3.c	/^static void setAllPagerFlags(sqlite3 *db){$/;"	f	file:
setChildPtrmaps	testdocs/sqlite3.c	/^# define setChildPtrmaps(/;"	d	file:
setChildPtrmaps	testdocs/sqlite3.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:
setDateTimeToCurrent	testdocs/sqlite3.c	/^static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:
setDefaultSyncFlag	testdocs/sqlite3.c	/^# define setDefaultSyncFlag(/;"	d	file:
setDefaultSyncFlag	testdocs/sqlite3.c	/^static void setDefaultSyncFlag(BtShared *pBt, u8 safety_level){$/;"	f	file:
setDestPgsz	testdocs/sqlite3.c	/^static int setDestPgsz(sqlite3_backup *p){$/;"	f	file:
setGetterMethod	testdocs/sqlite3.c	/^static void setGetterMethod(Pager *pPager){$/;"	f	file:
setJoinExpr	testdocs/sqlite3.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:
setLikeOptFlag	testdocs/sqlite3.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:
setMaster	testdocs/sqlite3.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:
setPageReferenced	testdocs/sqlite3.c	/^static void setPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
setPendingFd	testdocs/sqlite3.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:
setPragmaResultColumnNames	testdocs/sqlite3.c	/^static void setPragmaResultColumnNames($/;"	f	file:
setRawDateNumber	testdocs/sqlite3.c	/^static void setRawDateNumber(DateTime *p, double r){$/;"	f	file:
setResultStrOrError	testdocs/sqlite3.c	/^static void setResultStrOrError($/;"	f	file:
setSectorSize	testdocs/sqlite3.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:
setSharedCacheTableLock	testdocs/sqlite3.c	/^  #define setSharedCacheTableLock(/;"	d	file:
setSharedCacheTableLock	testdocs/sqlite3.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:
setStrAccumError	testdocs/sqlite3.c	/^static void setStrAccumError(StrAccum *p, u8 eError){$/;"	f	file:
set_authorizer	testdocs/sqlite3.c	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
set_auxdata	testdocs/sqlite3.c	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
set_buffer_text	testbuf.c	/^static void set_buffer_text(char* str) {$/;"	f	file:
set_last_insert_rowid	testdocs/sqlite3.c	/^  void (*set_last_insert_rowid)(sqlite3*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
setupLookaside	testdocs/sqlite3.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:
sharable	testdocs/sqlite3.c	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree	file:
shared	testdocs/sqlite3.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:
sharedByte	testdocs/sqlite3.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:
sharedCacheEnabled	testdocs/sqlite3.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	file:
sharedLockByte	testdocs/sqlite3.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:
sharedMask	testdocs/sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:
sharedMask	testdocs/sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:
sharedMask	testdocs/sqlite3.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:
shutil	testdocs/waf	/^	import shutil, tarfile$/;"	i
simpleClose	testdocs/sqlite3.c	/^static int simpleClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
simpleCreate	testdocs/sqlite3.c	/^static int simpleCreate($/;"	f	file:
simpleDelim	testdocs/sqlite3.c	/^static int simpleDelim(simple_tokenizer *t, unsigned char c){$/;"	f	file:
simpleDestroy	testdocs/sqlite3.c	/^static int simpleDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
simpleNext	testdocs/sqlite3.c	/^static int simpleNext($/;"	f	file:
simpleOpen	testdocs/sqlite3.c	/^static int simpleOpen($/;"	f	file:
simpleTokenizerModule	testdocs/sqlite3.c	/^static const sqlite3_tokenizer_module simpleTokenizerModule = {$/;"	v	file:
simple_tokenizer	testdocs/sqlite3.c	/^typedef struct simple_tokenizer {$/;"	s	file:
simple_tokenizer	testdocs/sqlite3.c	/^} simple_tokenizer;$/;"	t	typeref:struct:simple_tokenizer	file:
simple_tokenizer_cursor	testdocs/sqlite3.c	/^typedef struct simple_tokenizer_cursor {$/;"	s	file:
simple_tokenizer_cursor	testdocs/sqlite3.c	/^} simple_tokenizer_cursor;$/;"	t	typeref:struct:simple_tokenizer_cursor	file:
size4x	testdocs/sqlite3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon21::__anon22	file:
sjfd	testdocs/sqlite3.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:
skipBtreeMutex	testdocs/sqlite3.c	/^  u8 skipBtreeMutex;            \/* True if no shared-cache backends *\/$/;"	m	struct:sqlite3	file:
skipFlag	testdocs/sqlite3.c	/^  u8 skipFlag;            \/* Skip accumulator loading if true *\/$/;"	m	struct:sqlite3_context	file:
skipNext	testdocs/sqlite3.c	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive.$/;"	m	struct:BtCursor	file:
sleep	testdocs/sqlite3.c	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	file:
sleepObj	testdocs/sqlite3.c	/^static HANDLE sleepObj = NULL;$/;"	v	file:
snprintf	testdocs/sqlite3.c	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
soft_heap_limit	testdocs/sqlite3.c	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	file:
soft_heap_limit64	testdocs/sqlite3.c	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
sortFlags	testdocs/sqlite3.c	/^  u8 sortFlags;         \/* Zero or more SORTFLAG_* bits *\/$/;"	m	struct:SortCtx	file:
sortOrder	testdocs/sqlite3.c	/^    u8 sortOrder;           \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	file:
sorted	testdocs/sqlite3.c	/^  u8 sorted;                \/* True if really sorted (not just grouped) *\/$/;"	m	struct:WhereInfo	file:
sortingIdx	testdocs/sqlite3.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	file:
sortingIdxPTab	testdocs/sqlite3.c	/^  int sortingIdxPTab;     \/* Cursor number of pseudo-table *\/$/;"	m	struct:AggInfo	file:
soundexFunc	testdocs/sqlite3.c	/^static void soundexFunc($/;"	f	file:
sourceid	testdocs/sqlite3.c	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	file:
sourceidFunc	testdocs/sqlite3.c	/^static void sourceidFunc($/;"	f	file:
spanBinaryExpr	testdocs/sqlite3.c	/^  static void spanBinaryExpr($/;"	f	file:
spanExpr	testdocs/sqlite3.c	/^  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token t){$/;"	f	file:
spanSet	testdocs/sqlite3.c	/^  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){$/;"	f	file:
spanUnaryPostfix	testdocs/sqlite3.c	/^  static void spanUnaryPostfix($/;"	f	file:
spanUnaryPrefix	testdocs/sqlite3.c	/^  static void spanUnaryPrefix($/;"	f	file:
splitNodeStartree	testdocs/sqlite3.c	/^static int splitNodeStartree($/;"	f	file:
sql	testdocs/sqlite3.c	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
sqlite3	testdocs/sqlite3.c	/^struct sqlite3 {$/;"	s	file:
sqlite3	testdocs/sqlite3.c	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3	file:
sqlite3AbsInt32	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AbsInt32(int x){$/;"	f
sqlite3AddCheckConstraint	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCheckConstraint($/;"	f
sqlite3AddCollateType	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f
sqlite3AddColumn	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName, Token *pType){$/;"	f
sqlite3AddDefaultValue	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){$/;"	f
sqlite3AddInt64	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){$/;"	f
sqlite3AddNotNull	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f
sqlite3AddPrimaryKey	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddPrimaryKey($/;"	f
sqlite3AffinityType	testdocs/sqlite3.c	/^SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn, u8 *pszEst){$/;"	f
sqlite3AllocateIndexObject	testdocs/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3AllocateIndexObject($/;"	f
sqlite3AlterBeginAddColumn	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3AlterFinishAddColumn	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f
sqlite3AlterFunctions	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFunctions(void){$/;"	f
sqlite3AlterRenameTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterRenameTable($/;"	f
sqlite3AnalysisLoad	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f
sqlite3Analyze	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3AnalyzeFunctions	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AnalyzeFunctions(void){$/;"	f
sqlite3ApiExit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f
sqlite3Apis	testdocs/sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3AppendChar	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AppendChar(StrAccum *p, int N, char c){$/;"	f
sqlite3ArrayAllocate	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ArrayAllocate($/;"	f
sqlite3AtoF	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){$/;"	f
sqlite3Atoi	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi(const char *z){$/;"	f
sqlite3Atoi64	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){$/;"	f
sqlite3Attach	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f
sqlite3AuthCheck	testdocs/sqlite3.c	/^# define sqlite3AuthCheck(/;"	d	file:
sqlite3AuthCheck	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthCheck($/;"	f
sqlite3AuthContextPop	testdocs/sqlite3.c	/^# define sqlite3AuthContextPop(/;"	d	file:
sqlite3AuthContextPop	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f
sqlite3AuthContextPush	testdocs/sqlite3.c	/^# define sqlite3AuthContextPush(/;"	d	file:
sqlite3AuthContextPush	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPush($/;"	f
sqlite3AuthRead	testdocs/sqlite3.c	/^# define sqlite3AuthRead(/;"	d	file:
sqlite3AuthRead	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthRead($/;"	f
sqlite3AuthReadCol	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthReadCol($/;"	f
sqlite3AutoExtList	testdocs/sqlite3.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	testdocs/sqlite3.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoLoadExtensions	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f
sqlite3Autoext	testdocs/sqlite3.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoincrementBegin	testdocs/sqlite3.c	/^# define sqlite3AutoincrementBegin(/;"	d	file:
sqlite3AutoincrementBegin	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f
sqlite3AutoincrementEnd	testdocs/sqlite3.c	/^# define sqlite3AutoincrementEnd(/;"	d	file:
sqlite3AutoincrementEnd	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f
sqlite3BackupRestart	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f
sqlite3BackupUpdate	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f
sqlite3BeginBenignMalloc	testdocs/sqlite3.c	/^  #define sqlite3BeginBenignMalloc(/;"	d	file:
sqlite3BeginBenignMalloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){$/;"	f
sqlite3BeginTransaction	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f
sqlite3BeginTrigger	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTrigger($/;"	f
sqlite3BeginWriteOperation	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f
sqlite3BenignMallocHooks	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks($/;"	f
sqlite3BinaryCompareCollSeq	testdocs/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq($/;"	f
sqlite3BitvecBuiltinTest	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f
sqlite3BitvecClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f
sqlite3BitvecCreate	testdocs/sqlite3.c	/^SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f
sqlite3BitvecDestroy	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){$/;"	f
sqlite3BitvecSet	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){$/;"	f
sqlite3BitvecTest	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecTestNotNull	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTestNotNull(Bitvec *p, u32 i){$/;"	f
sqlite3BlobCompare	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int sqlite3BlobCompare(const Mem *pB1, const Mem *pB2){$/;"	f	file:
sqlite3BlockedList	testdocs/sqlite3.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f
sqlite3BtreeBeginTrans	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f
sqlite3BtreeCheckpoint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3BtreeClearCursor	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClearTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f
sqlite3BtreeClearTableOfCursor	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTableOfCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClose	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){$/;"	f
sqlite3BtreeCloseCursor	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeCommit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){$/;"	f
sqlite3BtreeCommitPhaseOne	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f
sqlite3BtreeCommitPhaseTwo	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){$/;"	f
sqlite3BtreeConnectionCount	testdocs/sqlite3.c	/^# define sqlite3BtreeConnectionCount(/;"	d	file:
sqlite3BtreeConnectionCount	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeConnectionCount(Btree *p){$/;"	f
sqlite3BtreeCopyFile	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f
sqlite3BtreeCount	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f
sqlite3BtreeCreateTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f
sqlite3BtreeCursor	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursor($/;"	f
sqlite3BtreeCursorHasHint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasHint(BtCursor *pCsr, unsigned int mask){$/;"	f
sqlite3BtreeCursorHasMoved	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorHint	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorHint(BtCursor *pCur, int eHintType, ...){$/;"	f
sqlite3BtreeCursorHintFlags	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorHintFlags(BtCursor *pCur, unsigned x){$/;"	f
sqlite3BtreeCursorIsValid	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorIsValidNN	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValidNN(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorRestore	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorRestore(BtCursor *pCur, int *pDifferentRow){$/;"	f
sqlite3BtreeCursorSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){$/;"	f
sqlite3BtreeCursorZero	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f
sqlite3BtreeDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur, u8 flags){$/;"	f
sqlite3BtreeDropTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f
sqlite3BtreeEnter	testdocs/sqlite3.c	/^# define sqlite3BtreeEnter(/;"	d	file:
sqlite3BtreeEnter	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){$/;"	f
sqlite3BtreeEnterAll	testdocs/sqlite3.c	/^# define sqlite3BtreeEnterAll(/;"	d	file:
sqlite3BtreeEnterAll	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f
sqlite3BtreeEnterCursor	testdocs/sqlite3.c	/^# define sqlite3BtreeEnterCursor(/;"	d	file:
sqlite3BtreeEnterCursor	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeEof	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){$/;"	f
sqlite3BtreeFirst	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeGetAutoVacuum	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f
sqlite3BtreeGetFilename	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f
sqlite3BtreeGetJournalname	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f
sqlite3BtreeGetMeta	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f
sqlite3BtreeGetOptimalReserve	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetOptimalReserve(Btree *p){$/;"	f
sqlite3BtreeGetPageSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){$/;"	f
sqlite3BtreeGetReserveNoMutex	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserveNoMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsAllMutexes	testdocs/sqlite3.c	/^# define sqlite3BtreeHoldsAllMutexes(/;"	d	file:
sqlite3BtreeHoldsAllMutexes	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f
sqlite3BtreeHoldsMutex	testdocs/sqlite3.c	/^# define sqlite3BtreeHoldsMutex(/;"	d	file:
sqlite3BtreeHoldsMutex	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f
sqlite3BtreeIncrVacuum	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f
sqlite3BtreeIncrblobCursor	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeIncrblobCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeInsert	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeInsert($/;"	f
sqlite3BtreeIntegerKey	testdocs/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3BtreeIntegerKey(BtCursor *pCur){$/;"	f
sqlite3BtreeIntegrityCheck	testdocs/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck($/;"	f
sqlite3BtreeIsInBackup	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){$/;"	f
sqlite3BtreeIsInReadTrans	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f
sqlite3BtreeIsInTrans	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){$/;"	f
sqlite3BtreeIsReadonly	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){$/;"	f
sqlite3BtreeLast	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeLastPage	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){$/;"	f
sqlite3BtreeLeave	testdocs/sqlite3.c	/^# define sqlite3BtreeLeave(/;"	d	file:
sqlite3BtreeLeave	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){$/;"	f
sqlite3BtreeLeaveAll	testdocs/sqlite3.c	/^# define sqlite3BtreeLeaveAll(/;"	d	file:
sqlite3BtreeLeaveAll	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f
sqlite3BtreeLeaveCursor	testdocs/sqlite3.c	/^# define sqlite3BtreeLeaveCursor(/;"	d	file:
sqlite3BtreeLeaveCursor	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeLockTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f
sqlite3BtreeMaxPageCount	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f
sqlite3BtreeMovetoUnpacked	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked($/;"	f
sqlite3BtreeNewDb	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNewDb(Btree *p){$/;"	f
sqlite3BtreeNext	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeOpen	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeOpen($/;"	f
sqlite3BtreePager	testdocs/sqlite3.c	/^SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){$/;"	f
sqlite3BtreePayload	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePayload(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreePayloadChecked	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePayloadChecked(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreePayloadFetch	testdocs/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreePayloadFetch(BtCursor *pCur, u32 *pAmt){$/;"	f
sqlite3BtreePayloadSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreePayloadSize(BtCursor *pCur){$/;"	f
sqlite3BtreePrevious	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreePutData	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f
sqlite3BtreeRollback	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p, int tripCode, int writeOnly){$/;"	f
sqlite3BtreeRowCountEst	testdocs/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3BtreeRowCountEst(BtCursor *pCur){$/;"	f
sqlite3BtreeSavepoint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f
sqlite3BtreeSchema	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f
sqlite3BtreeSchemaLocked	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f
sqlite3BtreeSecureDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f
sqlite3BtreeSetAutoVacuum	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f
sqlite3BtreeSetCacheSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetMmapLimit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetMmapLimit(Btree *p, sqlite3_int64 szMmap){$/;"	f
sqlite3BtreeSetPageSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f
sqlite3BtreeSetPagerFlags	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPagerFlags($/;"	f
sqlite3BtreeSetSpillSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetSpillSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetVersion	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f
sqlite3BtreeSharable	testdocs/sqlite3.c	/^# define sqlite3BtreeSharable(/;"	d	file:
sqlite3BtreeSharable	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){$/;"	f
sqlite3BtreeTripAllCursors	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode, int writeOnly){$/;"	f
sqlite3BtreeUpdateMeta	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f
sqlite3BuiltinFunctions	testdocs/sqlite3.c	/^SQLITE_PRIVATE FuncDefHash sqlite3BuiltinFunctions;$/;"	v
sqlite3CantopenError	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CantopenError(int lineno){$/;"	f
sqlite3ChangeCookie	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f
sqlite3CheckCollSeq	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f
sqlite3CheckObjectName	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f
sqlite3Checkpoint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3ClearStatTables	testdocs/sqlite3.c	/^static void sqlite3ClearStatTables($/;"	f	file:
sqlite3ClearTempRegCache	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse *pParse){$/;"	f
sqlite3Close	testdocs/sqlite3.c	/^static int sqlite3Close(sqlite3 *db, int forceZombie){$/;"	f	file:
sqlite3CloseExtensions	testdocs/sqlite3.c	/^# define sqlite3CloseExtensions(/;"	d	file:
sqlite3CloseExtensions	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){$/;"	f
sqlite3CloseSavepoints	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f
sqlite3CodeDropTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){$/;"	f
sqlite3CodeRowTrigger	testdocs/sqlite3.c	/^# define sqlite3CodeRowTrigger(/;"	d	file:
sqlite3CodeRowTrigger	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTrigger($/;"	f
sqlite3CodeRowTriggerDirect	testdocs/sqlite3.c	/^# define sqlite3CodeRowTriggerDirect(/;"	d	file:
sqlite3CodeRowTriggerDirect	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect($/;"	f
sqlite3CodeSubselect	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeSubselect($/;"	f
sqlite3CodeVerifyNamedSchema	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){$/;"	f
sqlite3CodeVerifySchema	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f
sqlite3CollapseDatabaseArray	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CollapseDatabaseArray(sqlite3 *db){$/;"	f
sqlite3ColumnDefault	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f
sqlite3ColumnOfIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){$/;"	f
sqlite3ColumnPropertiesFromName	testdocs/sqlite3.c	/^# define sqlite3ColumnPropertiesFromName(/;"	d	file:
sqlite3ColumnPropertiesFromName	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnPropertiesFromName(Table *pTab, Column *pCol){$/;"	f
sqlite3ColumnType	testdocs/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3ColumnType(Column *pCol, char *zDflt){$/;"	f
sqlite3ColumnsFromExprList	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ColumnsFromExprList($/;"	f
sqlite3CommitInternalChanges	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f
sqlite3CommitTransaction	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){$/;"	f
sqlite3CompareAffinity	testdocs/sqlite3.c	/^SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f
sqlite3CompleteInsertion	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CompleteInsertion($/;"	f
sqlite3Config	testdocs/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3Config	testdocs/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	testdocs/sqlite3.c	/^  #define sqlite3ConnectionBlocked(/;"	d	file:
sqlite3ConnectionBlocked	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f
sqlite3ConnectionClosed	testdocs/sqlite3.c	/^  #define sqlite3ConnectionClosed(/;"	d	file:
sqlite3ConnectionClosed	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f
sqlite3ConnectionUnlocked	testdocs/sqlite3.c	/^  #define sqlite3ConnectionUnlocked(/;"	d	file:
sqlite3ConnectionUnlocked	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f
sqlite3CorruptError	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CorruptError(int lineno){$/;"	f
sqlite3Coverage	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Coverage(int x){$/;"	f
sqlite3CreateColumnExpr	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f
sqlite3CreateForeignKey	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateForeignKey($/;"	f
sqlite3CreateFunc	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CreateFunc($/;"	f
sqlite3CreateIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateIndex($/;"	f
sqlite3CreateView	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateView($/;"	f
sqlite3CtypeMap	testdocs/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3CtypeMap	testdocs/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];$/;"	v
sqlite3DbFree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f
sqlite3DbFreeNN	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFreeNN(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocRaw	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMallocRawNN	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRawNN(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMallocSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocZero	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMaskAllZero	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMaskAllZero(yDbMask m){$/;"	f
sqlite3DbNameToBtree	testdocs/sqlite3.c	/^SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3DbRealloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbReallocOrFree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbStrDup	testdocs/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f
sqlite3DbStrNDup	testdocs/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, u64 n){$/;"	f
sqlite3DbstatRegister	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbstatRegister(sqlite3 *db){ return SQLITE_OK; }$/;"	f
sqlite3DbstatRegister	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbstatRegister(sqlite3 *db){$/;"	f
sqlite3DebugPrintf	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f
sqlite3DecOrHexToI64	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3DecOrHexToI64(const char *z, i64 *pOut){$/;"	f
sqlite3DefaultMutex	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultRowEst	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){$/;"	f
sqlite3DeferForeignKey	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f
sqlite3DeleteColumnNames	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteFrom	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteFrom($/;"	f
sqlite3DeleteIndexSamples	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3DeleteTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteTrigger	testdocs/sqlite3.c	/^# define sqlite3DeleteTrigger(/;"	d	file:
sqlite3DeleteTrigger	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f
sqlite3DeleteTriggerStep	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f
sqlite3Dequote	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Dequote(char *z){$/;"	f
sqlite3Detach	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f
sqlite3DropIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f
sqlite3DropTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f
sqlite3DropTrigger	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f
sqlite3DropTriggerPtr	testdocs/sqlite3.c	/^# define sqlite3DropTriggerPtr(/;"	d	file:
sqlite3DropTriggerPtr	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f
sqlite3EndBenignMalloc	testdocs/sqlite3.c	/^  #define sqlite3EndBenignMalloc(/;"	d	file:
sqlite3EndBenignMalloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){$/;"	f
sqlite3EndTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndTable($/;"	f
sqlite3ErrName	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrName(int rc){$/;"	f
sqlite3ErrStr	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){$/;"	f
sqlite3Error	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code){$/;"	f
sqlite3ErrorFinish	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void  sqlite3ErrorFinish(sqlite3 *db, int err_code){$/;"	f	file:
sqlite3ErrorMsg	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3ErrorWithMsg	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorWithMsg(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f
sqlite3ExpirePreparedStatements	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f
sqlite3Expr	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3Expr($/;"	f
sqlite3ExprAddCollateString	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateString(Parse *pParse, Expr *pExpr, const char *zC){$/;"	f
sqlite3ExprAddCollateToken	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateToken($/;"	f
sqlite3ExprAffinity	testdocs/sqlite3.c	/^SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){$/;"	f
sqlite3ExprAlloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAlloc($/;"	f
sqlite3ExprAnalyzeAggList	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f
sqlite3ExprAnalyzeAggregates	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f
sqlite3ExprAnd	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f
sqlite3ExprAssignVarNumber	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr, u32 n){$/;"	f
sqlite3ExprAttachSubtrees	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAttachSubtrees($/;"	f
sqlite3ExprCacheAffinityChange	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f
sqlite3ExprCacheClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){$/;"	f
sqlite3ExprCachePinRegister	testdocs/sqlite3.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:
sqlite3ExprCachePop	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse){$/;"	f
sqlite3ExprCachePush	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){$/;"	f
sqlite3ExprCacheRemove	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprCacheStore	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f
sqlite3ExprCanBeNull	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){$/;"	f
sqlite3ExprCheckHeight	testdocs/sqlite3.c	/^  #define sqlite3ExprCheckHeight(/;"	d	file:
sqlite3ExprCheckHeight	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f
sqlite3ExprCheckIN	testdocs/sqlite3.c	/^# define sqlite3ExprCheckIN(/;"	d	file:
sqlite3ExprCheckIN	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCheckIN(Parse *pParse, Expr *pIn){$/;"	f
sqlite3ExprCode	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAndCache	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAtInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeAtInit($/;"	f
sqlite3ExprCodeCopy	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeCopy(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeExprList	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeExprList($/;"	f
sqlite3ExprCodeFactorable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeGetColumn	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeGetColumn($/;"	f
sqlite3ExprCodeGetColumnOfTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable($/;"	f
sqlite3ExprCodeGetColumnToReg	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnToReg($/;"	f
sqlite3ExprCodeIN	testdocs/sqlite3.c	/^static void sqlite3ExprCodeIN($/;"	f	file:
sqlite3ExprCodeLoadIndexColumn	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeLoadIndexColumn($/;"	f
sqlite3ExprCodeMove	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeTarget	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeTemp	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f
sqlite3ExprCollSeq	testdocs/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCompare	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB, int iTab){$/;"	f
sqlite3ExprCompareSkip	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompareSkip(Expr *pA, Expr *pB, int iTab){$/;"	f
sqlite3ExprContainsSubquery	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprContainsSubquery(Expr *p){$/;"	f
sqlite3ExprCoveredByIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCoveredByIndex($/;"	f
sqlite3ExprDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f
sqlite3ExprDeleteNN	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void sqlite3ExprDeleteNN(sqlite3 *db, Expr *p){$/;"	f	file:
sqlite3ExprDup	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f
sqlite3ExprForVectorField	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprForVectorField($/;"	f
sqlite3ExprFunction	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f
sqlite3ExprIfFalse	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIfFalseDup	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalseDup(Parse *pParse, Expr *pExpr, int dest,int jumpIfNull){$/;"	f
sqlite3ExprIfTrue	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprImpliesExpr	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprImpliesExpr(Expr *pE1, Expr *pE2, int iTab){$/;"	f
sqlite3ExprIsConstant	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){$/;"	f
sqlite3ExprIsConstantNotJoin	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f
sqlite3ExprIsConstantOrFunction	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p, u8 isInit){$/;"	f
sqlite3ExprIsConstantOrGroupBy	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrGroupBy(Parse *pParse, Expr *p, ExprList *pGroupBy){$/;"	f
sqlite3ExprIsInteger	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f
sqlite3ExprIsTableConstant	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsTableConstant(Expr *p, int iCur){$/;"	f
sqlite3ExprIsVector	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsVector(Expr *pExpr){$/;"	f
sqlite3ExprListAppend	testdocs/sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppend($/;"	f
sqlite3ExprListAppendVector	testdocs/sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppendVector($/;"	f
sqlite3ExprListCheckLength	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListCheckLength($/;"	f
sqlite3ExprListCompare	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB, int iTab){$/;"	f
sqlite3ExprListDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f
sqlite3ExprListDup	testdocs/sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f
sqlite3ExprListFlags	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3ExprListFlags(const ExprList *pList){$/;"	f
sqlite3ExprListSetName	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetName($/;"	f
sqlite3ExprListSetSortOrder	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder){$/;"	f
sqlite3ExprListSetSpan	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSpan($/;"	f
sqlite3ExprNeedsNoAffinityChange	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f
sqlite3ExprSetHeightAndFlags	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){$/;"	f
sqlite3ExprSkipCollate	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSkipCollate(Expr *pExpr){$/;"	f
sqlite3ExprVectorSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprVectorSize(Expr *pExpr){$/;"	f
sqlite3ExprWalkNoop	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f
sqlite3FaultSim	testdocs/sqlite3.c	/^# define sqlite3FaultSim(/;"	d	file:
sqlite3FaultSim	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FaultSim(int iTest){$/;"	f
sqlite3FileSuffix3	testdocs/sqlite3.c	/^# define sqlite3FileSuffix3(/;"	d	file:
sqlite3FileSuffix3	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){$/;"	f
sqlite3FindCollSeq	testdocs/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq($/;"	f
sqlite3FindDb	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f
sqlite3FindDbName	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f
sqlite3FindFunction	testdocs/sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3FindFunction($/;"	f
sqlite3FindInIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindInIndex($/;"	f
sqlite3FindIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f
sqlite3FindTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f
sqlite3FinishCoding	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){$/;"	f
sqlite3FinishTrigger	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishTrigger($/;"	f
sqlite3FixExpr	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExpr($/;"	f
sqlite3FixExprList	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExprList($/;"	f
sqlite3FixInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FixInit($/;"	f
sqlite3FixSelect	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSelect($/;"	f
sqlite3FixSrcList	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSrcList($/;"	f
sqlite3FixTriggerStep	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixTriggerStep($/;"	f
sqlite3FkActions	testdocs/sqlite3.c	/^  #define sqlite3FkActions(/;"	d	file:
sqlite3FkActions	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkActions($/;"	f
sqlite3FkCheck	testdocs/sqlite3.c	/^  #define sqlite3FkCheck(/;"	d	file:
sqlite3FkCheck	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkCheck($/;"	f
sqlite3FkDelete	testdocs/sqlite3.c	/^  #define sqlite3FkDelete(/;"	d	file:
sqlite3FkDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f
sqlite3FkDropTable	testdocs/sqlite3.c	/^  #define sqlite3FkDropTable(/;"	d	file:
sqlite3FkDropTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f
sqlite3FkLocateIndex	testdocs/sqlite3.c	/^  #define sqlite3FkLocateIndex(/;"	d	file:
sqlite3FkLocateIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkLocateIndex($/;"	f
sqlite3FkOldmask	testdocs/sqlite3.c	/^  #define sqlite3FkOldmask(/;"	d	file:
sqlite3FkOldmask	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3FkOldmask($/;"	f
sqlite3FkReferences	testdocs/sqlite3.c	/^  #define sqlite3FkReferences(/;"	d	file:
sqlite3FkReferences	testdocs/sqlite3.c	/^SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){$/;"	f
sqlite3FkRequired	testdocs/sqlite3.c	/^  #define sqlite3FkRequired(/;"	d	file:
sqlite3FkRequired	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkRequired($/;"	f
sqlite3Fts3AllSegdirs	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3AllSegdirs($/;"	f
sqlite3Fts3Always	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Always(int b) { assert( b ); return b; }$/;"	f
sqlite3Fts3CacheDeferredDoclists	testdocs/sqlite3.c	/^# define sqlite3Fts3CacheDeferredDoclists(/;"	d	file:
sqlite3Fts3CacheDeferredDoclists	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3Corrupt	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Corrupt(){$/;"	f
sqlite3Fts3CreateStatTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3CreateStatTable(int *pRc, Fts3Table *p){$/;"	f
sqlite3Fts3DeferToken	testdocs/sqlite3.c	/^# define sqlite3Fts3DeferToken(/;"	d	file:
sqlite3Fts3DeferToken	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferToken($/;"	f
sqlite3Fts3DeferredTokenList	testdocs/sqlite3.c	/^# define sqlite3Fts3DeferredTokenList(/;"	d	file:
sqlite3Fts3DeferredTokenList	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList($/;"	f
sqlite3Fts3Dequote	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){$/;"	f
sqlite3Fts3DoclistNext	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistNext($/;"	f
sqlite3Fts3DoclistPrev	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistPrev($/;"	f
sqlite3Fts3ErrMsg	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ErrMsg(char **pzErr, const char *zFormat, ...){$/;"	f
sqlite3Fts3EvalPhraseCleanup	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){$/;"	f
sqlite3Fts3EvalPhrasePoslist	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhrasePoslist($/;"	f
sqlite3Fts3EvalPhraseStats	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats($/;"	f
sqlite3Fts3EvalTestDeferred	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalTestDeferred(Fts3Cursor *pCsr, int *pRc){$/;"	f
sqlite3Fts3ExprFree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *pDel){$/;"	f
sqlite3Fts3ExprInitTestInterface	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){$/;"	f
sqlite3Fts3ExprParse	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprParse($/;"	f
sqlite3Fts3FirstFilter	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3FirstFilter($/;"	f
sqlite3Fts3FreeDeferredDoclists	testdocs/sqlite3.c	/^# define sqlite3Fts3FreeDeferredDoclists(/;"	d	file:
sqlite3Fts3FreeDeferredDoclists	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredTokens	testdocs/sqlite3.c	/^# define sqlite3Fts3FreeDeferredTokens(/;"	d	file:
sqlite3Fts3FreeDeferredTokens	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3GetVarint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *pBuf, sqlite_int64 *v){$/;"	f
sqlite3Fts3GetVarint32	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){$/;"	f
sqlite3Fts3HashClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){$/;"	f
sqlite3Fts3HashFind	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){$/;"	f
sqlite3Fts3HashFindElem	testdocs/sqlite3.c	/^SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem($/;"	f
sqlite3Fts3HashInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){$/;"	f
sqlite3Fts3HashInsert	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashInsert($/;"	f
sqlite3Fts3IcuTokenizerModule	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule($/;"	f
sqlite3Fts3Incrmerge	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Incrmerge(Fts3Table *p, int nMerge, int nMin){$/;"	f
sqlite3Fts3Init	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){$/;"	f
sqlite3Fts3InitAux	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){$/;"	f
sqlite3Fts3InitHashTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitHashTable($/;"	f
sqlite3Fts3InitTok	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3 *db, Fts3Hash *pHash){$/;"	f
sqlite3Fts3InitTokenizer	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTokenizer($/;"	f
sqlite3Fts3IsIdChar	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){$/;"	f
sqlite3Fts3MIBufferFree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3MIBufferFree(MatchinfoBuffer *p){$/;"	f
sqlite3Fts3Matchinfo	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Matchinfo($/;"	f
sqlite3Fts3MaxLevel	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MaxLevel(Fts3Table *p, int *pnMax){$/;"	f
sqlite3Fts3MsrIncrNext	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext($/;"	f
sqlite3Fts3MsrIncrRestart	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){$/;"	f
sqlite3Fts3MsrIncrStart	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart($/;"	f
sqlite3Fts3MsrOvfl	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrOvfl($/;"	f
sqlite3Fts3Never	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Never(int b)  { assert( !b ); return b; }$/;"	f
sqlite3Fts3NextToken	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){$/;"	f
sqlite3Fts3Offsets	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Offsets($/;"	f
sqlite3Fts3OpenTokenizer	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer($/;"	f
sqlite3Fts3Optimize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsFlush	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){$/;"	f
sqlite3Fts3PorterTokenizerModule	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule($/;"	f
sqlite3Fts3PutVarint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){$/;"	f
sqlite3Fts3ReadBlock	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadBlock($/;"	f
sqlite3Fts3SegReaderCursor	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor($/;"	f
sqlite3Fts3SegReaderFinish	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish($/;"	f
sqlite3Fts3SegReaderFree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){$/;"	f
sqlite3Fts3SegReaderNew	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderNew($/;"	f
sqlite3Fts3SegReaderPending	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderPending($/;"	f
sqlite3Fts3SegReaderStart	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStart($/;"	f
sqlite3Fts3SegReaderStep	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStep($/;"	f
sqlite3Fts3SegmentsClose	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){$/;"	f
sqlite3Fts3SelectDocsize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDocsize($/;"	f
sqlite3Fts3SelectDoctotal	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal($/;"	f
sqlite3Fts3SimpleTokenizerModule	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule($/;"	f
sqlite3Fts3Snippet	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Snippet($/;"	f
sqlite3Fts3UnicodeTokenizer	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3UnicodeTokenizer(sqlite3_tokenizer_module const **ppModule){$/;"	f
sqlite3Fts3UpdateMethod	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3UpdateMethod($/;"	f
sqlite3Fts3VarintLen	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){$/;"	f
sqlite3Fts5AuxInit	testdocs/sqlite3.c	/^static int sqlite3Fts5AuxInit(fts5_api *pApi){$/;"	f	file:
sqlite3Fts5BufferAppendBlob	testdocs/sqlite3.c	/^static void sqlite3Fts5BufferAppendBlob($/;"	f	file:
sqlite3Fts5BufferAppendPrintf	testdocs/sqlite3.c	/^static void sqlite3Fts5BufferAppendPrintf($/;"	f	file:
sqlite3Fts5BufferAppendString	testdocs/sqlite3.c	/^static void sqlite3Fts5BufferAppendString($/;"	f	file:
sqlite3Fts5BufferAppendVarint	testdocs/sqlite3.c	/^static void sqlite3Fts5BufferAppendVarint(int *pRc, Fts5Buffer *pBuf, i64 iVal){$/;"	f	file:
sqlite3Fts5BufferFree	testdocs/sqlite3.c	/^static void sqlite3Fts5BufferFree(Fts5Buffer *pBuf){$/;"	f	file:
sqlite3Fts5BufferSet	testdocs/sqlite3.c	/^static void sqlite3Fts5BufferSet($/;"	f	file:
sqlite3Fts5BufferSize	testdocs/sqlite3.c	/^static int sqlite3Fts5BufferSize(int *pRc, Fts5Buffer *pBuf, u32 nByte){$/;"	f	file:
sqlite3Fts5BufferZero	testdocs/sqlite3.c	/^static void sqlite3Fts5BufferZero(Fts5Buffer *pBuf){$/;"	f	file:
sqlite3Fts5ConfigDeclareVtab	testdocs/sqlite3.c	/^static int sqlite3Fts5ConfigDeclareVtab(Fts5Config *pConfig){$/;"	f	file:
sqlite3Fts5ConfigFree	testdocs/sqlite3.c	/^static void sqlite3Fts5ConfigFree(Fts5Config *pConfig){$/;"	f	file:
sqlite3Fts5ConfigLoad	testdocs/sqlite3.c	/^static int sqlite3Fts5ConfigLoad(Fts5Config *pConfig, int iCookie){$/;"	f	file:
sqlite3Fts5ConfigParse	testdocs/sqlite3.c	/^static int sqlite3Fts5ConfigParse($/;"	f	file:
sqlite3Fts5ConfigParseRank	testdocs/sqlite3.c	/^static int sqlite3Fts5ConfigParseRank($/;"	f	file:
sqlite3Fts5ConfigSetValue	testdocs/sqlite3.c	/^static int sqlite3Fts5ConfigSetValue($/;"	f	file:
sqlite3Fts5Corrupt	testdocs/sqlite3.c	/^static int sqlite3Fts5Corrupt() { return SQLITE_CORRUPT_VTAB; }$/;"	f	file:
sqlite3Fts5CreateTable	testdocs/sqlite3.c	/^static int sqlite3Fts5CreateTable($/;"	f	file:
sqlite3Fts5Dequote	testdocs/sqlite3.c	/^static void sqlite3Fts5Dequote(char *z){$/;"	f	file:
sqlite3Fts5DropAll	testdocs/sqlite3.c	/^static int sqlite3Fts5DropAll(Fts5Config *pConfig){$/;"	f	file:
sqlite3Fts5ExprCheckPoslists	testdocs/sqlite3.c	/^static void sqlite3Fts5ExprCheckPoslists(Fts5Expr *pExpr, i64 iRowid){$/;"	f	file:
sqlite3Fts5ExprClearPoslists	testdocs/sqlite3.c	/^static Fts5PoslistPopulator *sqlite3Fts5ExprClearPoslists(Fts5Expr *pExpr, int bLive){$/;"	f	file:
sqlite3Fts5ExprClonePhrase	testdocs/sqlite3.c	/^static int sqlite3Fts5ExprClonePhrase($/;"	f	file:
sqlite3Fts5ExprEof	testdocs/sqlite3.c	/^static int sqlite3Fts5ExprEof(Fts5Expr *p){$/;"	f	file:
sqlite3Fts5ExprFirst	testdocs/sqlite3.c	/^static int sqlite3Fts5ExprFirst(Fts5Expr *p, Fts5Index *pIdx, i64 iFirst, int bDesc){$/;"	f	file:
sqlite3Fts5ExprFree	testdocs/sqlite3.c	/^static void sqlite3Fts5ExprFree(Fts5Expr *p){$/;"	f	file:
sqlite3Fts5ExprInit	testdocs/sqlite3.c	/^static int sqlite3Fts5ExprInit(Fts5Global *pGlobal, sqlite3 *db){$/;"	f	file:
sqlite3Fts5ExprNew	testdocs/sqlite3.c	/^static int sqlite3Fts5ExprNew($/;"	f	file:
sqlite3Fts5ExprNext	testdocs/sqlite3.c	/^static int sqlite3Fts5ExprNext(Fts5Expr *p, i64 iLast){$/;"	f	file:
sqlite3Fts5ExprPhraseCollist	testdocs/sqlite3.c	/^static int sqlite3Fts5ExprPhraseCollist($/;"	f	file:
sqlite3Fts5ExprPhraseCount	testdocs/sqlite3.c	/^static int sqlite3Fts5ExprPhraseCount(Fts5Expr *pExpr){$/;"	f	file:
sqlite3Fts5ExprPhraseSize	testdocs/sqlite3.c	/^static int sqlite3Fts5ExprPhraseSize(Fts5Expr *pExpr, int iPhrase){$/;"	f	file:
sqlite3Fts5ExprPopulatePoslists	testdocs/sqlite3.c	/^static int sqlite3Fts5ExprPopulatePoslists($/;"	f	file:
sqlite3Fts5ExprPoslist	testdocs/sqlite3.c	/^static int sqlite3Fts5ExprPoslist(Fts5Expr *pExpr, int iPhrase, const u8 **pa){$/;"	f	file:
sqlite3Fts5ExprRowid	testdocs/sqlite3.c	/^static i64 sqlite3Fts5ExprRowid(Fts5Expr *p){$/;"	f	file:
sqlite3Fts5Get32	testdocs/sqlite3.c	/^static int sqlite3Fts5Get32(const u8 *aBuf){$/;"	f	file:
sqlite3Fts5GetTokenizer	testdocs/sqlite3.c	/^static int sqlite3Fts5GetTokenizer($/;"	f	file:
sqlite3Fts5GetVarint	testdocs/sqlite3.c	/^static u8 sqlite3Fts5GetVarint(const unsigned char *p, u64 *v){$/;"	f	file:
sqlite3Fts5GetVarint32	testdocs/sqlite3.c	/^static int sqlite3Fts5GetVarint32(const unsigned char *p, u32 *v){$/;"	f	file:
sqlite3Fts5GetVarintLen	testdocs/sqlite3.c	/^static int sqlite3Fts5GetVarintLen(u32 iVal){$/;"	f	file:
sqlite3Fts5HashClear	testdocs/sqlite3.c	/^static void sqlite3Fts5HashClear(Fts5Hash *pHash){$/;"	f	file:
sqlite3Fts5HashFree	testdocs/sqlite3.c	/^static void sqlite3Fts5HashFree(Fts5Hash *pHash){$/;"	f	file:
sqlite3Fts5HashNew	testdocs/sqlite3.c	/^static int sqlite3Fts5HashNew(Fts5Config *pConfig, Fts5Hash **ppNew, int *pnByte){$/;"	f	file:
sqlite3Fts5HashQuery	testdocs/sqlite3.c	/^static int sqlite3Fts5HashQuery($/;"	f	file:
sqlite3Fts5HashScanEntry	testdocs/sqlite3.c	/^static void sqlite3Fts5HashScanEntry($/;"	f	file:
sqlite3Fts5HashScanEof	testdocs/sqlite3.c	/^static int sqlite3Fts5HashScanEof(Fts5Hash *p){$/;"	f	file:
sqlite3Fts5HashScanInit	testdocs/sqlite3.c	/^static int sqlite3Fts5HashScanInit($/;"	f	file:
sqlite3Fts5HashScanNext	testdocs/sqlite3.c	/^static void sqlite3Fts5HashScanNext(Fts5Hash *p){$/;"	f	file:
sqlite3Fts5HashWrite	testdocs/sqlite3.c	/^static int sqlite3Fts5HashWrite($/;"	f	file:
sqlite3Fts5IndexBeginWrite	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexBeginWrite(Fts5Index *p, int bDelete, i64 iRowid){$/;"	f	file:
sqlite3Fts5IndexCharlenToBytelen	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexCharlenToBytelen($/;"	f	file:
sqlite3Fts5IndexClose	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexClose(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexEntryCksum	testdocs/sqlite3.c	/^static u64 sqlite3Fts5IndexEntryCksum($/;"	f	file:
sqlite3Fts5IndexFromCsrid	testdocs/sqlite3.c	/^static Fts5Index *sqlite3Fts5IndexFromCsrid($/;"	f	file:
sqlite3Fts5IndexGetAverages	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexGetAverages(Fts5Index *p, i64 *pnRow, i64 *anSize){$/;"	f	file:
sqlite3Fts5IndexInit	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexInit(sqlite3 *db){$/;"	f	file:
sqlite3Fts5IndexIntegrityCheck	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexIntegrityCheck(Fts5Index *p, u64 cksum){$/;"	f	file:
sqlite3Fts5IndexLoadConfig	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexLoadConfig(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexMerge	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexMerge(Fts5Index *p, int nMerge){$/;"	f	file:
sqlite3Fts5IndexOpen	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexOpen($/;"	f	file:
sqlite3Fts5IndexOptimize	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexOptimize(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexQuery	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexQuery($/;"	f	file:
sqlite3Fts5IndexReads	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexReads(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexReinit	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexReinit(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexReset	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexReset(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexRollback	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexRollback(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexSetAverages	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexSetAverages(Fts5Index *p, const u8 *pData, int nData){$/;"	f	file:
sqlite3Fts5IndexSetCookie	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexSetCookie(Fts5Index *p, int iNew){$/;"	f	file:
sqlite3Fts5IndexSync	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexSync(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexWrite	testdocs/sqlite3.c	/^static int sqlite3Fts5IndexWrite($/;"	f	file:
sqlite3Fts5Init	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts5Init(sqlite3 *db){$/;"	f
sqlite3Fts5IsBareword	testdocs/sqlite3.c	/^static int sqlite3Fts5IsBareword(char t){$/;"	f	file:
sqlite3Fts5IterClose	testdocs/sqlite3.c	/^static void sqlite3Fts5IterClose(Fts5IndexIter *pIndexIter){$/;"	f	file:
sqlite3Fts5IterEof	testdocs/sqlite3.c	/^#define sqlite3Fts5IterEof(/;"	d	file:
sqlite3Fts5IterNext	testdocs/sqlite3.c	/^static int sqlite3Fts5IterNext(Fts5IndexIter *pIndexIter){$/;"	f	file:
sqlite3Fts5IterNextFrom	testdocs/sqlite3.c	/^static int sqlite3Fts5IterNextFrom(Fts5IndexIter *pIndexIter, i64 iMatch){$/;"	f	file:
sqlite3Fts5IterNextScan	testdocs/sqlite3.c	/^static int sqlite3Fts5IterNextScan(Fts5IndexIter *pIndexIter){$/;"	f	file:
sqlite3Fts5IterTerm	testdocs/sqlite3.c	/^static const char *sqlite3Fts5IterTerm(Fts5IndexIter *pIndexIter, int *pn){$/;"	f	file:
sqlite3Fts5MallocZero	testdocs/sqlite3.c	/^static void *sqlite3Fts5MallocZero(int *pRc, int nByte){$/;"	f	file:
sqlite3Fts5Mprintf	testdocs/sqlite3.c	/^static char *sqlite3Fts5Mprintf(int *pRc, const char *zFmt, ...){$/;"	f	file:
sqlite3Fts5ParseColset	testdocs/sqlite3.c	/^static Fts5Colset *sqlite3Fts5ParseColset($/;"	f	file:
sqlite3Fts5ParseColsetInvert	testdocs/sqlite3.c	/^static Fts5Colset *sqlite3Fts5ParseColsetInvert(Fts5Parse *pParse, Fts5Colset *p){$/;"	f	file:
sqlite3Fts5ParseError	testdocs/sqlite3.c	/^static void sqlite3Fts5ParseError(Fts5Parse *pParse, const char *zFmt, ...){$/;"	f	file:
sqlite3Fts5ParseFinished	testdocs/sqlite3.c	/^static void sqlite3Fts5ParseFinished(Fts5Parse *pParse, Fts5ExprNode *p){$/;"	f	file:
sqlite3Fts5ParseImplicitAnd	testdocs/sqlite3.c	/^static Fts5ExprNode *sqlite3Fts5ParseImplicitAnd($/;"	f	file:
sqlite3Fts5ParseNear	testdocs/sqlite3.c	/^static void sqlite3Fts5ParseNear(Fts5Parse *pParse, Fts5Token *pTok){$/;"	f	file:
sqlite3Fts5ParseNearset	testdocs/sqlite3.c	/^static Fts5ExprNearset *sqlite3Fts5ParseNearset($/;"	f	file:
sqlite3Fts5ParseNearsetFree	testdocs/sqlite3.c	/^static void sqlite3Fts5ParseNearsetFree(Fts5ExprNearset *pNear){$/;"	f	file:
sqlite3Fts5ParseNode	testdocs/sqlite3.c	/^static Fts5ExprNode *sqlite3Fts5ParseNode($/;"	f	file:
sqlite3Fts5ParseNodeFree	testdocs/sqlite3.c	/^static void sqlite3Fts5ParseNodeFree(Fts5ExprNode *p){$/;"	f	file:
sqlite3Fts5ParsePhraseFree	testdocs/sqlite3.c	/^static void sqlite3Fts5ParsePhraseFree(Fts5ExprPhrase *pPhrase){$/;"	f	file:
sqlite3Fts5ParseSetColset	testdocs/sqlite3.c	/^static void sqlite3Fts5ParseSetColset($/;"	f	file:
sqlite3Fts5ParseSetDistance	testdocs/sqlite3.c	/^static void sqlite3Fts5ParseSetDistance($/;"	f	file:
sqlite3Fts5ParseTerm	testdocs/sqlite3.c	/^static Fts5ExprPhrase *sqlite3Fts5ParseTerm($/;"	f	file:
sqlite3Fts5Parser	testdocs/sqlite3.c	/^static void sqlite3Fts5Parser($/;"	f	file:
sqlite3Fts5ParserARG_FETCH	testdocs/sqlite3.c	/^#define sqlite3Fts5ParserARG_FETCH /;"	d	file:
sqlite3Fts5ParserARG_PDECL	testdocs/sqlite3.c	/^#define sqlite3Fts5ParserARG_PDECL /;"	d	file:
sqlite3Fts5ParserARG_SDECL	testdocs/sqlite3.c	/^#define sqlite3Fts5ParserARG_SDECL /;"	d	file:
sqlite3Fts5ParserARG_STORE	testdocs/sqlite3.c	/^#define sqlite3Fts5ParserARG_STORE /;"	d	file:
sqlite3Fts5ParserAlloc	testdocs/sqlite3.c	/^static void *sqlite3Fts5ParserAlloc(void *(*mallocProc)(fts5YYMALLOCARGTYPE)){$/;"	f	file:
sqlite3Fts5ParserFTS5TOKENTYPE	testdocs/sqlite3.c	/^#define sqlite3Fts5ParserFTS5TOKENTYPE /;"	d	file:
sqlite3Fts5ParserFinalize	testdocs/sqlite3.c	/^static void sqlite3Fts5ParserFinalize(void *p){$/;"	f	file:
sqlite3Fts5ParserFree	testdocs/sqlite3.c	/^static void sqlite3Fts5ParserFree($/;"	f	file:
sqlite3Fts5ParserInit	testdocs/sqlite3.c	/^static void sqlite3Fts5ParserInit(void *fts5yypParser){$/;"	f	file:
sqlite3Fts5ParserStackPeak	testdocs/sqlite3.c	/^static int sqlite3Fts5ParserStackPeak(void *p){$/;"	f	file:
sqlite3Fts5ParserTrace	testdocs/sqlite3.c	/^static void sqlite3Fts5ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f	file:
sqlite3Fts5PoslistNext64	testdocs/sqlite3.c	/^static int sqlite3Fts5PoslistNext64($/;"	f	file:
sqlite3Fts5PoslistReaderInit	testdocs/sqlite3.c	/^static int sqlite3Fts5PoslistReaderInit($/;"	f	file:
sqlite3Fts5PoslistReaderNext	testdocs/sqlite3.c	/^static int sqlite3Fts5PoslistReaderNext(Fts5PoslistReader *pIter){$/;"	f	file:
sqlite3Fts5PoslistSafeAppend	testdocs/sqlite3.c	/^static void sqlite3Fts5PoslistSafeAppend($/;"	f	file:
sqlite3Fts5PoslistWriterAppend	testdocs/sqlite3.c	/^static int sqlite3Fts5PoslistWriterAppend($/;"	f	file:
sqlite3Fts5Put32	testdocs/sqlite3.c	/^static void sqlite3Fts5Put32(u8 *aBuf, int iVal){$/;"	f	file:
sqlite3Fts5PutVarint	testdocs/sqlite3.c	/^static int sqlite3Fts5PutVarint(unsigned char *p, u64 v){$/;"	f	file:
sqlite3Fts5StorageClose	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageClose(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageConfigValue	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageConfigValue($/;"	f	file:
sqlite3Fts5StorageContentInsert	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageContentInsert($/;"	f	file:
sqlite3Fts5StorageDelete	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageDelete(Fts5Storage *p, i64 iDel, sqlite3_value **apVal){$/;"	f	file:
sqlite3Fts5StorageDeleteAll	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageDeleteAll(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageDocsize	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageDocsize(Fts5Storage *p, i64 iRowid, int *aCol){$/;"	f	file:
sqlite3Fts5StorageIndexInsert	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageIndexInsert($/;"	f	file:
sqlite3Fts5StorageIntegrity	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageIntegrity(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageMerge	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageMerge(Fts5Storage *p, int nMerge){$/;"	f	file:
sqlite3Fts5StorageOpen	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageOpen($/;"	f	file:
sqlite3Fts5StorageOptimize	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageOptimize(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageRebuild	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageRebuild(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageRename	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageRename(Fts5Storage *pStorage, const char *zName){$/;"	f	file:
sqlite3Fts5StorageReset	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageReset(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageRollback	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageRollback(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageRowCount	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageRowCount(Fts5Storage *p, i64 *pnRow){$/;"	f	file:
sqlite3Fts5StorageSize	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageSize(Fts5Storage *p, int iCol, i64 *pnToken){$/;"	f	file:
sqlite3Fts5StorageStmt	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageStmt($/;"	f	file:
sqlite3Fts5StorageStmtRelease	testdocs/sqlite3.c	/^static void sqlite3Fts5StorageStmtRelease($/;"	f	file:
sqlite3Fts5StorageSync	testdocs/sqlite3.c	/^static int sqlite3Fts5StorageSync(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5Strndup	testdocs/sqlite3.c	/^static char *sqlite3Fts5Strndup(int *pRc, const char *pIn, int nIn){$/;"	f	file:
sqlite3Fts5TermsetAdd	testdocs/sqlite3.c	/^static int sqlite3Fts5TermsetAdd($/;"	f	file:
sqlite3Fts5TermsetFree	testdocs/sqlite3.c	/^static void sqlite3Fts5TermsetFree(Fts5Termset *p){$/;"	f	file:
sqlite3Fts5TermsetNew	testdocs/sqlite3.c	/^static int sqlite3Fts5TermsetNew(Fts5Termset **pp){$/;"	f	file:
sqlite3Fts5Tokenize	testdocs/sqlite3.c	/^static int sqlite3Fts5Tokenize($/;"	f	file:
sqlite3Fts5TokenizerInit	testdocs/sqlite3.c	/^static int sqlite3Fts5TokenizerInit(fts5_api *pApi){$/;"	f	file:
sqlite3Fts5UnicodeFold	testdocs/sqlite3.c	/^static int sqlite3Fts5UnicodeFold(int c, int bRemoveDiacritic){$/;"	f	file:
sqlite3Fts5UnicodeIsalnum	testdocs/sqlite3.c	/^static int sqlite3Fts5UnicodeIsalnum(int c){$/;"	f	file:
sqlite3Fts5UnicodeIsdiacritic	testdocs/sqlite3.c	/^static int sqlite3Fts5UnicodeIsdiacritic(int c){$/;"	f	file:
sqlite3Fts5VocabInit	testdocs/sqlite3.c	/^static int sqlite3Fts5VocabInit(Fts5Global *pGlobal, sqlite3 *db){$/;"	f	file:
sqlite3FtsUnicodeFold	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeFold(int c, int bRemoveDiacritic){$/;"	f
sqlite3FtsUnicodeIsalnum	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsalnum(int c){$/;"	f
sqlite3FtsUnicodeIsdiacritic	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsdiacritic(int c){$/;"	f
sqlite3FunctionUsesThisSrc	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FunctionUsesThisSrc(Expr *pExpr, SrcList *pSrcList){$/;"	f
sqlite3GenerateConstraintChecks	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateConstraintChecks($/;"	f
sqlite3GenerateIndexKey	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GenerateIndexKey($/;"	f
sqlite3GenerateRowDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowDelete($/;"	f
sqlite3GenerateRowIndexDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete($/;"	f
sqlite3Get4byte	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){$/;"	f
sqlite3GetBoolean	testdocs/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z, u8 dflt){$/;"	f
sqlite3GetCollSeq	testdocs/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq($/;"	f
sqlite3GetFuncCollSeq	testdocs/sqlite3.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:
sqlite3GetInt32	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f
sqlite3GetTempRange	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f
sqlite3GetTempReg	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){$/;"	f
sqlite3GetToken	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f
sqlite3GetVTable	testdocs/sqlite3.c	/^#  define sqlite3GetVTable(/;"	d	file:
sqlite3GetVTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f
sqlite3GetVarint	testdocs/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f
sqlite3GetVarint32	testdocs/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f
sqlite3GetVdbe	testdocs/sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f
sqlite3GlobalConfig	testdocs/sqlite3.c	/^  #define sqlite3GlobalConfig /;"	d	file:
sqlite3HaltConstraint	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HaltConstraint($/;"	f
sqlite3HashClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){$/;"	f
sqlite3HashFind	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey){$/;"	f
sqlite3HashInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){$/;"	f
sqlite3HashInsert	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){$/;"	f
sqlite3HeaderSizeBtree	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeaderSizeBtree(void){ return ROUND8(sizeof(MemPage)); }$/;"	f
sqlite3HeaderSizePcache	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeaderSizePcache(void){ return ROUND8(sizeof(PgHdr)); }$/;"	f
sqlite3HeaderSizePcache1	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeaderSizePcache1(void){ return ROUND8(sizeof(PgHdr1)); }$/;"	f
sqlite3HeapNearlyFull	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){$/;"	f
sqlite3HexToBlob	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3HexToInt	testdocs/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3HexToInt(int h){$/;"	f
sqlite3Hooks	testdocs/sqlite3.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks	file:
sqlite3Hwtime	testdocs/sqlite3.c	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	testdocs/sqlite3.c	/^SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f
sqlite3IcuInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){$/;"	f
sqlite3IdListAppend	testdocs/sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f
sqlite3IdListDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f
sqlite3IdListDup	testdocs/sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f
sqlite3IdListIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f
sqlite3InRhsIsConstant	testdocs/sqlite3.c	/^static int sqlite3InRhsIsConstant(Expr *pIn){$/;"	f	file:
sqlite3IndexAffinityOk	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f
sqlite3IndexAffinityStr	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3IndexColumnAffinity	testdocs/sqlite3.c	/^SQLITE_PRIVATE char sqlite3IndexColumnAffinity(sqlite3 *db, Index *pIdx, int iCol){$/;"	f
sqlite3IndexedByLookup	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f
sqlite3Init	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f
sqlite3InitCallback	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f
sqlite3InitInfo	testdocs/sqlite3.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:
sqlite3InitOne	testdocs/sqlite3.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:
sqlite3Insert	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Insert($/;"	f
sqlite3InsertBuiltinFuncs	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3InsertBuiltinFuncs($/;"	f
sqlite3IntFloatCompare	testdocs/sqlite3.c	/^static int sqlite3IntFloatCompare(i64 i, double r){$/;"	f	file:
sqlite3IntTokens	testdocs/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[] = {$/;"	v
sqlite3IntTokens	testdocs/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[];$/;"	v
sqlite3InvalidFunction	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3InvalidFunction($/;"	f
sqlite3InvokeBusyHandler	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){$/;"	f
sqlite3IoTrace	testdocs/sqlite3.c	/^SQLITE_API SQLITE_EXTERN void (SQLITE_CDECL *sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IoTrace	testdocs/sqlite3.c	/^SQLITE_API void (SQLITE_CDECL *sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IoerrnomemError	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IoerrnomemError(int lineno){$/;"	f
sqlite3IsEbcdicIdChar	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsEbcdicIdChar	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];$/;"	v
sqlite3IsIdChar	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsIdChar(u8 c){ return IdChar(c); }$/;"	f
sqlite3IsLikeFunction	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f
sqlite3IsNaN	testdocs/sqlite3.c	/^# define sqlite3IsNaN(/;"	d	file:
sqlite3IsNaN	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsNaN(double x){$/;"	f
sqlite3IsNumericAffinity	testdocs/sqlite3.c	/^#define sqlite3IsNumericAffinity(/;"	d	file:
sqlite3IsReadOnly	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f
sqlite3IsRowid	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsRowid(const char *z){$/;"	f
sqlite3IsToplevel	testdocs/sqlite3.c	/^# define sqlite3IsToplevel(/;"	d	file:
sqlite3Isalnum	testdocs/sqlite3.c	/^# define sqlite3Isalnum(/;"	d	file:
sqlite3Isalpha	testdocs/sqlite3.c	/^# define sqlite3Isalpha(/;"	d	file:
sqlite3Isdigit	testdocs/sqlite3.c	/^# define sqlite3Isdigit(/;"	d	file:
sqlite3Isquote	testdocs/sqlite3.c	/^# define sqlite3Isquote(/;"	d	file:
sqlite3Isspace	testdocs/sqlite3.c	/^# define sqlite3Isspace(/;"	d	file:
sqlite3Isxdigit	testdocs/sqlite3.c	/^# define sqlite3Isxdigit(/;"	d	file:
sqlite3JoinType	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f
sqlite3JournalCreate	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){$/;"	f
sqlite3JournalIsInMemory	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalIsInMemory(sqlite3_file *p){$/;"	f
sqlite3JournalModename	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){$/;"	f
sqlite3JournalOpen	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalOpen($/;"	f
sqlite3JournalSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f
sqlite3Json1Init	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Json1Init(sqlite3 *db){$/;"	f
sqlite3KeyInfoAlloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoAlloc(sqlite3 *db, int N, int X){$/;"	f
sqlite3KeyInfoIsWriteable	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeyInfoIsWriteable(KeyInfo *p){ return p->nRef==1; }$/;"	f
sqlite3KeyInfoOfIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoOfIndex(Parse *pParse, Index *pIdx){$/;"	f
sqlite3KeyInfoRef	testdocs/sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoRef(KeyInfo *p){$/;"	f
sqlite3KeyInfoUnref	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3KeyInfoUnref(KeyInfo *p){$/;"	f
sqlite3KeywordCode	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){$/;"	f
sqlite3LeaveMutexAndCloseZombie	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3LeaveMutexAndCloseZombie(sqlite3 *db){$/;"	f
sqlite3LimitWhere	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3LimitWhere($/;"	f
sqlite3LoadExtension	testdocs/sqlite3.c	/^static int sqlite3LoadExtension($/;"	f	file:
sqlite3LocateCollSeq	testdocs/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f
sqlite3LocateTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTable($/;"	f
sqlite3LocateTableItem	testdocs/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTableItem($/;"	f
sqlite3LockAndPrepare	testdocs/sqlite3.c	/^static int sqlite3LockAndPrepare($/;"	f	file:
sqlite3LogEst	testdocs/sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEst(u64 x){$/;"	f
sqlite3LogEstAdd	testdocs/sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstAdd(LogEst a, LogEst b){$/;"	f
sqlite3LogEstFromDouble	testdocs/sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstFromDouble(double x){$/;"	f
sqlite3LogEstToInt	testdocs/sqlite3.c	/^SQLITE_PRIVATE u64 sqlite3LogEstToInt(LogEst x){$/;"	f
sqlite3MPrintf	testdocs/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3Malloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Malloc(u64 n){$/;"	f
sqlite3MallocAlarm	testdocs/sqlite3.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:
sqlite3MallocEnd	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MallocEnd(void){$/;"	f
sqlite3MallocInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocInit(void){$/;"	f
sqlite3MallocMutex	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MallocMutex(void){$/;"	f
sqlite3MallocSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocSize(void *p){$/;"	f
sqlite3MallocZero	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3MallocZero(u64 n){$/;"	f
sqlite3MatchSpanName	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MatchSpanName($/;"	f
sqlite3MaterializeView	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MaterializeView($/;"	f
sqlite3MayAbort	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){$/;"	f
sqlite3MemCompare	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f
sqlite3MemFree	testdocs/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:
sqlite3MemFree	testdocs/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemGetMemsys3	testdocs/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f
sqlite3MemGetMemsys5	testdocs/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f
sqlite3MemGetWin32	testdocs/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void){$/;"	f
sqlite3MemInit	testdocs/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:
sqlite3MemInit	testdocs/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemJournalOpen	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f
sqlite3MemMalloc	testdocs/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:
sqlite3MemMalloc	testdocs/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemRealloc	testdocs/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:
sqlite3MemRealloc	testdocs/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRoundup	testdocs/sqlite3.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:
sqlite3MemRoundup	testdocs/sqlite3.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemSetDefault	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemShutdown	testdocs/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:
sqlite3MemShutdown	testdocs/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemSize	testdocs/sqlite3.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:
sqlite3MemSize	testdocs/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:
sqlite3MemSize	testdocs/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:
sqlite3MemdebugBacktrace	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){$/;"	f
sqlite3MemdebugBacktraceCallback	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f
sqlite3MemdebugDump	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){$/;"	f
sqlite3MemdebugHasType	testdocs/sqlite3.c	/^# define sqlite3MemdebugHasType(/;"	d	file:
sqlite3MemdebugHasType	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f
sqlite3MemdebugMallocCount	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	testdocs/sqlite3.c	/^# define sqlite3MemdebugNoType(/;"	d	file:
sqlite3MemdebugNoType	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSetType	testdocs/sqlite3.c	/^# define sqlite3MemdebugSetType(/;"	d	file:
sqlite3MemdebugSetType	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSettitle	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f
sqlite3MemdebugSync	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryBarrier	testdocs/sqlite3.c	/^# define sqlite3MemoryBarrier(/;"	d	file:
sqlite3MemoryBarrier	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemoryBarrier(void){$/;"	f
sqlite3Memsys3Dump	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){$/;"	f
sqlite3Memsys5Dump	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){$/;"	f
sqlite3MemsysGetHeader	testdocs/sqlite3.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:
sqlite3MisuseError	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MisuseError(int lineno){$/;"	f
sqlite3MulInt64	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){$/;"	f
sqlite3MultiWrite	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){$/;"	f
sqlite3MutexAlloc	testdocs/sqlite3.c	/^#define sqlite3MutexAlloc(/;"	d	file:
sqlite3MutexAlloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f
sqlite3MutexEnd	testdocs/sqlite3.c	/^#define sqlite3MutexEnd(/;"	d	file:
sqlite3MutexEnd	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexEnd(void){$/;"	f
sqlite3MutexInit	testdocs/sqlite3.c	/^#define sqlite3MutexInit(/;"	d	file:
sqlite3MutexInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexInit(void){$/;"	f
sqlite3NameFromToken	testdocs/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f
sqlite3NestedParse	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3NoTempsInRange	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3NoTempsInRange(Parse *pParse, int iFirst, int iLast){$/;"	f
sqlite3NomemError	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3NomemError(int lineno){$/;"	f
sqlite3NoopMutex	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f
sqlite3OSTrace	testdocs/sqlite3.c	/^  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;$/;"	v
sqlite3OomClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OomClear(sqlite3 *db){$/;"	f
sqlite3OomFault	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OomFault(sqlite3 *db){$/;"	f
sqlite3OpcodeName	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){$/;"	f
sqlite3OpcodeProperty	testdocs/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpcodeProperty	testdocs/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];$/;"	v
sqlite3OpenMasterTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f
sqlite3OpenTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenTable($/;"	f
sqlite3OpenTableAndIndices	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTableAndIndices($/;"	f
sqlite3OpenTempDatabase	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f
sqlite3OsAccess	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsAccess($/;"	f
sqlite3OsCheckReservedLock	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f
sqlite3OsClose	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsClose(sqlite3_file *pId){$/;"	f
sqlite3OsCloseFree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f
sqlite3OsCurrentTimeInt64	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f
sqlite3OsDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f
sqlite3OsDeviceCharacteristics	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f
sqlite3OsDlClose	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
sqlite3OsDlError	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsDlOpen	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f
sqlite3OsDlSym	testdocs/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f
sqlite3OsFetch	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){$/;"	f
sqlite3OsFileControl	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileControlHint	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f
sqlite3OsFullPathname	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname($/;"	f
sqlite3OsGetLastError	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsGetLastError(sqlite3_vfs *pVfs){$/;"	f
sqlite3OsInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsInit(void){$/;"	f
sqlite3OsLock	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsOpen	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpen($/;"	f
sqlite3OsOpenMalloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc($/;"	f
sqlite3OsRandomness	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsRead	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f
sqlite3OsSectorSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f
sqlite3OsShmBarrier	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f
sqlite3OsShmLock	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f
sqlite3OsShmMap	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmMap($/;"	f
sqlite3OsShmUnmap	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f
sqlite3OsSleep	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f
sqlite3OsSync	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f
sqlite3OsTruncate	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f
sqlite3OsUnfetch	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){$/;"	f
sqlite3OsUnlock	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsWrite	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f
sqlite3PCacheBufferSetup	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f
sqlite3PCachePercentDirty	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PCachePercentDirty(PCache *pCache){$/;"	f
sqlite3PCacheSetDefault	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){$/;"	f
sqlite3PExpr	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3PExpr($/;"	f
sqlite3PExprAddSelect	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PExprAddSelect(Parse *pParse, Expr *pExpr, Select *pSelect){$/;"	f
sqlite3PageFree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PageFree(void *p){$/;"	f
sqlite3PageMalloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){$/;"	f
sqlite3PagerAlignReserve	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerAlignReserve(Pager *pDest, Pager *pSrc){$/;"	f
sqlite3PagerBackupPtr	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f
sqlite3PagerBegin	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f
sqlite3PagerCacheStat	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){$/;"	f
sqlite3PagerCheckpoint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCheckpoint($/;"	f
sqlite3PagerClearCache	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *pPager){$/;"	f
sqlite3PagerClose	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager, sqlite3 *db){$/;"	f
sqlite3PagerCloseWal	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager, sqlite3 *db){$/;"	f
sqlite3PagerCodec	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f
sqlite3PagerCommitPhaseOne	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne($/;"	f
sqlite3PagerCommitPhaseTwo	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f
sqlite3PagerDataVersion	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3PagerDataVersion(Pager *pPager){$/;"	f
sqlite3PagerDontWrite	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f
sqlite3PagerExclusiveLock	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f
sqlite3PagerFile	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f
sqlite3PagerFilename	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){$/;"	f
sqlite3PagerFlush	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerFlush(Pager *pPager){$/;"	f
sqlite3PagerGet	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGet($/;"	f
sqlite3PagerGetCodec	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f
sqlite3PagerGetData	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){$/;"	f
sqlite3PagerGetExtra	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f
sqlite3PagerGetJournalMode	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f
sqlite3PagerIsMemdb	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f
sqlite3PagerIsreadonly	testdocs/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f
sqlite3PagerIswriteable	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f
sqlite3PagerJournalSizeLimit	testdocs/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f
sqlite3PagerJournalname	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f
sqlite3PagerJrnlFile	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerJrnlFile(Pager *pPager){$/;"	f
sqlite3PagerLockingMode	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerLookup	testdocs/sqlite3.c	/^SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerMaxPageCount	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerMemUsed	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){$/;"	f
sqlite3PagerMovepage	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f
sqlite3PagerOkToChangeJournalMode	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f
sqlite3PagerOpen	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpen($/;"	f
sqlite3PagerOpenSavepoint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f
sqlite3PagerOpenWal	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenWal($/;"	f
sqlite3PagerPageRefcount	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f
sqlite3PagerPagecount	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f
sqlite3PagerPagenumber	testdocs/sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f
sqlite3PagerReadFileheader	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f
sqlite3PagerRef	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){$/;"	f
sqlite3PagerRefcount	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){$/;"	f
sqlite3PagerRekey	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRekey(DbPage *pPg, Pgno iNew, u16 flags){$/;"	f
sqlite3PagerRollback	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){$/;"	f
sqlite3PagerSavepoint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f
sqlite3PagerSetBusyhandler	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetBusyhandler($/;"	f
sqlite3PagerSetCachesize	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSetCodec	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCodec($/;"	f
sqlite3PagerSetFlags	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetFlags($/;"	f
sqlite3PagerSetJournalMode	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerSetMmapLimit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetMmapLimit(Pager *pPager, sqlite3_int64 szMmap){$/;"	f
sqlite3PagerSetPagesize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f
sqlite3PagerSetSpillsize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetSpillsize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSharedLock	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){$/;"	f
sqlite3PagerShrink	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerShrink(Pager *pPager){$/;"	f
sqlite3PagerSnapshotGet	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSnapshotGet(Pager *pPager, sqlite3_snapshot **ppSnapshot){$/;"	f
sqlite3PagerSnapshotOpen	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSnapshotOpen(Pager *pPager, sqlite3_snapshot *pSnapshot){$/;"	f
sqlite3PagerSnapshotRecover	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSnapshotRecover(Pager *pPager){$/;"	f
sqlite3PagerState	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerState(Pager *pPager){$/;"	f
sqlite3PagerStats	testdocs/sqlite3.c	/^SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){$/;"	f
sqlite3PagerSync	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager, const char *zMaster){$/;"	f
sqlite3PagerTempSpace	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f
sqlite3PagerTruncateImage	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f
sqlite3PagerUnref	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){$/;"	f
sqlite3PagerUnrefNotNull	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnrefNotNull(DbPage *pPg){$/;"	f
sqlite3PagerUseWal	testdocs/sqlite3.c	/^# define sqlite3PagerUseWal(/;"	d	file:
sqlite3PagerUseWal	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerUseWal(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerVfs	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f
sqlite3PagerWalCallback	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){$/;"	f
sqlite3PagerWalFramesize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalFramesize(Pager *pPager){$/;"	f
sqlite3PagerWalSupported	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){$/;"	f
sqlite3PagerWrite	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWrite(PgHdr *pPg){$/;"	f
sqlite3ParseToplevel	testdocs/sqlite3.c	/^# define sqlite3ParseToplevel(/;"	d	file:
sqlite3ParseUri	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParseUri($/;"	f
sqlite3Parser	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Parser($/;"	f
sqlite3ParserARG_FETCH	testdocs/sqlite3.c	/^#define sqlite3ParserARG_FETCH /;"	d	file:
sqlite3ParserARG_PDECL	testdocs/sqlite3.c	/^#define sqlite3ParserARG_PDECL /;"	d	file:
sqlite3ParserARG_SDECL	testdocs/sqlite3.c	/^#define sqlite3ParserARG_SDECL /;"	d	file:
sqlite3ParserARG_STORE	testdocs/sqlite3.c	/^#define sqlite3ParserARG_STORE /;"	d	file:
sqlite3ParserAlloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(YYMALLOCARGTYPE)){$/;"	f
sqlite3ParserFinalize	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFinalize(void *p){$/;"	f
sqlite3ParserFree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFree($/;"	f
sqlite3ParserInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserInit(void *yypParser){$/;"	f
sqlite3ParserReset	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserReset(Parse *pParse){$/;"	f
sqlite3ParserStackPeak	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){$/;"	f
sqlite3ParserTOKENTYPE	testdocs/sqlite3.c	/^#define sqlite3ParserTOKENTYPE /;"	d	file:
sqlite3ParserTrace	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f
sqlite3Parser_ENGINEALWAYSONSTACK	testdocs/sqlite3.c	/^# define sqlite3Parser_ENGINEALWAYSONSTACK /;"	d	file:
sqlite3Pcache1Mutex	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3Pcache1Mutex(void){$/;"	f
sqlite3PcacheCleanAll	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f
sqlite3PcacheClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){$/;"	f
sqlite3PcacheClearSyncFlags	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f
sqlite3PcacheClearWritable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearWritable(PCache *pCache){$/;"	f
sqlite3PcacheClose	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){$/;"	f
sqlite3PcacheDirtyList	testdocs/sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f
sqlite3PcacheDrop	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){$/;"	f
sqlite3PcacheFetch	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_pcache_page *sqlite3PcacheFetch($/;"	f
sqlite3PcacheFetchFinish	testdocs/sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheFetchFinish($/;"	f
sqlite3PcacheFetchStress	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheFetchStress($/;"	f
sqlite3PcacheGetCachesize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f
sqlite3PcacheInitialize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheInitialize(void){$/;"	f
sqlite3PcacheIterateDirty	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f
sqlite3PcacheMakeClean	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f
sqlite3PcacheMakeDirty	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f
sqlite3PcacheMove	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f
sqlite3PcacheMxDump	testdocs/sqlite3.c	/^  int sqlite3PcacheMxDump = 9999;   \/* Max cache entries for pcacheDump() *\/$/;"	v
sqlite3PcacheOpen	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheOpen($/;"	f
sqlite3PcachePageRefcount	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f
sqlite3PcachePageSanity	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageSanity(PgHdr *pPg){$/;"	f
sqlite3PcachePagecount	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){$/;"	f
sqlite3PcacheRef	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){$/;"	f
sqlite3PcacheRefCount	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){$/;"	f
sqlite3PcacheRelease	testdocs/sqlite3.c	/^SQLITE_PRIVATE void SQLITE_NOINLINE sqlite3PcacheRelease(PgHdr *p){$/;"	f
sqlite3PcacheReleaseMemory	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){$/;"	f
sqlite3PcacheSetCachesize	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f
sqlite3PcacheSetPageSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f
sqlite3PcacheSetSpillsize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSetSpillsize(PCache *p, int mxPage){$/;"	f
sqlite3PcacheShrink	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShrink(PCache *pCache){$/;"	f
sqlite3PcacheShutdown	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShutdown(void){$/;"	f
sqlite3PcacheSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f
sqlite3PcacheStats	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheStats($/;"	f
sqlite3PcacheTrace	testdocs/sqlite3.c	/^  int sqlite3PcacheTrace = 2;       \/* 0: off  1: simple  2: cache dumps *\/$/;"	v
sqlite3PcacheTruncate	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f
sqlite3PendingByte	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3PendingByte	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte;$/;"	v
sqlite3Pragma	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Pragma($/;"	f
sqlite3PragmaVtabRegister	testdocs/sqlite3.c	/^SQLITE_PRIVATE Module *sqlite3PragmaVtabRegister(sqlite3 *db, const char *zName){$/;"	f
sqlite3Prepare	testdocs/sqlite3.c	/^static int sqlite3Prepare($/;"	f	file:
sqlite3Prepare16	testdocs/sqlite3.c	/^static int sqlite3Prepare16($/;"	f	file:
sqlite3PrimaryKeyIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3PrimaryKeyIndex(Table *pTab){$/;"	f
sqlite3Prng	testdocs/sqlite3.c	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3PrngRestoreState	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngRestoreState(void){$/;"	f
sqlite3PrngSaveState	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngSaveState(void){$/;"	f
sqlite3PrngType	testdocs/sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3Put4byte	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f
sqlite3PutVarint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f
sqlite3ReadSchema	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){$/;"	f
sqlite3Realloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, u64 nBytes){$/;"	f
sqlite3RefillIndex	testdocs/sqlite3.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:
sqlite3RegisterBuiltinFunctions	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(void){$/;"	f
sqlite3RegisterDateTimeFunctions	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){$/;"	f
sqlite3RegisterLikeFunctions	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f
sqlite3RegisterPerConnectionBuiltinFunctions	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterPerConnectionBuiltinFunctions(sqlite3 *db){$/;"	f
sqlite3Reindex	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ReleaseTempRange	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ReleaseTempReg	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f
sqlite3Reprepare	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){$/;"	f
sqlite3ResetAllSchemasOfConnection	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){$/;"	f
sqlite3ResetOneSchema	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetOneSchema(sqlite3 *db, int iDb){$/;"	f
sqlite3ResolveExprListNames	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprListNames($/;"	f
sqlite3ResolveExprNames	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprNames($/;"	f
sqlite3ResolveOrderGroupBy	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy($/;"	f
sqlite3ResolvePartIdxLabel	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolvePartIdxLabel(Parse *pParse, int iLabel){$/;"	f
sqlite3ResolveSelectNames	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelectNames($/;"	f
sqlite3ResolveSelfReference	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelfReference($/;"	f
sqlite3ResultSetOfSelect	testdocs/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f
sqlite3RollbackAll	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db, int tripCode){$/;"	f
sqlite3RollbackTransaction	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){$/;"	f
sqlite3RootPageMoved	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){$/;"	f
sqlite3RowSetClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){$/;"	f
sqlite3RowSetInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f
sqlite3RowSetInsert	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f
sqlite3RowSetNext	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f
sqlite3RowSetTest	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, int iBatch, sqlite3_int64 iRowid){$/;"	f
sqlite3RowidConstraint	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowidConstraint($/;"	f
sqlite3RtreeInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){$/;"	f
sqlite3RunParser	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f
sqlite3RunVacuum	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb){$/;"	f
sqlite3SafetyCheckOk	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f
sqlite3SafetyCheckSickOrOk	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f
sqlite3SavedPrng	testdocs/sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3Savepoint	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f
sqlite3SchemaClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SchemaClear(void *p){$/;"	f
sqlite3SchemaGet	testdocs/sqlite3.c	/^SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f
sqlite3SchemaMutexHeld	testdocs/sqlite3.c	/^# define sqlite3SchemaMutexHeld(/;"	d	file:
sqlite3SchemaMutexHeld	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){$/;"	f
sqlite3SchemaToIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f
sqlite3ScratchFree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ScratchFree(void *p){$/;"	f
sqlite3ScratchMalloc	testdocs/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){$/;"	f
sqlite3SectorSize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SectorSize(sqlite3_file *pFile){$/;"	f
sqlite3Select	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Select($/;"	f
sqlite3SelectAddColumnTypeAndCollation	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectAddColumnTypeAndCollation($/;"	f
sqlite3SelectAddTypeInfo	testdocs/sqlite3.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f
sqlite3SelectDestInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f
sqlite3SelectDup	testdocs/sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f
sqlite3SelectDup	testdocs/sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *pDup, int flags){$/;"	f
sqlite3SelectExpand	testdocs/sqlite3.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectExprHeight	testdocs/sqlite3.c	/^  #define sqlite3SelectExprHeight(/;"	d	file:
sqlite3SelectExprHeight	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){$/;"	f
sqlite3SelectNew	testdocs/sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectNew($/;"	f
sqlite3SelectPrep	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectPrep($/;"	f
sqlite3SelectSetName	testdocs/sqlite3.c	/^# define sqlite3SelectSetName(/;"	d	file:
sqlite3SelectSetName	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectSetName(Select *p, const char *zName){$/;"	f
sqlite3SelectTrace	testdocs/sqlite3.c	/^\/***\/ int sqlite3SelectTrace = 0;$/;"	v
sqlite3SelectWrongNumTermsError	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p){$/;"	f
sqlite3SetHasNullFlag	testdocs/sqlite3.c	/^static void sqlite3SetHasNullFlag(Vdbe *v, int iCur, int regHasNull){$/;"	f	file:
sqlite3SetMakeRecordP5	testdocs/sqlite3.c	/^# define sqlite3SetMakeRecordP5(/;"	d	file:
sqlite3SetMakeRecordP5	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetMakeRecordP5(Vdbe *v, Table *pTab){$/;"	f
sqlite3SetString	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zNew){$/;"	f
sqlite3SharedCacheList	testdocs/sqlite3.c	/^SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	testdocs/sqlite3.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SkipAccumulatorLoad	testdocs/sqlite3.c	/^static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){$/;"	f	file:
sqlite3SmallTypeSizes	testdocs/sqlite3.c	/^static const u8 sqlite3SmallTypeSizes[] = {$/;"	v	file:
sqlite3SrcListAppend	testdocs/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppend($/;"	f
sqlite3SrcListAppendFromTerm	testdocs/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm($/;"	f
sqlite3SrcListAssignCursors	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f
sqlite3SrcListDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f
sqlite3SrcListDup	testdocs/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f
sqlite3SrcListEnlarge	testdocs/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge($/;"	f
sqlite3SrcListFuncArgs	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListFuncArgs(Parse *pParse, SrcList *p, ExprList *pList){$/;"	f
sqlite3SrcListIndexedBy	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f
sqlite3SrcListLookup	testdocs/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3SrcListShiftJoinType	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f
sqlite3StackAllocRaw	testdocs/sqlite3.c	/^# define sqlite3StackAllocRaw(/;"	d	file:
sqlite3StackAllocZero	testdocs/sqlite3.c	/^# define sqlite3StackAllocZero(/;"	d	file:
sqlite3StackFree	testdocs/sqlite3.c	/^# define sqlite3StackFree(/;"	d	file:
sqlite3StartTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StartTable($/;"	f
sqlite3Stat	testdocs/sqlite3.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType	file:
sqlite3Stat4Column	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4Column($/;"	f
sqlite3Stat4ProbeFree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Stat4ProbeFree(UnpackedRecord *pRec){$/;"	f
sqlite3Stat4ProbeSetValue	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ProbeSetValue($/;"	f
sqlite3Stat4ValueFromExpr	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ValueFromExpr($/;"	f
sqlite3StatType	testdocs/sqlite3.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	testdocs/sqlite3.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatValueType	testdocs/sqlite3.c	/^typedef sqlite3_int64 sqlite3StatValueType;$/;"	t	file:
sqlite3StatValueType	testdocs/sqlite3.c	/^typedef u32 sqlite3StatValueType;$/;"	t	file:
sqlite3StatusDown	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusDown(int op, int N){$/;"	f
sqlite3StatusHighwater	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusHighwater(int op, int X){$/;"	f
sqlite3StatusUp	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusUp(int op, int N){$/;"	f
sqlite3StatusValue	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3StatusValue(int op){$/;"	f
sqlite3Step	testdocs/sqlite3.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:
sqlite3StmtCurrentTime	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3StmtCurrentTime(sqlite3_context *p){$/;"	f
sqlite3StrAccumAppend	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f
sqlite3StrAccumAppendAll	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppendAll(StrAccum *p, const char *z){$/;"	f
sqlite3StrAccumEnlarge	testdocs/sqlite3.c	/^static int sqlite3StrAccumEnlarge(StrAccum *p, int N){$/;"	f	file:
sqlite3StrAccumFinish	testdocs/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f
sqlite3StrAccumInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, sqlite3 *db, char *zBase, int n, int mx){$/;"	f
sqlite3StrAccumReset	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){$/;"	f
sqlite3StrBINARY	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3StrBINARY[] = "BINARY";$/;"	v
sqlite3StrBINARY	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3StrBINARY[];$/;"	v
sqlite3StrICmp	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3StrICmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3StrNICmp	testdocs/sqlite3.c	/^#define sqlite3StrNICmp /;"	d	file:
sqlite3StringToId	testdocs/sqlite3.c	/^static void sqlite3StringToId(Expr *p){$/;"	f	file:
sqlite3Strlen30	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Strlen30(const char *z){$/;"	f
sqlite3SubInt64	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){$/;"	f
sqlite3SubselectError	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SubselectError(Parse *pParse, int nActual, int nExpect){$/;"	f
sqlite3SystemError	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SystemError(sqlite3 *db, int rc){$/;"	f
sqlite3TableAffinity	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){$/;"	f
sqlite3TableColumnAffinity	testdocs/sqlite3.c	/^SQLITE_PRIVATE char sqlite3TableColumnAffinity(Table *pTab, int iCol){$/;"	f
sqlite3TableLock	testdocs/sqlite3.c	/^  #define sqlite3TableLock(/;"	d	file:
sqlite3TableLock	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableLock($/;"	f
sqlite3TempInMemory	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){$/;"	f
sqlite3ThreadCreate	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadCreate($/;"	f
sqlite3ThreadJoin	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){$/;"	f
sqlite3ThreadProc	testdocs/sqlite3.c	/^static unsigned __stdcall sqlite3ThreadProc($/;"	f	file:
sqlite3TokenInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TokenInit(Token *p, char *z){$/;"	f
sqlite3Tolower	testdocs/sqlite3.c	/^# define sqlite3Tolower(/;"	d	file:
sqlite3Toupper	testdocs/sqlite3.c	/^# define sqlite3Toupper(/;"	d	file:
sqlite3TransferBindings	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3TreeViewBareExprList	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewBareExprList($/;"	f
sqlite3TreeViewExpr	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewExpr(TreeView *pView, const Expr *pExpr, u8 moreToFollow){$/;"	f
sqlite3TreeViewExprList	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewExprList($/;"	f
sqlite3TreeViewItem	testdocs/sqlite3.c	/^static void sqlite3TreeViewItem(TreeView *p, const char *zLabel,u8 moreFollows){$/;"	f	file:
sqlite3TreeViewLine	testdocs/sqlite3.c	/^static void sqlite3TreeViewLine(TreeView *p, const char *zFormat, ...){$/;"	f	file:
sqlite3TreeViewPop	testdocs/sqlite3.c	/^static void sqlite3TreeViewPop(TreeView *p){$/;"	f	file:
sqlite3TreeViewPush	testdocs/sqlite3.c	/^static TreeView *sqlite3TreeViewPush(TreeView *p, u8 moreToFollow){$/;"	f	file:
sqlite3TreeViewSelect	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewSelect(TreeView *pView, const Select *p, u8 moreToFollow){$/;"	f
sqlite3TreeViewWith	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewWith(TreeView *pView, const With *pWith, u8 moreToFollow){$/;"	f
sqlite3TriggerColmask	testdocs/sqlite3.c	/^# define sqlite3TriggerColmask(/;"	d	file:
sqlite3TriggerColmask	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3TriggerColmask($/;"	f
sqlite3TriggerDeleteStep	testdocs/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep($/;"	f
sqlite3TriggerInsertStep	testdocs/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep($/;"	f
sqlite3TriggerList	testdocs/sqlite3.c	/^# define sqlite3TriggerList(/;"	d	file:
sqlite3TriggerList	testdocs/sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f
sqlite3TriggerSelectStep	testdocs/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){$/;"	f
sqlite3TriggerUpdateStep	testdocs/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep($/;"	f
sqlite3TriggersExist	testdocs/sqlite3.c	/^# define sqlite3TriggersExist(/;"	d	file:
sqlite3TriggersExist	testdocs/sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggersExist($/;"	f
sqlite3TwoPartName	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TwoPartName($/;"	f
sqlite3UniqueConstraint	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UniqueConstraint($/;"	f
sqlite3UnlinkAndDeleteIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f
sqlite3UnlinkAndDeleteTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	testdocs/sqlite3.c	/^# define sqlite3UnlinkAndDeleteTrigger(/;"	d	file:
sqlite3UnlinkAndDeleteTrigger	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f
sqlite3Update	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Update($/;"	f
sqlite3UpperToLower	testdocs/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3UpperToLower	testdocs/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];$/;"	v
sqlite3UserAuthTable	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3UserAuthTable(const char *zTable){$/;"	f
sqlite3Utf16ByteLen	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f
sqlite3Utf16to8	testdocs/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f
sqlite3Utf8CharLen	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f
sqlite3Utf8Read	testdocs/sqlite3.c	/^# define sqlite3Utf8Read(/;"	d	file:
sqlite3Utf8Read	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Utf8Read($/;"	f
sqlite3Utf8To8	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){$/;"	f
sqlite3Utf8Trans1	testdocs/sqlite3.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3UtfSelfTest	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UtfSelfTest(void){$/;"	f
sqlite3VListAdd	testdocs/sqlite3.c	/^SQLITE_PRIVATE VList *sqlite3VListAdd($/;"	f
sqlite3VListNameToNum	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VListNameToNum(VList *pIn, const char *zName, int nName){$/;"	f
sqlite3VListNumToName	testdocs/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3VListNumToName(VList *pIn, int iVal){$/;"	f
sqlite3VMPrintf	testdocs/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f
sqlite3VXPrintf	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VXPrintf($/;"	f
sqlite3Vacuum	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse, Token *pNm){$/;"	f
sqlite3ValueApplyAffinity	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueApplyAffinity($/;"	f
sqlite3ValueBytes	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f
sqlite3ValueFree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){$/;"	f
sqlite3ValueFromExpr	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueFromExpr($/;"	f
sqlite3ValueNew	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f
sqlite3ValueSetNull	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetNull(sqlite3_value *p){$/;"	f
sqlite3ValueSetStr	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetStr($/;"	f
sqlite3ValueText	testdocs/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f
sqlite3VarintLen	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VarintLen(u64 v){$/;"	f
sqlite3VdbeAddOp0	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f
sqlite3VdbeAddOp1	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f
sqlite3VdbeAddOp2	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f
sqlite3VdbeAddOp3	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f
sqlite3VdbeAddOp4	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4($/;"	f
sqlite3VdbeAddOp4Dup8	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Dup8($/;"	f
sqlite3VdbeAddOp4Int	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Int($/;"	f
sqlite3VdbeAddOpList	testdocs/sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeAddOpList($/;"	f
sqlite3VdbeAddParseSchemaOp	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){$/;"	f
sqlite3VdbeAllocUnpackedRecord	testdocs/sqlite3.c	/^SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord($/;"	f
sqlite3VdbeAppendP4	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe *p, void *pP4, int n){$/;"	f
sqlite3VdbeAssertMayAbort	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f
sqlite3VdbeChangeEncoding	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f
sqlite3VdbeChangeOpcode	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeOpcode(Vdbe *p, u32 addr, u8 iNewOpcode){$/;"	f
sqlite3VdbeChangeP1	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP2	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP3	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP4	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f
sqlite3VdbeChangeP5	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u16 p5){$/;"	f
sqlite3VdbeChangeToNoop	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeToNoop(Vdbe *p, int addr){$/;"	f
sqlite3VdbeCheckFk	testdocs/sqlite3.c	/^# define sqlite3VdbeCheckFk(/;"	d	file:
sqlite3VdbeCheckFk	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f
sqlite3VdbeCheckMemInvariants	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckMemInvariants(Mem *p){$/;"	f
sqlite3VdbeClearObject	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VdbeCloseStatement	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f
sqlite3VdbeComment	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeCountChanges	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f
sqlite3VdbeCreate	testdocs/sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(Parse *pParse){$/;"	f
sqlite3VdbeCurrentAddr	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f
sqlite3VdbeCursorMoveto	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor **pp, int *piCol){$/;"	f
sqlite3VdbeCursorRestore	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorRestore(VdbeCursor *p){$/;"	f
sqlite3VdbeDb	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f
sqlite3VdbeDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){$/;"	f
sqlite3VdbeDeleteAuxData	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(sqlite3 *db, AuxData **pp, int iOp, int mask){$/;"	f
sqlite3VdbeDeletePriorOpcode	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeDeletePriorOpcode(Vdbe *p, u8 op){$/;"	f
sqlite3VdbeEndCoroutine	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeEndCoroutine(Vdbe *v, int regYield){$/;"	f
sqlite3VdbeEnter	testdocs/sqlite3.c	/^# define sqlite3VdbeEnter(/;"	d	file:
sqlite3VdbeEnter	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){$/;"	f
sqlite3VdbeError	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeError(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeExec	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeExec($/;"	f
sqlite3VdbeExpandSql	testdocs/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VdbeExpandSql($/;"	f
sqlite3VdbeFinalize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){$/;"	f
sqlite3VdbeFindCompare	testdocs/sqlite3.c	/^SQLITE_PRIVATE RecordCompare sqlite3VdbeFindCompare(UnpackedRecord *p){$/;"	f
sqlite3VdbeFrameDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f
sqlite3VdbeFrameRestore	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f
sqlite3VdbeFreeCursor	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f
sqlite3VdbeGetBoundValue	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetBoundValue(Vdbe *v, int iVar, u8 aff){$/;"	f
sqlite3VdbeGetOp	testdocs/sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f
sqlite3VdbeGoto	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeGoto(Vdbe *p, int iDest){$/;"	f
sqlite3VdbeHalt	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	testdocs/sqlite3.c	/^# define sqlite3VdbeIOTraceSql(/;"	d	file:
sqlite3VdbeIOTraceSql	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f
sqlite3VdbeIdxKeyCompare	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare($/;"	f
sqlite3VdbeIdxRowid	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f
sqlite3VdbeIntValue	testdocs/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f
sqlite3VdbeIntegerAffinity	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f
sqlite3VdbeJumpHere	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f
sqlite3VdbeLeave	testdocs/sqlite3.c	/^# define sqlite3VdbeLeave(/;"	d	file:
sqlite3VdbeLeave	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){$/;"	f
sqlite3VdbeLinkSubProgram	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f
sqlite3VdbeList	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeList($/;"	f
sqlite3VdbeLoadString	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeLoadString(Vdbe *p, int iDest, const char *zStr){$/;"	f
sqlite3VdbeMakeLabel	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *v){$/;"	f
sqlite3VdbeMakeReady	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMakeReady($/;"	f
sqlite3VdbeMemAboutToChange	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){$/;"	f
sqlite3VdbeMemCast	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){$/;"	f
sqlite3VdbeMemClearAndResize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){$/;"	f
sqlite3VdbeMemCopy	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f
sqlite3VdbeMemExpandBlob	testdocs/sqlite3.c	/^  #define sqlite3VdbeMemExpandBlob(/;"	d	file:
sqlite3VdbeMemExpandBlob	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f
sqlite3VdbeMemFinalize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f
sqlite3VdbeMemFromBtree	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFromBtree($/;"	f
sqlite3VdbeMemGrow	testdocs/sqlite3.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){$/;"	f
sqlite3VdbeMemHandleBom	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f
sqlite3VdbeMemInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemInit(Mem *pMem, sqlite3 *db, u16 flags){$/;"	f
sqlite3VdbeMemIntegerify	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f
sqlite3VdbeMemMakeWriteable	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f
sqlite3VdbeMemMove	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f
sqlite3VdbeMemNulTerminate	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f
sqlite3VdbeMemNumerify	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f
sqlite3VdbeMemPrettyPrint	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f
sqlite3VdbeMemRealify	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f
sqlite3VdbeMemRelease	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){$/;"	f
sqlite3VdbeMemSetDouble	testdocs/sqlite3.c	/^# define sqlite3VdbeMemSetDouble /;"	d	file:
sqlite3VdbeMemSetDouble	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f
sqlite3VdbeMemSetInt64	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f
sqlite3VdbeMemSetNull	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f
sqlite3VdbeMemSetRowSet	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f
sqlite3VdbeMemSetStr	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemSetStr($/;"	f
sqlite3VdbeMemSetZeroBlob	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f
sqlite3VdbeMemShallowCopy	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f
sqlite3VdbeMemStringify	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){$/;"	f
sqlite3VdbeMemTooBig	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){$/;"	f
sqlite3VdbeMemTranslate	testdocs/sqlite3.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f
sqlite3VdbeMultiLoad	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMultiLoad(Vdbe *p, int iDest, const char *zTypes, ...){$/;"	f
sqlite3VdbeNoopComment	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeOneByteSerialTypeLen	testdocs/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3VdbeOneByteSerialTypeLen(u8 serial_type){$/;"	f
sqlite3VdbeParameterIndex	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f
sqlite3VdbePreUpdateHook	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePreUpdateHook($/;"	f
sqlite3VdbePrintOp	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f
sqlite3VdbePrintSql	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){$/;"	f
sqlite3VdbeRealValue	testdocs/sqlite3.c	/^SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){$/;"	f
sqlite3VdbeRecordCompare	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompare($/;"	f
sqlite3VdbeRecordCompareWithSkip	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompareWithSkip($/;"	f
sqlite3VdbeRecordUnpack	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRecordUnpack($/;"	f
sqlite3VdbeReset	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){$/;"	f
sqlite3VdbeResetStepResult	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f
sqlite3VdbeResolveLabel	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *v, int x){$/;"	f
sqlite3VdbeReusable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeReusable(Vdbe *p){$/;"	f
sqlite3VdbeRewind	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){$/;"	f
sqlite3VdbeRunOnlyOnce	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f
sqlite3VdbeScanStatus	testdocs/sqlite3.c	/^# define sqlite3VdbeScanStatus(/;"	d	file:
sqlite3VdbeScanStatus	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeScanStatus($/;"	f
sqlite3VdbeSerialGet	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialGet($/;"	f
sqlite3VdbeSerialPut	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, Mem *pMem, u32 serial_type){$/;"	f
sqlite3VdbeSerialType	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format, u32 *pLen){$/;"	f
sqlite3VdbeSerialTypeLen	testdocs/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f
sqlite3VdbeSetChanges	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f
sqlite3VdbeSetColName	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSetColName($/;"	f
sqlite3VdbeSetLineNumber	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetLineNumber(Vdbe *v, int iLine){$/;"	f
sqlite3VdbeSetNumCols	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f
sqlite3VdbeSetP4KeyInfo	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetP4KeyInfo(Parse *pParse, Index *pIdx){$/;"	f
sqlite3VdbeSetSql	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){$/;"	f
sqlite3VdbeSetVarmask	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f
sqlite3VdbeSorterClose	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){$/;"	f
sqlite3VdbeSorterCompare	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterCompare($/;"	f
sqlite3VdbeSorterInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterInit($/;"	f
sqlite3VdbeSorterNext	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *db, const VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterReset	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterReset(sqlite3 *db, VdbeSorter *pSorter){$/;"	f
sqlite3VdbeSorterRewind	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRewind(const VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterRowkey	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(const VdbeCursor *pCsr, Mem *pOut){$/;"	f
sqlite3VdbeSorterWrite	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterWrite($/;"	f
sqlite3VdbeSwap	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f
sqlite3VdbeTakeOpArray	testdocs/sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f
sqlite3VdbeTransferError	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p){$/;"	f
sqlite3VdbeUsesBtree	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f
sqlite3VdbeVerifyNoMallocRequired	testdocs/sqlite3.c	/^# define sqlite3VdbeVerifyNoMallocRequired(/;"	d	file:
sqlite3VdbeVerifyNoMallocRequired	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){$/;"	f
sqlite3VdbeVerifyNoResultRow	testdocs/sqlite3.c	/^# define sqlite3VdbeVerifyNoResultRow(/;"	d	file:
sqlite3VdbeVerifyNoResultRow	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeVerifyNoResultRow(Vdbe *p){$/;"	f
sqlite3VectorErrorMsg	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VectorErrorMsg(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3VectorFieldSubexpr	testdocs/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3VectorFieldSubexpr(Expr *pVector, int i){$/;"	f
sqlite3ViewGetColumnNames	testdocs/sqlite3.c	/^# define sqlite3ViewGetColumnNames(/;"	d	file:
sqlite3ViewGetColumnNames	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f
sqlite3VtabArgExtend	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f
sqlite3VtabArgInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){$/;"	f
sqlite3VtabBegin	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f
sqlite3VtabBeginParse	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabBeginParse($/;"	f
sqlite3VtabCallConnect	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabCallCreate	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f
sqlite3VtabCallDestroy	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f
sqlite3VtabClear	testdocs/sqlite3.c	/^#  define sqlite3VtabClear(/;"	d	file:
sqlite3VtabClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabCommit	testdocs/sqlite3.c	/^#  define sqlite3VtabCommit(/;"	d	file:
sqlite3VtabCommit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){$/;"	f
sqlite3VtabCreateModule	testdocs/sqlite3.c	/^SQLITE_PRIVATE Module *sqlite3VtabCreateModule($/;"	f
sqlite3VtabDisconnect	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabDisconnect(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabEponymousTableClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabEponymousTableClear(sqlite3 *db, Module *pMod){$/;"	f
sqlite3VtabEponymousTableInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabEponymousTableInit(Parse *pParse, Module *pMod){$/;"	f
sqlite3VtabFinishParse	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f
sqlite3VtabImportErrmsg	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabImportErrmsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f
sqlite3VtabInSync	testdocs/sqlite3.c	/^#  define sqlite3VtabInSync(/;"	d	file:
sqlite3VtabLock	testdocs/sqlite3.c	/^#  define sqlite3VtabLock(/;"	d	file:
sqlite3VtabLock	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){$/;"	f
sqlite3VtabMakeWritable	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabOverloadFunction	testdocs/sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction($/;"	f
sqlite3VtabRollback	testdocs/sqlite3.c	/^#  define sqlite3VtabRollback(/;"	d	file:
sqlite3VtabRollback	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){$/;"	f
sqlite3VtabSavepoint	testdocs/sqlite3.c	/^#  define sqlite3VtabSavepoint(/;"	d	file:
sqlite3VtabSavepoint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){$/;"	f
sqlite3VtabSync	testdocs/sqlite3.c	/^#  define sqlite3VtabSync(/;"	d	file:
sqlite3VtabSync	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VtabUnlock	testdocs/sqlite3.c	/^#  define sqlite3VtabUnlock(/;"	d	file:
sqlite3VtabUnlock	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){$/;"	f
sqlite3VtabUnlockList	testdocs/sqlite3.c	/^#  define sqlite3VtabUnlockList(/;"	d	file:
sqlite3VtabUnlockList	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f
sqlite3WalBeginReadTransaction	testdocs/sqlite3.c	/^# define sqlite3WalBeginReadTransaction(/;"	d	file:
sqlite3WalBeginReadTransaction	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f
sqlite3WalBeginWriteTransaction	testdocs/sqlite3.c	/^# define sqlite3WalBeginWriteTransaction(/;"	d	file:
sqlite3WalBeginWriteTransaction	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalCallback	testdocs/sqlite3.c	/^# define sqlite3WalCallback(/;"	d	file:
sqlite3WalCallback	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){$/;"	f
sqlite3WalCheckpoint	testdocs/sqlite3.c	/^# define sqlite3WalCheckpoint(/;"	d	file:
sqlite3WalCheckpoint	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCheckpoint($/;"	f
sqlite3WalClose	testdocs/sqlite3.c	/^# define sqlite3WalClose(/;"	d	file:
sqlite3WalClose	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalClose($/;"	f
sqlite3WalDbsize	testdocs/sqlite3.c	/^# define sqlite3WalDbsize(/;"	d	file:
sqlite3WalDbsize	testdocs/sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f
sqlite3WalDefaultHook	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalDefaultHook($/;"	f
sqlite3WalEndReadTransaction	testdocs/sqlite3.c	/^# define sqlite3WalEndReadTransaction(/;"	d	file:
sqlite3WalEndReadTransaction	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f
sqlite3WalEndWriteTransaction	testdocs/sqlite3.c	/^# define sqlite3WalEndWriteTransaction(/;"	d	file:
sqlite3WalEndWriteTransaction	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalExclusiveMode	testdocs/sqlite3.c	/^# define sqlite3WalExclusiveMode(/;"	d	file:
sqlite3WalExclusiveMode	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f
sqlite3WalFile	testdocs/sqlite3.c	/^# define sqlite3WalFile(/;"	d	file:
sqlite3WalFile	testdocs/sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3WalFile(Wal *pWal){$/;"	f
sqlite3WalFindFrame	testdocs/sqlite3.c	/^# define sqlite3WalFindFrame(/;"	d	file:
sqlite3WalFindFrame	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFindFrame($/;"	f
sqlite3WalFrames	testdocs/sqlite3.c	/^# define sqlite3WalFrames(/;"	d	file:
sqlite3WalFrames	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFrames($/;"	f
sqlite3WalFramesize	testdocs/sqlite3.c	/^# define sqlite3WalFramesize(/;"	d	file:
sqlite3WalFramesize	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal){$/;"	f
sqlite3WalHeapMemory	testdocs/sqlite3.c	/^# define sqlite3WalHeapMemory(/;"	d	file:
sqlite3WalHeapMemory	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){$/;"	f
sqlite3WalLimit	testdocs/sqlite3.c	/^# define sqlite3WalLimit(/;"	d	file:
sqlite3WalLimit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){$/;"	f
sqlite3WalOpen	testdocs/sqlite3.c	/^# define sqlite3WalOpen(/;"	d	file:
sqlite3WalOpen	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalOpen($/;"	f
sqlite3WalReadFrame	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalReadFrame($/;"	f
sqlite3WalSavepoint	testdocs/sqlite3.c	/^# define sqlite3WalSavepoint(/;"	d	file:
sqlite3WalSavepoint	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepointUndo	testdocs/sqlite3.c	/^# define sqlite3WalSavepointUndo(/;"	d	file:
sqlite3WalSavepointUndo	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSnapshotGet	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSnapshotGet(Wal *pWal, sqlite3_snapshot **ppSnapshot){$/;"	f
sqlite3WalSnapshotOpen	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3_snapshot *pSnapshot){$/;"	f
sqlite3WalSnapshotRecover	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSnapshotRecover(Wal *pWal){$/;"	f
sqlite3WalTrace	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalTrace = 0;$/;"	v
sqlite3WalUndo	testdocs/sqlite3.c	/^# define sqlite3WalUndo(/;"	d	file:
sqlite3WalUndo	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f
sqlite3WalkExpr	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f
sqlite3WalkExprList	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f
sqlite3WalkSelect	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectExpr	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectFrom	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f
sqlite3WhereAddScanStatus	testdocs/sqlite3.c	/^# define sqlite3WhereAddScanStatus(/;"	d	file:
sqlite3WhereAddScanStatus	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereAddScanStatus($/;"	f
sqlite3WhereBegin	testdocs/sqlite3.c	/^SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin($/;"	f
sqlite3WhereBreakLabel	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereBreakLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereClauseClear	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereClauseClear(WhereClause *pWC){$/;"	f
sqlite3WhereClauseInit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereClauseInit($/;"	f
sqlite3WhereClausePrint	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereClausePrint(WhereClause *pWC){$/;"	f
sqlite3WhereCodeOneLoopStart	testdocs/sqlite3.c	/^SQLITE_PRIVATE Bitmask sqlite3WhereCodeOneLoopStart($/;"	f
sqlite3WhereContinueLabel	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereContinueLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereEnd	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f
sqlite3WhereExplainOneScan	testdocs/sqlite3.c	/^# define sqlite3WhereExplainOneScan(/;"	d	file:
sqlite3WhereExplainOneScan	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereExplainOneScan($/;"	f
sqlite3WhereExprAnalyze	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereExprAnalyze($/;"	f
sqlite3WhereExprListUsage	testdocs/sqlite3.c	/^SQLITE_PRIVATE Bitmask sqlite3WhereExprListUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f
sqlite3WhereExprUsage	testdocs/sqlite3.c	/^SQLITE_PRIVATE Bitmask sqlite3WhereExprUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f
sqlite3WhereFindTerm	testdocs/sqlite3.c	/^SQLITE_PRIVATE WhereTerm *sqlite3WhereFindTerm($/;"	f
sqlite3WhereGetMask	testdocs/sqlite3.c	/^SQLITE_PRIVATE Bitmask sqlite3WhereGetMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f
sqlite3WhereIsDistinct	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsDistinct(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsOrdered	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsOrdered(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsSorted	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsSorted(WhereInfo *pWInfo){$/;"	f
sqlite3WhereOkOnePass	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereOkOnePass(WhereInfo *pWInfo, int *aiCur){$/;"	f
sqlite3WhereOrderedInnerLoop	testdocs/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereOrderedInnerLoop(WhereInfo *pWInfo){$/;"	f
sqlite3WhereOutputRowCount	testdocs/sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3WhereOutputRowCount(WhereInfo *pWInfo){$/;"	f
sqlite3WhereSplit	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){$/;"	f
sqlite3WhereTabFuncArgs	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereTabFuncArgs($/;"	f
sqlite3WhereTrace	testdocs/sqlite3.c	/^\/***\/ int sqlite3WhereTrace = 0;$/;"	v
sqlite3WhereTrace	testdocs/sqlite3.c	/^\/***\/ int sqlite3WhereTrace;$/;"	v
sqlite3Win32Wait	testdocs/sqlite3.c	/^SQLITE_PRIVATE DWORD sqlite3Win32Wait(HANDLE hObject){$/;"	f
sqlite3WithAdd	testdocs/sqlite3.c	/^SQLITE_PRIVATE With *sqlite3WithAdd($/;"	f
sqlite3WithDelete	testdocs/sqlite3.c	/^#define sqlite3WithDelete(/;"	d	file:
sqlite3WithDelete	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WithDelete(sqlite3 *db, With *pWith){$/;"	f
sqlite3WithPush	testdocs/sqlite3.c	/^#define sqlite3WithPush(/;"	d	file:
sqlite3WithPush	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WithPush(Parse *pParse, With *pWith, u8 bFree){$/;"	f
sqlite3XPrintf	testdocs/sqlite3.c	/^SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){$/;"	f
sqlite3_aggregate_context	testdocs/sqlite3.c	/^#define sqlite3_aggregate_context /;"	d	file:
sqlite3_aggregate_context	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f
sqlite3_aggregate_count	testdocs/sqlite3.c	/^#define sqlite3_aggregate_count /;"	d	file:
sqlite3_aggregate_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){$/;"	f
sqlite3_api_routines	testdocs/sqlite3.c	/^struct sqlite3_api_routines {$/;"	s	file:
sqlite3_api_routines	testdocs/sqlite3.c	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines	file:
sqlite3_auto_extension	testdocs/sqlite3.c	/^#define sqlite3_auto_extension /;"	d	file:
sqlite3_auto_extension	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_auto_extension($/;"	f
sqlite3_backup	testdocs/sqlite3.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup	testdocs/sqlite3.c	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup	file:
sqlite3_backup_finish	testdocs/sqlite3.c	/^#define sqlite3_backup_finish /;"	d	file:
sqlite3_backup_finish	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){$/;"	f
sqlite3_backup_init	testdocs/sqlite3.c	/^#define sqlite3_backup_init /;"	d	file:
sqlite3_backup_init	testdocs/sqlite3.c	/^SQLITE_API sqlite3_backup *sqlite3_backup_init($/;"	f
sqlite3_backup_pagecount	testdocs/sqlite3.c	/^#define sqlite3_backup_pagecount /;"	d	file:
sqlite3_backup_pagecount	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f
sqlite3_backup_remaining	testdocs/sqlite3.c	/^#define sqlite3_backup_remaining /;"	d	file:
sqlite3_backup_remaining	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f
sqlite3_backup_step	testdocs/sqlite3.c	/^#define sqlite3_backup_step /;"	d	file:
sqlite3_backup_step	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f
sqlite3_bind_blob	testdocs/sqlite3.c	/^#define sqlite3_bind_blob /;"	d	file:
sqlite3_bind_blob	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_blob($/;"	f
sqlite3_bind_blob64	testdocs/sqlite3.c	/^#define sqlite3_bind_blob64 /;"	d	file:
sqlite3_bind_blob64	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_blob64($/;"	f
sqlite3_bind_double	testdocs/sqlite3.c	/^#define sqlite3_bind_double /;"	d	file:
sqlite3_bind_double	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f
sqlite3_bind_int	testdocs/sqlite3.c	/^#define sqlite3_bind_int /;"	d	file:
sqlite3_bind_int	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f
sqlite3_bind_int64	testdocs/sqlite3.c	/^#define sqlite3_bind_int64 /;"	d	file:
sqlite3_bind_int64	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f
sqlite3_bind_null	testdocs/sqlite3.c	/^#define sqlite3_bind_null /;"	d	file:
sqlite3_bind_null	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_parameter_count	testdocs/sqlite3.c	/^#define sqlite3_bind_parameter_count /;"	d	file:
sqlite3_bind_parameter_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_bind_parameter_index	testdocs/sqlite3.c	/^#define sqlite3_bind_parameter_index /;"	d	file:
sqlite3_bind_parameter_index	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f
sqlite3_bind_parameter_name	testdocs/sqlite3.c	/^#define sqlite3_bind_parameter_name /;"	d	file:
sqlite3_bind_parameter_name	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_text	testdocs/sqlite3.c	/^#define sqlite3_bind_text /;"	d	file:
sqlite3_bind_text	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_text($/;"	f
sqlite3_bind_text16	testdocs/sqlite3.c	/^# define sqlite3_bind_text16 /;"	d	file:
sqlite3_bind_text16	testdocs/sqlite3.c	/^#define sqlite3_bind_text16 /;"	d	file:
sqlite3_bind_text16	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_text16($/;"	f
sqlite3_bind_text64	testdocs/sqlite3.c	/^#define sqlite3_bind_text64 /;"	d	file:
sqlite3_bind_text64	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_text64($/;"	f
sqlite3_bind_value	testdocs/sqlite3.c	/^#define sqlite3_bind_value /;"	d	file:
sqlite3_bind_value	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f
sqlite3_bind_zeroblob	testdocs/sqlite3.c	/^#define sqlite3_bind_zeroblob /;"	d	file:
sqlite3_bind_zeroblob	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f
sqlite3_bind_zeroblob64	testdocs/sqlite3.c	/^#define sqlite3_bind_zeroblob64 /;"	d	file:
sqlite3_bind_zeroblob64	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob64(sqlite3_stmt *pStmt, int i, sqlite3_uint64 n){$/;"	f
sqlite3_blob	testdocs/sqlite3.c	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob	file:
sqlite3_blob_bytes	testdocs/sqlite3.c	/^#define sqlite3_blob_bytes /;"	d	file:
sqlite3_blob_bytes	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_close	testdocs/sqlite3.c	/^#define sqlite3_blob_close /;"	d	file:
sqlite3_blob_close	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_open	testdocs/sqlite3.c	/^#define sqlite3_blob_open /;"	d	file:
sqlite3_blob_open	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_blob_open($/;"	f
sqlite3_blob_read	testdocs/sqlite3.c	/^#define sqlite3_blob_read /;"	d	file:
sqlite3_blob_read	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f
sqlite3_blob_reopen	testdocs/sqlite3.c	/^#define sqlite3_blob_reopen /;"	d	file:
sqlite3_blob_reopen	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){$/;"	f
sqlite3_blob_write	testdocs/sqlite3.c	/^#define sqlite3_blob_write /;"	d	file:
sqlite3_blob_write	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f
sqlite3_busy_handler	testdocs/sqlite3.c	/^#define sqlite3_busy_handler /;"	d	file:
sqlite3_busy_handler	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_busy_handler($/;"	f
sqlite3_busy_timeout	testdocs/sqlite3.c	/^#define sqlite3_busy_timeout /;"	d	file:
sqlite3_busy_timeout	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f
sqlite3_callback	testdocs/sqlite3.c	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	file:
sqlite3_cancel_auto_extension	testdocs/sqlite3.c	/^#define sqlite3_cancel_auto_extension /;"	d	file:
sqlite3_cancel_auto_extension	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_cancel_auto_extension($/;"	f
sqlite3_changegroup	testdocs/sqlite3.c	/^struct sqlite3_changegroup {$/;"	s	file:
sqlite3_changegroup	testdocs/sqlite3.c	/^typedef struct sqlite3_changegroup sqlite3_changegroup;$/;"	t	typeref:struct:sqlite3_changegroup	file:
sqlite3_changes	testdocs/sqlite3.c	/^#define sqlite3_changes /;"	d	file:
sqlite3_changes	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_changes(sqlite3 *db){$/;"	f
sqlite3_changeset_iter	testdocs/sqlite3.c	/^struct sqlite3_changeset_iter {$/;"	s	file:
sqlite3_changeset_iter	testdocs/sqlite3.c	/^typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;$/;"	t	typeref:struct:sqlite3_changeset_iter	file:
sqlite3_clear_bindings	testdocs/sqlite3.c	/^#define sqlite3_clear_bindings /;"	d	file:
sqlite3_clear_bindings	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f
sqlite3_close	testdocs/sqlite3.c	/^#define sqlite3_close /;"	d	file:
sqlite3_close	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_close(sqlite3 *db){ return sqlite3Close(db,0); }$/;"	f
sqlite3_close_v2	testdocs/sqlite3.c	/^#define sqlite3_close_v2 /;"	d	file:
sqlite3_close_v2	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_close_v2(sqlite3 *db){ return sqlite3Close(db,1); }$/;"	f
sqlite3_collation_needed	testdocs/sqlite3.c	/^#define sqlite3_collation_needed /;"	d	file:
sqlite3_collation_needed	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_collation_needed($/;"	f
sqlite3_collation_needed16	testdocs/sqlite3.c	/^# define sqlite3_collation_needed16 /;"	d	file:
sqlite3_collation_needed16	testdocs/sqlite3.c	/^#define sqlite3_collation_needed16 /;"	d	file:
sqlite3_collation_needed16	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_collation_needed16($/;"	f
sqlite3_column_blob	testdocs/sqlite3.c	/^#define sqlite3_column_blob /;"	d	file:
sqlite3_column_blob	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes	testdocs/sqlite3.c	/^#define sqlite3_column_bytes /;"	d	file:
sqlite3_column_bytes	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes16	testdocs/sqlite3.c	/^#define sqlite3_column_bytes16 /;"	d	file:
sqlite3_column_bytes16	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_count	testdocs/sqlite3.c	/^#define sqlite3_column_count /;"	d	file:
sqlite3_column_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_column_database_name	testdocs/sqlite3.c	/^# define sqlite3_column_database_name /;"	d	file:
sqlite3_column_database_name	testdocs/sqlite3.c	/^#define sqlite3_column_database_name /;"	d	file:
sqlite3_column_database_name	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name16	testdocs/sqlite3.c	/^# define sqlite3_column_database_name16 /;"	d	file:
sqlite3_column_database_name16	testdocs/sqlite3.c	/^#define sqlite3_column_database_name16 /;"	d	file:
sqlite3_column_database_name16	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype	testdocs/sqlite3.c	/^# define sqlite3_column_decltype /;"	d	file:
sqlite3_column_decltype	testdocs/sqlite3.c	/^#define sqlite3_column_decltype /;"	d	file:
sqlite3_column_decltype	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype16	testdocs/sqlite3.c	/^# define sqlite3_column_decltype16 /;"	d	file:
sqlite3_column_decltype16	testdocs/sqlite3.c	/^#define sqlite3_column_decltype16 /;"	d	file:
sqlite3_column_decltype16	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_double	testdocs/sqlite3.c	/^#define sqlite3_column_double /;"	d	file:
sqlite3_column_double	testdocs/sqlite3.c	/^SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int	testdocs/sqlite3.c	/^#define sqlite3_column_int /;"	d	file:
sqlite3_column_int	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int64	testdocs/sqlite3.c	/^#define sqlite3_column_int64 /;"	d	file:
sqlite3_column_int64	testdocs/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_name	testdocs/sqlite3.c	/^#define sqlite3_column_name /;"	d	file:
sqlite3_column_name	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name16	testdocs/sqlite3.c	/^# define sqlite3_column_name16 /;"	d	file:
sqlite3_column_name16	testdocs/sqlite3.c	/^#define sqlite3_column_name16 /;"	d	file:
sqlite3_column_name16	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name	testdocs/sqlite3.c	/^# define sqlite3_column_origin_name /;"	d	file:
sqlite3_column_origin_name	testdocs/sqlite3.c	/^#define sqlite3_column_origin_name /;"	d	file:
sqlite3_column_origin_name	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name16	testdocs/sqlite3.c	/^# define sqlite3_column_origin_name16 /;"	d	file:
sqlite3_column_origin_name16	testdocs/sqlite3.c	/^#define sqlite3_column_origin_name16 /;"	d	file:
sqlite3_column_origin_name16	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name	testdocs/sqlite3.c	/^# define sqlite3_column_table_name /;"	d	file:
sqlite3_column_table_name	testdocs/sqlite3.c	/^#define sqlite3_column_table_name /;"	d	file:
sqlite3_column_table_name	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name16	testdocs/sqlite3.c	/^# define sqlite3_column_table_name16 /;"	d	file:
sqlite3_column_table_name16	testdocs/sqlite3.c	/^#define sqlite3_column_table_name16 /;"	d	file:
sqlite3_column_table_name16	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_text	testdocs/sqlite3.c	/^#define sqlite3_column_text /;"	d	file:
sqlite3_column_text	testdocs/sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text16	testdocs/sqlite3.c	/^# define sqlite3_column_text16 /;"	d	file:
sqlite3_column_text16	testdocs/sqlite3.c	/^#define sqlite3_column_text16 /;"	d	file:
sqlite3_column_text16	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_type	testdocs/sqlite3.c	/^#define sqlite3_column_type /;"	d	file:
sqlite3_column_type	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_value	testdocs/sqlite3.c	/^#define sqlite3_column_value /;"	d	file:
sqlite3_column_value	testdocs/sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_commit_hook	testdocs/sqlite3.c	/^#define sqlite3_commit_hook /;"	d	file:
sqlite3_commit_hook	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_commit_hook($/;"	f
sqlite3_compileoption_get	testdocs/sqlite3.c	/^#define sqlite3_compileoption_get /;"	d	file:
sqlite3_compileoption_get	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_compileoption_get(int N){$/;"	f
sqlite3_compileoption_used	testdocs/sqlite3.c	/^#define sqlite3_compileoption_used /;"	d	file:
sqlite3_compileoption_used	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_compileoption_used(const char *zOptName){$/;"	f
sqlite3_complete	testdocs/sqlite3.c	/^# define sqlite3_complete /;"	d	file:
sqlite3_complete	testdocs/sqlite3.c	/^#define sqlite3_complete /;"	d	file:
sqlite3_complete	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_complete(const char *zSql){$/;"	f
sqlite3_complete16	testdocs/sqlite3.c	/^# define sqlite3_complete16 /;"	d	file:
sqlite3_complete16	testdocs/sqlite3.c	/^#define sqlite3_complete16 /;"	d	file:
sqlite3_complete16	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_complete16(const void *zSql){$/;"	f
sqlite3_config	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_config(int op, ...){$/;"	f
sqlite3_context	testdocs/sqlite3.c	/^struct sqlite3_context {$/;"	s	file:
sqlite3_context	testdocs/sqlite3.c	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context	file:
sqlite3_context_db_handle	testdocs/sqlite3.c	/^#define sqlite3_context_db_handle /;"	d	file:
sqlite3_context_db_handle	testdocs/sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){$/;"	f
sqlite3_create_collation	testdocs/sqlite3.c	/^#define sqlite3_create_collation /;"	d	file:
sqlite3_create_collation	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_create_collation($/;"	f
sqlite3_create_collation16	testdocs/sqlite3.c	/^# define sqlite3_create_collation16 /;"	d	file:
sqlite3_create_collation16	testdocs/sqlite3.c	/^#define sqlite3_create_collation16 /;"	d	file:
sqlite3_create_collation16	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_create_collation16($/;"	f
sqlite3_create_collation_v2	testdocs/sqlite3.c	/^#define sqlite3_create_collation_v2 /;"	d	file:
sqlite3_create_collation_v2	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_create_collation_v2($/;"	f
sqlite3_create_function	testdocs/sqlite3.c	/^#define sqlite3_create_function /;"	d	file:
sqlite3_create_function	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_create_function($/;"	f
sqlite3_create_function16	testdocs/sqlite3.c	/^# define sqlite3_create_function16 /;"	d	file:
sqlite3_create_function16	testdocs/sqlite3.c	/^#define sqlite3_create_function16 /;"	d	file:
sqlite3_create_function16	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_create_function16($/;"	f
sqlite3_create_function_v2	testdocs/sqlite3.c	/^#define sqlite3_create_function_v2 /;"	d	file:
sqlite3_create_function_v2	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_create_function_v2($/;"	f
sqlite3_create_module	testdocs/sqlite3.c	/^# define sqlite3_create_module /;"	d	file:
sqlite3_create_module	testdocs/sqlite3.c	/^#define sqlite3_create_module /;"	d	file:
sqlite3_create_module	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_create_module($/;"	f
sqlite3_create_module_v2	testdocs/sqlite3.c	/^# define sqlite3_create_module_v2 /;"	d	file:
sqlite3_create_module_v2	testdocs/sqlite3.c	/^#define sqlite3_create_module_v2 /;"	d	file:
sqlite3_create_module_v2	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_create_module_v2($/;"	f
sqlite3_current_time	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_data_count	testdocs/sqlite3.c	/^#define sqlite3_data_count /;"	d	file:
sqlite3_data_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_data_directory	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_data_directory = 0;$/;"	v
sqlite3_data_directory	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_data_directory;$/;"	v
sqlite3_db_cacheflush	testdocs/sqlite3.c	/^#define sqlite3_db_cacheflush /;"	d	file:
sqlite3_db_cacheflush	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_db_cacheflush(sqlite3 *db){$/;"	f
sqlite3_db_config	testdocs/sqlite3.c	/^#define sqlite3_db_config /;"	d	file:
sqlite3_db_config	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_db_filename	testdocs/sqlite3.c	/^#define sqlite3_db_filename /;"	d	file:
sqlite3_db_filename	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_handle	testdocs/sqlite3.c	/^#define sqlite3_db_handle /;"	d	file:
sqlite3_db_handle	testdocs/sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_mutex	testdocs/sqlite3.c	/^#define sqlite3_db_mutex /;"	d	file:
sqlite3_db_mutex	testdocs/sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){$/;"	f
sqlite3_db_readonly	testdocs/sqlite3.c	/^#define sqlite3_db_readonly /;"	d	file:
sqlite3_db_readonly	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_release_memory	testdocs/sqlite3.c	/^#define sqlite3_db_release_memory /;"	d	file:
sqlite3_db_release_memory	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_db_release_memory(sqlite3 *db){$/;"	f
sqlite3_db_status	testdocs/sqlite3.c	/^#define sqlite3_db_status /;"	d	file:
sqlite3_db_status	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_db_status($/;"	f
sqlite3_debug_mutex	testdocs/sqlite3.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	testdocs/sqlite3.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_declare_vtab	testdocs/sqlite3.c	/^# define sqlite3_declare_vtab /;"	d	file:
sqlite3_declare_vtab	testdocs/sqlite3.c	/^#define sqlite3_declare_vtab /;"	d	file:
sqlite3_declare_vtab	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f
sqlite3_destructor_type	testdocs/sqlite3.c	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	file:
sqlite3_diskfull	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f
sqlite3_enable_shared_cache	testdocs/sqlite3.c	/^# define sqlite3_enable_shared_cache /;"	d	file:
sqlite3_enable_shared_cache	testdocs/sqlite3.c	/^#define sqlite3_enable_shared_cache /;"	d	file:
sqlite3_enable_shared_cache	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_enable_shared_cache(int enable){$/;"	f
sqlite3_errcode	testdocs/sqlite3.c	/^#define sqlite3_errcode /;"	d	file:
sqlite3_errcode	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_errcode(sqlite3 *db){$/;"	f
sqlite3_errmsg	testdocs/sqlite3.c	/^#define sqlite3_errmsg /;"	d	file:
sqlite3_errmsg	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){$/;"	f
sqlite3_errmsg16	testdocs/sqlite3.c	/^# define sqlite3_errmsg16 /;"	d	file:
sqlite3_errmsg16	testdocs/sqlite3.c	/^#define sqlite3_errmsg16 /;"	d	file:
sqlite3_errmsg16	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){$/;"	f
sqlite3_errstr	testdocs/sqlite3.c	/^#define sqlite3_errstr /;"	d	file:
sqlite3_errstr	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_errstr(int rc){$/;"	f
sqlite3_exec	testdocs/sqlite3.c	/^#define sqlite3_exec /;"	d	file:
sqlite3_exec	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_exec($/;"	f
sqlite3_expanded_sql	testdocs/sqlite3.c	/^#define sqlite3_expanded_sql /;"	d	file:
sqlite3_expanded_sql	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_expanded_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_expired	testdocs/sqlite3.c	/^#define sqlite3_expired /;"	d	file:
sqlite3_expired	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f
sqlite3_extended_errcode	testdocs/sqlite3.c	/^#define sqlite3_extended_errcode /;"	d	file:
sqlite3_extended_errcode	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){$/;"	f
sqlite3_extended_result_codes	testdocs/sqlite3.c	/^#define sqlite3_extended_result_codes /;"	d	file:
sqlite3_extended_result_codes	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f
sqlite3_file	testdocs/sqlite3.c	/^struct sqlite3_file {$/;"	s	file:
sqlite3_file	testdocs/sqlite3.c	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file	file:
sqlite3_file_control	testdocs/sqlite3.c	/^#define sqlite3_file_control /;"	d	file:
sqlite3_file_control	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f
sqlite3_finalize	testdocs/sqlite3.c	/^#define sqlite3_finalize /;"	d	file:
sqlite3_finalize	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_found_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_found_count = 0;$/;"	v
sqlite3_free	testdocs/sqlite3.c	/^#define sqlite3_free /;"	d	file:
sqlite3_free	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_free(void *p){$/;"	f
sqlite3_free_table	testdocs/sqlite3.c	/^# define sqlite3_free_table /;"	d	file:
sqlite3_free_table	testdocs/sqlite3.c	/^#define sqlite3_free_table /;"	d	file:
sqlite3_free_table	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_free_table($/;"	f
sqlite3_fts3_enable_parentheses	testdocs/sqlite3.c	/^#  define sqlite3_fts3_enable_parentheses /;"	d	file:
sqlite3_fts3_enable_parentheses	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_fts3_enable_parentheses = 0;$/;"	v
sqlite3_fts5_may_be_corrupt	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_fts5_may_be_corrupt = 1;$/;"	v
sqlite3_fullsync_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	testdocs/sqlite3.c	/^#define sqlite3_get_autocommit /;"	d	file:
sqlite3_get_autocommit	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){$/;"	f
sqlite3_get_auxdata	testdocs/sqlite3.c	/^#define sqlite3_get_auxdata /;"	d	file:
sqlite3_get_auxdata	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f
sqlite3_get_table	testdocs/sqlite3.c	/^# define sqlite3_get_table /;"	d	file:
sqlite3_get_table	testdocs/sqlite3.c	/^#define sqlite3_get_table /;"	d	file:
sqlite3_get_table	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_get_table($/;"	f
sqlite3_get_table_cb	testdocs/sqlite3.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:
sqlite3_global_recover	testdocs/sqlite3.c	/^#define sqlite3_global_recover /;"	d	file:
sqlite3_global_recover	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_global_recover(void){$/;"	f
sqlite3_hostid_num	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_hostid_num = 0;$/;"	v
sqlite3_index_constraint	testdocs/sqlite3.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint_usage	testdocs/sqlite3.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_info	testdocs/sqlite3.c	/^struct sqlite3_index_info {$/;"	s	file:
sqlite3_index_info	testdocs/sqlite3.c	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info	file:
sqlite3_index_orderby	testdocs/sqlite3.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_initialize	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_initialize(void){$/;"	f
sqlite3_int64	testdocs/sqlite3.c	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	file:
sqlite3_interrupt	testdocs/sqlite3.c	/^#define sqlite3_interrupt /;"	d	file:
sqlite3_interrupt	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_interrupt(sqlite3 *db){$/;"	f
sqlite3_interrupt_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_io_methods	testdocs/sqlite3.c	/^struct sqlite3_io_methods {$/;"	s	file:
sqlite3_io_methods	testdocs/sqlite3.c	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods	file:
sqlite3_last_insert_rowid	testdocs/sqlite3.c	/^#define sqlite3_last_insert_rowid /;"	d	file:
sqlite3_last_insert_rowid	testdocs/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f
sqlite3_libversion	testdocs/sqlite3.c	/^#define sqlite3_libversion /;"	d	file:
sqlite3_libversion	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }$/;"	f
sqlite3_libversion_number	testdocs/sqlite3.c	/^#define sqlite3_libversion_number /;"	d	file:
sqlite3_libversion_number	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f
sqlite3_like_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	testdocs/sqlite3.c	/^#define sqlite3_limit /;"	d	file:
sqlite3_limit	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f
sqlite3_load_extension	testdocs/sqlite3.c	/^#define sqlite3_load_extension /;"	d	file:
sqlite3_load_extension	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_load_extension($/;"	f
sqlite3_loadext_entry	testdocs/sqlite3.c	/^typedef int (*sqlite3_loadext_entry)($/;"	t	file:
sqlite3_log	testdocs/sqlite3.c	/^#define sqlite3_log /;"	d	file:
sqlite3_log	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f
sqlite3_malloc	testdocs/sqlite3.c	/^#define sqlite3_malloc /;"	d	file:
sqlite3_malloc	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_malloc(int n){$/;"	f
sqlite3_malloc64	testdocs/sqlite3.c	/^#define sqlite3_malloc64 /;"	d	file:
sqlite3_malloc64	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_malloc64(sqlite3_uint64 n){$/;"	f
sqlite3_max_blobsize	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_mem_methods	testdocs/sqlite3.c	/^struct sqlite3_mem_methods {$/;"	s	file:
sqlite3_mem_methods	testdocs/sqlite3.c	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods	file:
sqlite3_memdebug_vfs_oom_test	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_memory_alarm($/;"	f
sqlite3_memory_highwater	testdocs/sqlite3.c	/^#define sqlite3_memory_highwater /;"	d	file:
sqlite3_memory_highwater	testdocs/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){$/;"	f
sqlite3_memory_used	testdocs/sqlite3.c	/^#define sqlite3_memory_used /;"	d	file:
sqlite3_memory_used	testdocs/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_used(void){$/;"	f
sqlite3_module	testdocs/sqlite3.c	/^struct sqlite3_module {$/;"	s	file:
sqlite3_module	testdocs/sqlite3.c	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module	file:
sqlite3_mprintf	testdocs/sqlite3.c	/^#define sqlite3_mprintf /;"	d	file:
sqlite3_mprintf	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){$/;"	f
sqlite3_msize	testdocs/sqlite3.c	/^#define sqlite3_msize /;"	d	file:
sqlite3_msize	testdocs/sqlite3.c	/^SQLITE_API sqlite3_uint64 sqlite3_msize(void *p){$/;"	f
sqlite3_mutex	testdocs/sqlite3.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	testdocs/sqlite3.c	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex	file:
sqlite3_mutex_alloc	testdocs/sqlite3.c	/^#define sqlite3_mutex_alloc /;"	d	file:
sqlite3_mutex_alloc	testdocs/sqlite3.c	/^#define sqlite3_mutex_alloc(/;"	d	file:
sqlite3_mutex_alloc	testdocs/sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f
sqlite3_mutex_enter	testdocs/sqlite3.c	/^#define sqlite3_mutex_enter /;"	d	file:
sqlite3_mutex_enter	testdocs/sqlite3.c	/^#define sqlite3_mutex_enter(/;"	d	file:
sqlite3_mutex_enter	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_free	testdocs/sqlite3.c	/^#define sqlite3_mutex_free /;"	d	file:
sqlite3_mutex_free	testdocs/sqlite3.c	/^#define sqlite3_mutex_free(/;"	d	file:
sqlite3_mutex_free	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_held	testdocs/sqlite3.c	/^#define sqlite3_mutex_held(/;"	d	file:
sqlite3_mutex_held	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_leave	testdocs/sqlite3.c	/^#define sqlite3_mutex_leave /;"	d	file:
sqlite3_mutex_leave	testdocs/sqlite3.c	/^#define sqlite3_mutex_leave(/;"	d	file:
sqlite3_mutex_leave	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_methods	testdocs/sqlite3.c	/^struct sqlite3_mutex_methods {$/;"	s	file:
sqlite3_mutex_methods	testdocs/sqlite3.c	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods	file:
sqlite3_mutex_notheld	testdocs/sqlite3.c	/^#define sqlite3_mutex_notheld(/;"	d	file:
sqlite3_mutex_notheld	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_try	testdocs/sqlite3.c	/^#define sqlite3_mutex_try /;"	d	file:
sqlite3_mutex_try	testdocs/sqlite3.c	/^#define sqlite3_mutex_try(/;"	d	file:
sqlite3_mutex_try	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f
sqlite3_next_stmt	testdocs/sqlite3.c	/^#define sqlite3_next_stmt /;"	d	file:
sqlite3_next_stmt	testdocs/sqlite3.c	/^SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f
sqlite3_open	testdocs/sqlite3.c	/^#define sqlite3_open /;"	d	file:
sqlite3_open	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_open($/;"	f
sqlite3_open16	testdocs/sqlite3.c	/^# define sqlite3_open16 /;"	d	file:
sqlite3_open16	testdocs/sqlite3.c	/^#define sqlite3_open16 /;"	d	file:
sqlite3_open16	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_open16($/;"	f
sqlite3_open_file_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	testdocs/sqlite3.c	/^#define sqlite3_open_v2 /;"	d	file:
sqlite3_open_v2	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_open_v2($/;"	f
sqlite3_opentemp_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){$/;"	f
sqlite3_os_init	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){$/;"	f
sqlite3_os_type	testdocs/sqlite3.c	/^SQLITE_API LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	testdocs/sqlite3.c	/^static LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	testdocs/sqlite3.c	/^#define sqlite3_overload_function /;"	d	file:
sqlite3_overload_function	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_overload_function($/;"	f
sqlite3_pager_readdb_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_pcache	testdocs/sqlite3.c	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache	file:
sqlite3_pcache_methods	testdocs/sqlite3.c	/^struct sqlite3_pcache_methods {$/;"	s	file:
sqlite3_pcache_methods	testdocs/sqlite3.c	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods	file:
sqlite3_pcache_methods2	testdocs/sqlite3.c	/^struct sqlite3_pcache_methods2 {$/;"	s	file:
sqlite3_pcache_methods2	testdocs/sqlite3.c	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2	file:
sqlite3_pcache_page	testdocs/sqlite3.c	/^struct sqlite3_pcache_page {$/;"	s	file:
sqlite3_pcache_page	testdocs/sqlite3.c	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page	file:
sqlite3_prepare	testdocs/sqlite3.c	/^#define sqlite3_prepare /;"	d	file:
sqlite3_prepare	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_prepare($/;"	f
sqlite3_prepare16	testdocs/sqlite3.c	/^# define sqlite3_prepare16 /;"	d	file:
sqlite3_prepare16	testdocs/sqlite3.c	/^#define sqlite3_prepare16 /;"	d	file:
sqlite3_prepare16	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_prepare16($/;"	f
sqlite3_prepare16_v2	testdocs/sqlite3.c	/^# define sqlite3_prepare16_v2 /;"	d	file:
sqlite3_prepare16_v2	testdocs/sqlite3.c	/^#define sqlite3_prepare16_v2 /;"	d	file:
sqlite3_prepare16_v2	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_prepare16_v2($/;"	f
sqlite3_prepare_v2	testdocs/sqlite3.c	/^#define sqlite3_prepare_v2 /;"	d	file:
sqlite3_prepare_v2	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_prepare_v2($/;"	f
sqlite3_preupdate_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_preupdate_count(sqlite3 *db){$/;"	f
sqlite3_preupdate_depth	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_preupdate_depth(sqlite3 *db){$/;"	f
sqlite3_preupdate_hook	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_preupdate_hook($/;"	f
sqlite3_preupdate_new	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_preupdate_new(sqlite3 *db, int iIdx, sqlite3_value **ppValue){$/;"	f
sqlite3_preupdate_old	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_preupdate_old(sqlite3 *db, int iIdx, sqlite3_value **ppValue){$/;"	f
sqlite3_profile	testdocs/sqlite3.c	/^# define sqlite3_profile /;"	d	file:
sqlite3_profile	testdocs/sqlite3.c	/^#define sqlite3_profile /;"	d	file:
sqlite3_profile	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_profile($/;"	f
sqlite3_progress_handler	testdocs/sqlite3.c	/^# define sqlite3_progress_handler /;"	d	file:
sqlite3_progress_handler	testdocs/sqlite3.c	/^#define sqlite3_progress_handler /;"	d	file:
sqlite3_progress_handler	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_progress_handler($/;"	f
sqlite3_randomness	testdocs/sqlite3.c	/^#define sqlite3_randomness /;"	d	file:
sqlite3_randomness	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_randomness(int N, void *pBuf){$/;"	f
sqlite3_realloc	testdocs/sqlite3.c	/^#define sqlite3_realloc /;"	d	file:
sqlite3_realloc	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_realloc(void *pOld, int n){$/;"	f
sqlite3_realloc64	testdocs/sqlite3.c	/^#define sqlite3_realloc64 /;"	d	file:
sqlite3_realloc64	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_realloc64(void *pOld, sqlite3_uint64 n){$/;"	f
sqlite3_release_memory	testdocs/sqlite3.c	/^#define sqlite3_release_memory /;"	d	file:
sqlite3_release_memory	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_release_memory(int n){$/;"	f
sqlite3_reset	testdocs/sqlite3.c	/^#define sqlite3_reset /;"	d	file:
sqlite3_reset	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_reset_auto_extension	testdocs/sqlite3.c	/^#define sqlite3_reset_auto_extension /;"	d	file:
sqlite3_reset_auto_extension	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_reset_auto_extension(void){$/;"	f
sqlite3_result_blob	testdocs/sqlite3.c	/^#define sqlite3_result_blob /;"	d	file:
sqlite3_result_blob	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_blob($/;"	f
sqlite3_result_blob64	testdocs/sqlite3.c	/^#define sqlite3_result_blob64 /;"	d	file:
sqlite3_result_blob64	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_blob64($/;"	f
sqlite3_result_double	testdocs/sqlite3.c	/^#define sqlite3_result_double /;"	d	file:
sqlite3_result_double	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f
sqlite3_result_error	testdocs/sqlite3.c	/^#define sqlite3_result_error /;"	d	file:
sqlite3_result_error	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f
sqlite3_result_error16	testdocs/sqlite3.c	/^# define sqlite3_result_error16 /;"	d	file:
sqlite3_result_error16	testdocs/sqlite3.c	/^#define sqlite3_result_error16 /;"	d	file:
sqlite3_result_error16	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f
sqlite3_result_error_code	testdocs/sqlite3.c	/^#define sqlite3_result_error_code /;"	d	file:
sqlite3_result_error_code	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f
sqlite3_result_error_nomem	testdocs/sqlite3.c	/^#define sqlite3_result_error_nomem /;"	d	file:
sqlite3_result_error_nomem	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_toobig	testdocs/sqlite3.c	/^#define sqlite3_result_error_toobig /;"	d	file:
sqlite3_result_error_toobig	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f
sqlite3_result_int	testdocs/sqlite3.c	/^#define sqlite3_result_int /;"	d	file:
sqlite3_result_int	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f
sqlite3_result_int64	testdocs/sqlite3.c	/^#define sqlite3_result_int64 /;"	d	file:
sqlite3_result_int64	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f
sqlite3_result_null	testdocs/sqlite3.c	/^#define sqlite3_result_null /;"	d	file:
sqlite3_result_null	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){$/;"	f
sqlite3_result_subtype	testdocs/sqlite3.c	/^#define sqlite3_result_subtype /;"	d	file:
sqlite3_result_subtype	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_subtype(sqlite3_context *pCtx, unsigned int eSubtype){$/;"	f
sqlite3_result_text	testdocs/sqlite3.c	/^#define sqlite3_result_text /;"	d	file:
sqlite3_result_text	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_text($/;"	f
sqlite3_result_text16	testdocs/sqlite3.c	/^# define sqlite3_result_text16 /;"	d	file:
sqlite3_result_text16	testdocs/sqlite3.c	/^#define sqlite3_result_text16 /;"	d	file:
sqlite3_result_text16	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_text16($/;"	f
sqlite3_result_text16be	testdocs/sqlite3.c	/^# define sqlite3_result_text16be /;"	d	file:
sqlite3_result_text16be	testdocs/sqlite3.c	/^#define sqlite3_result_text16be /;"	d	file:
sqlite3_result_text16be	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_text16be($/;"	f
sqlite3_result_text16le	testdocs/sqlite3.c	/^# define sqlite3_result_text16le /;"	d	file:
sqlite3_result_text16le	testdocs/sqlite3.c	/^#define sqlite3_result_text16le /;"	d	file:
sqlite3_result_text16le	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_text16le($/;"	f
sqlite3_result_text64	testdocs/sqlite3.c	/^#define sqlite3_result_text64 /;"	d	file:
sqlite3_result_text64	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_text64($/;"	f
sqlite3_result_value	testdocs/sqlite3.c	/^#define sqlite3_result_value /;"	d	file:
sqlite3_result_value	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f
sqlite3_result_zeroblob	testdocs/sqlite3.c	/^#define sqlite3_result_zeroblob /;"	d	file:
sqlite3_result_zeroblob	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f
sqlite3_result_zeroblob64	testdocs/sqlite3.c	/^#define sqlite3_result_zeroblob64 /;"	d	file:
sqlite3_result_zeroblob64	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_result_zeroblob64(sqlite3_context *pCtx, u64 n){$/;"	f
sqlite3_rollback_hook	testdocs/sqlite3.c	/^#define sqlite3_rollback_hook /;"	d	file:
sqlite3_rollback_hook	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_rollback_hook($/;"	f
sqlite3_rtree_dbl	testdocs/sqlite3.c	/^  typedef double sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_dbl	testdocs/sqlite3.c	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_geometry	testdocs/sqlite3.c	/^struct sqlite3_rtree_geometry {$/;"	s	file:
sqlite3_rtree_geometry	testdocs/sqlite3.c	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry	file:
sqlite3_rtree_geometry_callback	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_rtree_geometry_callback($/;"	f
sqlite3_rtree_query_callback	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_rtree_query_callback($/;"	f
sqlite3_rtree_query_info	testdocs/sqlite3.c	/^struct sqlite3_rtree_query_info {$/;"	s	file:
sqlite3_rtree_query_info	testdocs/sqlite3.c	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info	file:
sqlite3_search_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_search_count = 0;$/;"	v
sqlite3_session	testdocs/sqlite3.c	/^struct sqlite3_session {$/;"	s	file:
sqlite3_session	testdocs/sqlite3.c	/^typedef struct sqlite3_session sqlite3_session;$/;"	t	typeref:struct:sqlite3_session	file:
sqlite3_set_authorizer	testdocs/sqlite3.c	/^# define sqlite3_set_authorizer /;"	d	file:
sqlite3_set_authorizer	testdocs/sqlite3.c	/^#define sqlite3_set_authorizer /;"	d	file:
sqlite3_set_authorizer	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_set_authorizer($/;"	f
sqlite3_set_auxdata	testdocs/sqlite3.c	/^#define sqlite3_set_auxdata /;"	d	file:
sqlite3_set_auxdata	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_set_auxdata($/;"	f
sqlite3_set_last_insert_rowid	testdocs/sqlite3.c	/^#define sqlite3_set_last_insert_rowid /;"	d	file:
sqlite3_set_last_insert_rowid	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_set_last_insert_rowid(sqlite3 *db, sqlite3_int64 iRowid){$/;"	f
sqlite3_shutdown	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_shutdown(void){$/;"	f
sqlite3_sleep	testdocs/sqlite3.c	/^#define sqlite3_sleep /;"	d	file:
sqlite3_sleep	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_sleep(int ms){$/;"	f
sqlite3_snapshot	testdocs/sqlite3.c	/^typedef struct sqlite3_snapshot {$/;"	s	file:
sqlite3_snapshot	testdocs/sqlite3.c	/^} sqlite3_snapshot;$/;"	t	typeref:struct:sqlite3_snapshot	file:
sqlite3_snapshot_cmp	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2){$/;"	f
sqlite3_snapshot_free	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_snapshot_free(sqlite3_snapshot *pSnapshot){$/;"	f
sqlite3_snapshot_get	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_snapshot_get($/;"	f
sqlite3_snapshot_open	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_snapshot_open($/;"	f
sqlite3_snapshot_recover	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_snprintf	testdocs/sqlite3.c	/^#define sqlite3_snprintf /;"	d	file:
sqlite3_snprintf	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f
sqlite3_soft_heap_limit	testdocs/sqlite3.c	/^#define sqlite3_soft_heap_limit /;"	d	file:
sqlite3_soft_heap_limit	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_soft_heap_limit(int n){$/;"	f
sqlite3_soft_heap_limit64	testdocs/sqlite3.c	/^#define sqlite3_soft_heap_limit64 /;"	d	file:
sqlite3_soft_heap_limit64	testdocs/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){$/;"	f
sqlite3_sort_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	testdocs/sqlite3.c	/^#define sqlite3_sourceid /;"	d	file:
sqlite3_sourceid	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f
sqlite3_sql	testdocs/sqlite3.c	/^#define sqlite3_sql /;"	d	file:
sqlite3_sql	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_status	testdocs/sqlite3.c	/^#define sqlite3_status /;"	d	file:
sqlite3_status	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f
sqlite3_status64	testdocs/sqlite3.c	/^#define sqlite3_status64 /;"	d	file:
sqlite3_status64	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_status64($/;"	f
sqlite3_step	testdocs/sqlite3.c	/^#define sqlite3_step /;"	d	file:
sqlite3_step	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt	testdocs/sqlite3.c	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt	file:
sqlite3_stmt_busy	testdocs/sqlite3.c	/^#define sqlite3_stmt_busy /;"	d	file:
sqlite3_stmt_busy	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_readonly	testdocs/sqlite3.c	/^#define sqlite3_stmt_readonly /;"	d	file:
sqlite3_stmt_readonly	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_scanstatus	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_stmt_scanstatus($/;"	f
sqlite3_stmt_scanstatus_reset	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_status	testdocs/sqlite3.c	/^#define sqlite3_stmt_status /;"	d	file:
sqlite3_stmt_status	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f
sqlite3_strglob	testdocs/sqlite3.c	/^#define sqlite3_strglob /;"	d	file:
sqlite3_strglob	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){$/;"	f
sqlite3_stricmp	testdocs/sqlite3.c	/^#define sqlite3_stricmp /;"	d	file:
sqlite3_stricmp	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_stricmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3_strlike	testdocs/sqlite3.c	/^#define sqlite3_strlike /;"	d	file:
sqlite3_strlike	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){$/;"	f
sqlite3_strnicmp	testdocs/sqlite3.c	/^#define sqlite3_strnicmp /;"	d	file:
sqlite3_strnicmp	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f
sqlite3_sync_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_sync_count = 0;$/;"	v
sqlite3_syscall_ptr	testdocs/sqlite3.c	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	file:
sqlite3_system_errno	testdocs/sqlite3.c	/^#define sqlite3_system_errno /;"	d	file:
sqlite3_system_errno	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_system_errno(sqlite3 *db){$/;"	f
sqlite3_table_column_metadata	testdocs/sqlite3.c	/^#define sqlite3_table_column_metadata /;"	d	file:
sqlite3_table_column_metadata	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_table_column_metadata($/;"	f
sqlite3_temp_directory	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_temp_directory	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory;$/;"	v
sqlite3_test_control	testdocs/sqlite3.c	/^#define sqlite3_test_control /;"	d	file:
sqlite3_test_control	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_test_control(int op, ...){$/;"	f
sqlite3_thread_cleanup	testdocs/sqlite3.c	/^#define sqlite3_thread_cleanup /;"	d	file:
sqlite3_thread_cleanup	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_thread_cleanup(void){$/;"	f
sqlite3_threadsafe	testdocs/sqlite3.c	/^#define sqlite3_threadsafe /;"	d	file:
sqlite3_threadsafe	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f
sqlite3_tokenizer	testdocs/sqlite3.c	/^struct sqlite3_tokenizer {$/;"	s	file:
sqlite3_tokenizer	testdocs/sqlite3.c	/^typedef struct sqlite3_tokenizer sqlite3_tokenizer;$/;"	t	typeref:struct:sqlite3_tokenizer	file:
sqlite3_tokenizer_cursor	testdocs/sqlite3.c	/^struct sqlite3_tokenizer_cursor {$/;"	s	file:
sqlite3_tokenizer_cursor	testdocs/sqlite3.c	/^typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;$/;"	t	typeref:struct:sqlite3_tokenizer_cursor	file:
sqlite3_tokenizer_module	testdocs/sqlite3.c	/^struct sqlite3_tokenizer_module {$/;"	s	file:
sqlite3_tokenizer_module	testdocs/sqlite3.c	/^typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;$/;"	t	typeref:struct:sqlite3_tokenizer_module	file:
sqlite3_total_changes	testdocs/sqlite3.c	/^#define sqlite3_total_changes /;"	d	file:
sqlite3_total_changes	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_total_changes(sqlite3 *db){$/;"	f
sqlite3_trace	testdocs/sqlite3.c	/^# define sqlite3_trace /;"	d	file:
sqlite3_trace	testdocs/sqlite3.c	/^#define sqlite3_trace /;"	d	file:
sqlite3_trace	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_trace(sqlite3 *db, void(*xTrace)(void*,const char*), void *pArg){$/;"	f
sqlite3_trace_v2	testdocs/sqlite3.c	/^# define sqlite3_trace_v2 /;"	d	file:
sqlite3_trace_v2	testdocs/sqlite3.c	/^#define sqlite3_trace_v2 /;"	d	file:
sqlite3_trace_v2	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_trace_v2($/;"	f
sqlite3_transfer_bindings	testdocs/sqlite3.c	/^#define sqlite3_transfer_bindings /;"	d	file:
sqlite3_transfer_bindings	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3_uint64	testdocs/sqlite3.c	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	file:
sqlite3_unlock_notify	testdocs/sqlite3.c	/^#define sqlite3_unlock_notify /;"	d	file:
sqlite3_unlock_notify	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_unlock_notify($/;"	f
sqlite3_update_hook	testdocs/sqlite3.c	/^#define sqlite3_update_hook /;"	d	file:
sqlite3_update_hook	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_update_hook($/;"	f
sqlite3_uri_boolean	testdocs/sqlite3.c	/^#define sqlite3_uri_boolean /;"	d	file:
sqlite3_uri_boolean	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){$/;"	f
sqlite3_uri_int64	testdocs/sqlite3.c	/^#define sqlite3_uri_int64 /;"	d	file:
sqlite3_uri_int64	testdocs/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_uri_int64($/;"	f
sqlite3_uri_parameter	testdocs/sqlite3.c	/^#define sqlite3_uri_parameter /;"	d	file:
sqlite3_uri_parameter	testdocs/sqlite3.c	/^SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){$/;"	f
sqlite3_uri_vsnprintf	testdocs/sqlite3.c	/^#define sqlite3_uri_vsnprintf /;"	d	file:
sqlite3_user_data	testdocs/sqlite3.c	/^#define sqlite3_user_data /;"	d	file:
sqlite3_user_data	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_user_data(sqlite3_context *p){$/;"	f
sqlite3_userauth	testdocs/sqlite3.c	/^struct sqlite3_userauth {$/;"	s	file:
sqlite3_userauth	testdocs/sqlite3.c	/^typedef struct sqlite3_userauth sqlite3_userauth;$/;"	t	typeref:struct:sqlite3_userauth	file:
sqlite3_value	testdocs/sqlite3.c	/^struct sqlite3_value {$/;"	s	file:
sqlite3_value	testdocs/sqlite3.c	/^typedef struct sqlite3_value sqlite3_value;$/;"	t	typeref:struct:sqlite3_value	file:
sqlite3_value_blob	testdocs/sqlite3.c	/^#define sqlite3_value_blob /;"	d	file:
sqlite3_value_blob	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes	testdocs/sqlite3.c	/^#define sqlite3_value_bytes /;"	d	file:
sqlite3_value_bytes	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes16	testdocs/sqlite3.c	/^#define sqlite3_value_bytes16 /;"	d	file:
sqlite3_value_bytes16	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f
sqlite3_value_double	testdocs/sqlite3.c	/^#define sqlite3_value_double /;"	d	file:
sqlite3_value_double	testdocs/sqlite3.c	/^SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){$/;"	f
sqlite3_value_dup	testdocs/sqlite3.c	/^#define sqlite3_value_dup /;"	d	file:
sqlite3_value_dup	testdocs/sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_value_dup(const sqlite3_value *pOrig){$/;"	f
sqlite3_value_free	testdocs/sqlite3.c	/^#define sqlite3_value_free /;"	d	file:
sqlite3_value_free	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_value_free(sqlite3_value *pOld){$/;"	f
sqlite3_value_int	testdocs/sqlite3.c	/^#define sqlite3_value_int /;"	d	file:
sqlite3_value_int	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){$/;"	f
sqlite3_value_int64	testdocs/sqlite3.c	/^#define sqlite3_value_int64 /;"	d	file:
sqlite3_value_int64	testdocs/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){$/;"	f
sqlite3_value_numeric_type	testdocs/sqlite3.c	/^#define sqlite3_value_numeric_type /;"	d	file:
sqlite3_value_numeric_type	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f
sqlite3_value_subtype	testdocs/sqlite3.c	/^#define sqlite3_value_subtype /;"	d	file:
sqlite3_value_subtype	testdocs/sqlite3.c	/^SQLITE_API unsigned int sqlite3_value_subtype(sqlite3_value *pVal){$/;"	f
sqlite3_value_text	testdocs/sqlite3.c	/^#define sqlite3_value_text /;"	d	file:
sqlite3_value_text	testdocs/sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16	testdocs/sqlite3.c	/^# define sqlite3_value_text16 /;"	d	file:
sqlite3_value_text16	testdocs/sqlite3.c	/^#define sqlite3_value_text16 /;"	d	file:
sqlite3_value_text16	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){$/;"	f
sqlite3_value_text16be	testdocs/sqlite3.c	/^# define sqlite3_value_text16be /;"	d	file:
sqlite3_value_text16be	testdocs/sqlite3.c	/^#define sqlite3_value_text16be /;"	d	file:
sqlite3_value_text16be	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16le	testdocs/sqlite3.c	/^# define sqlite3_value_text16le /;"	d	file:
sqlite3_value_text16le	testdocs/sqlite3.c	/^#define sqlite3_value_text16le /;"	d	file:
sqlite3_value_text16le	testdocs/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f
sqlite3_value_type	testdocs/sqlite3.c	/^#define sqlite3_value_type /;"	d	file:
sqlite3_value_type	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){$/;"	f
sqlite3_version	testdocs/sqlite3.c	/^SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_vfs	testdocs/sqlite3.c	/^struct sqlite3_vfs {$/;"	s	file:
sqlite3_vfs	testdocs/sqlite3.c	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs	file:
sqlite3_vfs_find	testdocs/sqlite3.c	/^#define sqlite3_vfs_find /;"	d	file:
sqlite3_vfs_find	testdocs/sqlite3.c	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f
sqlite3_vfs_register	testdocs/sqlite3.c	/^#define sqlite3_vfs_register /;"	d	file:
sqlite3_vfs_register	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f
sqlite3_vfs_unregister	testdocs/sqlite3.c	/^#define sqlite3_vfs_unregister /;"	d	file:
sqlite3_vfs_unregister	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f
sqlite3_vmprintf	testdocs/sqlite3.c	/^#define sqlite3_vmprintf /;"	d	file:
sqlite3_vmprintf	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f
sqlite3_vsnprintf	testdocs/sqlite3.c	/^#define sqlite3_vsnprintf /;"	d	file:
sqlite3_vsnprintf	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){$/;"	f
sqlite3_vtab	testdocs/sqlite3.c	/^struct sqlite3_vtab {$/;"	s	file:
sqlite3_vtab	testdocs/sqlite3.c	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab	file:
sqlite3_vtab_config	testdocs/sqlite3.c	/^# define sqlite3_vtab_config /;"	d	file:
sqlite3_vtab_config	testdocs/sqlite3.c	/^#define sqlite3_vtab_config /;"	d	file:
sqlite3_vtab_config	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_vtab_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_vtab_cursor	testdocs/sqlite3.c	/^struct sqlite3_vtab_cursor {$/;"	s	file:
sqlite3_vtab_cursor	testdocs/sqlite3.c	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor	file:
sqlite3_vtab_on_conflict	testdocs/sqlite3.c	/^# define sqlite3_vtab_on_conflict /;"	d	file:
sqlite3_vtab_on_conflict	testdocs/sqlite3.c	/^#define sqlite3_vtab_on_conflict /;"	d	file:
sqlite3_vtab_on_conflict	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *db){$/;"	f
sqlite3_wal_autocheckpoint	testdocs/sqlite3.c	/^#define sqlite3_wal_autocheckpoint /;"	d	file:
sqlite3_wal_autocheckpoint	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f
sqlite3_wal_checkpoint	testdocs/sqlite3.c	/^#define sqlite3_wal_checkpoint /;"	d	file:
sqlite3_wal_checkpoint	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_wal_checkpoint_v2	testdocs/sqlite3.c	/^#define sqlite3_wal_checkpoint_v2 /;"	d	file:
sqlite3_wal_checkpoint_v2	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint_v2($/;"	f
sqlite3_wal_hook	testdocs/sqlite3.c	/^#define sqlite3_wal_hook /;"	d	file:
sqlite3_wal_hook	testdocs/sqlite3.c	/^SQLITE_API void *sqlite3_wal_hook($/;"	f
sqlite3_win32_compact_heap	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_win32_compact_heap(LPUINT pnLargest){$/;"	f
sqlite3_win32_is_nt	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_win32_is_nt(void){$/;"	f
sqlite3_win32_mbcs_to_utf8	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zText){$/;"	f
sqlite3_win32_mbcs_to_utf8_v2	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_win32_mbcs_to_utf8_v2(const char *zText, int useAnsi){$/;"	f
sqlite3_win32_reset_heap	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_win32_reset_heap(){$/;"	f
sqlite3_win32_set_directory	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_win32_set_directory(DWORD type, LPCWSTR zValue){$/;"	f
sqlite3_win32_sleep	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_win32_sleep(DWORD milliseconds){$/;"	f
sqlite3_win32_unicode_to_utf8	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_win32_unicode_to_utf8(LPCWSTR zWideText){$/;"	f
sqlite3_win32_utf8_to_mbcs	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_win32_utf8_to_mbcs(const char *zText){$/;"	f
sqlite3_win32_utf8_to_mbcs_v2	testdocs/sqlite3.c	/^SQLITE_API char *sqlite3_win32_utf8_to_mbcs_v2(const char *zText, int useAnsi){$/;"	f
sqlite3_win32_utf8_to_unicode	testdocs/sqlite3.c	/^SQLITE_API LPWSTR sqlite3_win32_utf8_to_unicode(const char *zText){$/;"	f
sqlite3_win32_write_debug	testdocs/sqlite3.c	/^SQLITE_API void sqlite3_win32_write_debug(const char *zBuf, int nBuf){$/;"	f
sqlite3_xauth	testdocs/sqlite3.c	/^  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,$/;"	t	file:
sqlite3_xferopt_count	testdocs/sqlite3.c	/^SQLITE_API int sqlite3_xferopt_count;$/;"	v
sqlite3changegroup_add	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changegroup_add(sqlite3_changegroup *pGrp, int nData, void *pData){$/;"	f
sqlite3changegroup_add_strm	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changegroup_add_strm($/;"	f
sqlite3changegroup_delete	testdocs/sqlite3.c	/^SQLITE_API void sqlite3changegroup_delete(sqlite3_changegroup *pGrp){$/;"	f
sqlite3changegroup_new	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changegroup_new(sqlite3_changegroup **pp){$/;"	f
sqlite3changegroup_output	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changegroup_output($/;"	f
sqlite3changegroup_output_strm	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changegroup_output_strm($/;"	f
sqlite3changeset_apply	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_apply($/;"	f
sqlite3changeset_apply_strm	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_apply_strm($/;"	f
sqlite3changeset_concat	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_concat($/;"	f
sqlite3changeset_concat_strm	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_concat_strm($/;"	f
sqlite3changeset_conflict	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_conflict($/;"	f
sqlite3changeset_finalize	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_finalize(sqlite3_changeset_iter *p){$/;"	f
sqlite3changeset_fk_conflicts	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_fk_conflicts($/;"	f
sqlite3changeset_invert	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_invert($/;"	f
sqlite3changeset_invert_strm	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_invert_strm($/;"	f
sqlite3changeset_new	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_new($/;"	f
sqlite3changeset_next	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_next(sqlite3_changeset_iter *p){$/;"	f
sqlite3changeset_old	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_old($/;"	f
sqlite3changeset_op	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_op($/;"	f
sqlite3changeset_pk	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_pk($/;"	f
sqlite3changeset_start	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_start($/;"	f
sqlite3changeset_start_strm	testdocs/sqlite3.c	/^SQLITE_API int sqlite3changeset_start_strm($/;"	f
sqlite3one	testdocs/sqlite3.c	/^  const int sqlite3one = 1;$/;"	v
sqlite3one	testdocs/sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one = 1;$/;"	v
sqlite3rbu	testdocs/sqlite3.c	/^struct sqlite3rbu {$/;"	s	file:
sqlite3rbu	testdocs/sqlite3.c	/^typedef struct sqlite3rbu sqlite3rbu;$/;"	t	typeref:struct:sqlite3rbu	file:
sqlite3rbu_bp_progress	testdocs/sqlite3.c	/^SQLITE_API void sqlite3rbu_bp_progress(sqlite3rbu *p, int *pnOne, int *pnTwo){$/;"	f
sqlite3rbu_close	testdocs/sqlite3.c	/^SQLITE_API int sqlite3rbu_close(sqlite3rbu *p, char **pzErrmsg){$/;"	f
sqlite3rbu_create_vfs	testdocs/sqlite3.c	/^SQLITE_API int sqlite3rbu_create_vfs(const char *zName, const char *zParent){$/;"	f
sqlite3rbu_db	testdocs/sqlite3.c	/^SQLITE_API sqlite3 *sqlite3rbu_db(sqlite3rbu *pRbu, int bRbu){$/;"	f
sqlite3rbu_destroy_vfs	testdocs/sqlite3.c	/^SQLITE_API void sqlite3rbu_destroy_vfs(const char *zName){$/;"	f
sqlite3rbu_open	testdocs/sqlite3.c	/^SQLITE_API sqlite3rbu *sqlite3rbu_open($/;"	f
sqlite3rbu_progress	testdocs/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3rbu_progress(sqlite3rbu *pRbu){$/;"	f
sqlite3rbu_savestate	testdocs/sqlite3.c	/^SQLITE_API int sqlite3rbu_savestate(sqlite3rbu *p){$/;"	f
sqlite3rbu_state	testdocs/sqlite3.c	/^SQLITE_API int sqlite3rbu_state(sqlite3rbu *p){$/;"	f
sqlite3rbu_step	testdocs/sqlite3.c	/^SQLITE_API int sqlite3rbu_step(sqlite3rbu *p){$/;"	f
sqlite3rbu_vacuum	testdocs/sqlite3.c	/^SQLITE_API sqlite3rbu *sqlite3rbu_vacuum($/;"	f
sqlite3session_attach	testdocs/sqlite3.c	/^SQLITE_API int sqlite3session_attach($/;"	f
sqlite3session_changeset	testdocs/sqlite3.c	/^SQLITE_API int sqlite3session_changeset($/;"	f
sqlite3session_changeset_strm	testdocs/sqlite3.c	/^SQLITE_API int sqlite3session_changeset_strm($/;"	f
sqlite3session_create	testdocs/sqlite3.c	/^SQLITE_API int sqlite3session_create($/;"	f
sqlite3session_delete	testdocs/sqlite3.c	/^SQLITE_API void sqlite3session_delete(sqlite3_session *pSession){$/;"	f
sqlite3session_diff	testdocs/sqlite3.c	/^SQLITE_API int sqlite3session_diff($/;"	f
sqlite3session_enable	testdocs/sqlite3.c	/^SQLITE_API int sqlite3session_enable(sqlite3_session *pSession, int bEnable){$/;"	f
sqlite3session_indirect	testdocs/sqlite3.c	/^SQLITE_API int sqlite3session_indirect(sqlite3_session *pSession, int bIndirect){$/;"	f
sqlite3session_isempty	testdocs/sqlite3.c	/^SQLITE_API int sqlite3session_isempty(sqlite3_session *pSession){$/;"	f
sqlite3session_patchset	testdocs/sqlite3.c	/^SQLITE_API int sqlite3session_patchset($/;"	f
sqlite3session_patchset_strm	testdocs/sqlite3.c	/^SQLITE_API int sqlite3session_patchset_strm($/;"	f
sqlite3session_table_filter	testdocs/sqlite3.c	/^SQLITE_API void sqlite3session_table_filter($/;"	f
sqliteAuthBadReturnCode	testdocs/sqlite3.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:
sqliteDefaultBusyCallback	testdocs/sqlite3.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:
sqliteErrorFromPosixError	testdocs/sqlite3.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:
sqliteHashData	testdocs/sqlite3.c	/^#define sqliteHashData(/;"	d	file:
sqliteHashFirst	testdocs/sqlite3.c	/^#define sqliteHashFirst(/;"	d	file:
sqliteHashNext	testdocs/sqlite3.c	/^#define sqliteHashNext(/;"	d	file:
sqliteProcessJoin	testdocs/sqlite3.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:
sqliteViewResetAll	testdocs/sqlite3.c	/^# define sqliteViewResetAll(/;"	d	file:
sqliteViewResetAll	testdocs/sqlite3.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:
sqlite_int64	testdocs/sqlite3.c	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	file:
sqlite_int64	testdocs/sqlite3.c	/^  typedef __int64 sqlite_int64;$/;"	t	file:
sqlite_int64	testdocs/sqlite3.c	/^  typedef long long int sqlite_int64;$/;"	t	file:
sqlite_uint64	testdocs/sqlite3.c	/^    typedef SQLITE_UINT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	testdocs/sqlite3.c	/^    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	testdocs/sqlite3.c	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	file:
sqlite_uint64	testdocs/sqlite3.c	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	file:
star_oh	testdocs/sqlite3.c	/^static int star_oh(const char *z){$/;"	f	file:
startEndFlag	testdocs/sqlite3.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:
startTime	testdocs/sqlite3.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	file:
stat4Destructor	testdocs/sqlite3.c	/^static void stat4Destructor(void *pOld){$/;"	f	file:
stat4ValueFromExpr	testdocs/sqlite3.c	/^static int stat4ValueFromExpr($/;"	f	file:
statBestIndex	testdocs/sqlite3.c	/^static int statBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
statClearPage	testdocs/sqlite3.c	/^static void statClearPage(StatPage *p){$/;"	f	file:
statClose	testdocs/sqlite3.c	/^static int statClose(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statColumn	testdocs/sqlite3.c	/^static int statColumn($/;"	f	file:
statConnect	testdocs/sqlite3.c	/^static int statConnect($/;"	f	file:
statDecodePage	testdocs/sqlite3.c	/^static int statDecodePage(Btree *pBt, StatPage *p){$/;"	f	file:
statDisconnect	testdocs/sqlite3.c	/^static int statDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
statEof	testdocs/sqlite3.c	/^static int statEof(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statFilter	testdocs/sqlite3.c	/^static int statFilter($/;"	f	file:
statGet	testdocs/sqlite3.c	/^static void statGet($/;"	f	file:
statGetFuncdef	testdocs/sqlite3.c	/^static const FuncDef statGetFuncdef = {$/;"	v	file:
statInit	testdocs/sqlite3.c	/^static void statInit($/;"	f	file:
statInitFuncdef	testdocs/sqlite3.c	/^static const FuncDef statInitFuncdef = {$/;"	v	file:
statMutex	testdocs/sqlite3.c	/^static const char statMutex[] = {$/;"	v	file:
statNext	testdocs/sqlite3.c	/^static int statNext(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statOpen	testdocs/sqlite3.c	/^static int statOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
statPush	testdocs/sqlite3.c	/^static void statPush($/;"	f	file:
statPushFuncdef	testdocs/sqlite3.c	/^static const FuncDef statPushFuncdef = {$/;"	v	file:
statResetCsr	testdocs/sqlite3.c	/^static void statResetCsr(StatCursor *pCsr){$/;"	f	file:
statRowid	testdocs/sqlite3.c	/^static int statRowid(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
statSizeAndOffset	testdocs/sqlite3.c	/^static void statSizeAndOffset(StatCursor *pCsr){$/;"	f	file:
stateno	testdocs/sqlite3.c	/^  YYACTIONTYPE stateno;  \/* The state-number, or reduce action in SHIFTREDUCE *\/$/;"	m	struct:yyStackEntry	file:
stateno	testdocs/sqlite3.c	/^  fts5YYACTIONTYPE stateno;  \/* The state-number, or reduce action in SHIFTREDUCE *\/$/;"	m	struct:fts5yyStackEntry	file:
static_assert	stdc.h	/^    #define static_assert(/;"	d
status	testdocs/sqlite3.c	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
status64	testdocs/sqlite3.c	/^  int (*status64)(int,sqlite3_int64*,sqlite3_int64*,int);$/;"	m	struct:sqlite3_api_routines	file:
stem	testdocs/sqlite3.c	/^static int stem($/;"	f	file:
step	testdocs/sqlite3.c	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
step_list	testdocs/sqlite3.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	file:
stmt_busy	testdocs/sqlite3.c	/^  int (*stmt_busy)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
stmt_readonly	testdocs/sqlite3.c	/^  int (*stmt_readonly)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
stmt_status	testdocs/sqlite3.c	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
storeLastErrno	testdocs/sqlite3.c	/^static void storeLastErrno(unixFile *pFile, int error){$/;"	f	file:
strAccumFinishRealloc	testdocs/sqlite3.c	/^static SQLITE_NOINLINE char *strAccumFinishRealloc(StrAccum *p){$/;"	f	file:
strHash	testdocs/sqlite3.c	/^static unsigned int strHash(const char *z){$/;"	f	file:
strftimeFunc	testdocs/sqlite3.c	/^static void strftimeFunc($/;"	f	file:
strglob	testdocs/sqlite3.c	/^  int (*strglob)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
stricmp	testdocs/sqlite3.c	/^  int (*stricmp)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
stringdup	buf.c	/^char* stringdup(const char* s) {$/;"	f
strlike	testdocs/sqlite3.c	/^  int (*strlike)(const char*,const char*,unsigned int);$/;"	m	struct:sqlite3_api_routines	file:
strnicmp	testdocs/sqlite3.c	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
subjInMemory	testdocs/sqlite3.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:
subjRequiresPage	testdocs/sqlite3.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:
subjournalPage	testdocs/sqlite3.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:
subjournalPageIfRequired	testdocs/sqlite3.c	/^static int subjournalPageIfRequired(PgHdr *pPg){$/;"	f	file:
substExpr	testdocs/sqlite3.c	/^static Expr *substExpr($/;"	f	file:
substExprList	testdocs/sqlite3.c	/^static void substExprList($/;"	f	file:
substSelect	testdocs/sqlite3.c	/^static void substSelect($/;"	f	file:
substrFunc	testdocs/sqlite3.c	/^static void substrFunc($/;"	f	file:
sumFinalize	testdocs/sqlite3.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:
sumStep	testdocs/sqlite3.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
suppressErr	testdocs/sqlite3.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	file:
swapMixedEndianFloat	testdocs/sqlite3.c	/^# define swapMixedEndianFloat(/;"	d	file:
swaplog	buf.c	/^static void swaplog(Buf* buf, Log** from, Log** to, Sel* sel) {$/;"	f	file:
switchLockProxyPath	testdocs/sqlite3.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:
syncFlags	testdocs/sqlite3.c	/^  int syncFlags;               \/* Flags for the fsync *\/$/;"	m	struct:WalWriter	file:
syncFlags	testdocs/sqlite3.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:
syncFlags	testdocs/sqlite3.c	/^  u8 syncFlags;              \/* Flags to use to sync header writes *\/$/;"	m	struct:Wal	file:
syncHeader	testdocs/sqlite3.c	/^  u8 syncHeader;             \/* Fsync the WAL header if true *\/$/;"	m	struct:Wal	file:
syncJournal	testdocs/sqlite3.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:
syncgap	buf.c	/^static void syncgap(Buf* buf, size_t off) {$/;"	f	file:
synthCollSeq	testdocs/sqlite3.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:
sys	testdocs/waf	/^import os, sys, inspect$/;"	i
system_errno	testdocs/sqlite3.c	/^  int (*system_errno)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
sz	testdocs/sqlite3.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	file:
szAlloc	testdocs/sqlite3.c	/^  int szAlloc;                        \/* Total size of one pcache line *\/$/;"	m	struct:PCache1	file:
szAtom	testdocs/sqlite3.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:
szCache	testdocs/sqlite3.c	/^  int szCache;                        \/* Configured cache size *\/$/;"	m	struct:PCache	file:
szCell	testdocs/sqlite3.c	/^  u16 *szCell;            \/* Local size of all cells in apCell[] *\/$/;"	m	struct:CellArray	file:
szChunk	testdocs/sqlite3.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:
szChunk	testdocs/sqlite3.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:
szCol	testdocs/sqlite3.c	/^  int szCol;                      \/* Size of column value in tokens *\/$/;"	m	struct:Fts5InsertCtx	file:
szCol	testdocs/sqlite3.c	/^  int szCol;$/;"	m	struct:Fts5IntegrityCtx	file:
szEst	testdocs/sqlite3.c	/^  u8 szEst;        \/* Estimated size of value in this column. sizeof(INT)==1 *\/$/;"	m	struct:Column	file:
szExtra	testdocs/sqlite3.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:
szExtra	testdocs/sqlite3.c	/^  int szExtra;                        \/* sizeof(MemPage)+sizeof(PgHdr) *\/$/;"	m	struct:PCache1	file:
szFirstBlock	testdocs/sqlite3.c	/^  int szFirstBlock;          \/* Size of first block written to WAL file *\/$/;"	m	struct:Wal	file:
szIdxRow	testdocs/sqlite3.c	/^  LogEst szIdxRow;         \/* Estimated average row size in bytes *\/$/;"	m	struct:Index	file:
szLeaf	testdocs/sqlite3.c	/^  int szLeaf;                     \/* Size of leaf without page-index *\/$/;"	m	struct:Fts5Data	file:
szLookaside	testdocs/sqlite3.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	file:
szMalloc	testdocs/sqlite3.c	/^  int szMalloc;       \/* Size of the zMalloc allocation *\/$/;"	m	struct:sqlite3_value	file:
szMaster	testdocs/sqlite3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:
szMmap	testdocs/sqlite3.c	/^  i64 szMmap;                   \/* Default mmap_size setting *\/$/;"	m	struct:sqlite3	file:
szMmap	testdocs/sqlite3.c	/^  sqlite3_int64 szMmap;             \/* mmap() space per open file *\/$/;"	m	struct:Sqlite3Config	file:
szMmap	testdocs/sqlite3.c	/^  sqlite3_int64 szMmap;       \/* Desired maximum mmap size *\/$/;"	m	struct:Pager	file:
szOpAlloc	testdocs/sqlite3.c	/^  int szOpAlloc;       \/* Bytes of memory space allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse	file:
szOsFile	testdocs/sqlite3.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	file:
szPMA	testdocs/sqlite3.c	/^  int szPMA;                      \/* Size of pList as PMA in bytes *\/$/;"	m	struct:SorterList	file:
szPage	testdocs/sqlite3.c	/^  int szPage;                         \/* Size of database content section *\/$/;"	m	struct:PCache1	file:
szPage	testdocs/sqlite3.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:
szPage	testdocs/sqlite3.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
szPage	testdocs/sqlite3.c	/^  int szPage;                     \/* Value of 'pgSize' column *\/$/;"	m	struct:StatCursor	file:
szPage	testdocs/sqlite3.c	/^  int szPage;                  \/* Size of one page *\/$/;"	m	struct:WalWriter	file:
szPage	testdocs/sqlite3.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:
szPage	testdocs/sqlite3.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:
szPma	testdocs/sqlite3.c	/^  u32 szPma;                        \/* Maximum Sorter PMA size *\/$/;"	m	struct:Sqlite3Config	file:
szRegion	testdocs/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
szRegion	testdocs/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:
szRow	testdocs/sqlite3.c	/^  u32 szRow;              \/* Byte available in aRow *\/$/;"	m	struct:VdbeCursor	file:
szScratch	testdocs/sqlite3.c	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config	file:
szSlot	testdocs/sqlite3.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:
szSpill	testdocs/sqlite3.c	/^  int szSpill;                        \/* Size before spilling occurs *\/$/;"	m	struct:PCache	file:
szTabRow	testdocs/sqlite3.c	/^  LogEst szTabRow;     \/* Estimated size of each table row in bytes *\/$/;"	m	struct:Table	file:
tRowcnt	testdocs/sqlite3.c	/^ typedef u32 tRowcnt;    \/* 32-bit is the default *\/$/;"	t	file:
tRowcnt	testdocs/sqlite3.c	/^ typedef u64 tRowcnt;    \/* 64-bit only if requested at compile-time *\/$/;"	t	file:
tabFlags	testdocs/sqlite3.c	/^  u32 tabFlags;        \/* Mask of TF_* values *\/$/;"	m	struct:Table	file:
tabTnct	testdocs/sqlite3.c	/^  int tabTnct;    \/* Ephemeral table used for DISTINCT processing *\/$/;"	m	struct:DistinctCtx	file:
table	testdocs/sqlite3.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	file:
tableAndColumnIndex	testdocs/sqlite3.c	/^static int tableAndColumnIndex($/;"	f	file:
tableOfTrigger	testdocs/sqlite3.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:
tableWithCursor	testdocs/sqlite3.c	/^static Table *tableWithCursor(SrcList *pList, int iCursor){$/;"	f	file:
table_column_metadata	testdocs/sqlite3.c	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
tarfile	testdocs/waf	/^	import shutil, tarfile$/;"	i
targetSrcList	testdocs/sqlite3.c	/^static SrcList *targetSrcList($/;"	f	file:
tblHash	testdocs/sqlite3.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	file:
tblhdr	testdocs/sqlite3.c	/^  SessionBuffer tblhdr;           \/* Buffer to hold apValue\/zTab\/abPK\/ *\/$/;"	m	struct:sqlite3_changeset_iter	file:
tempFile	testdocs/sqlite3.c	/^  u8 tempFile;                \/* zFilename is a temporary or immutable file *\/$/;"	m	struct:Pager	file:
tempReg	testdocs/sqlite3.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	file:
temp_store	testdocs/sqlite3.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	file:
term	testdocs/sqlite3.c	/^  Blob term;                      \/* Current term *\/$/;"	m	struct:NodeReader	file:
term	testdocs/sqlite3.c	/^  Fts5Buffer term;                \/* Buffer containing previous term on page *\/$/;"	m	struct:Fts5PageWriter	file:
term	testdocs/sqlite3.c	/^  Fts5Buffer term;                \/* Current term *\/$/;"	m	struct:Fts5SegIter	file:
term	testdocs/sqlite3.c	/^  Fts5Buffer term;                \/* Current value of 'term' column *\/$/;"	m	struct:Fts5VocabCursor	file:
termCanDriveIndex	testdocs/sqlite3.c	/^static int termCanDriveIndex($/;"	f	file:
termIsEquivalence	testdocs/sqlite3.c	/^static int termIsEquivalence(Parse *pParse, Expr *pExpr){$/;"	f	file:
test	testdocs/waf	/^def test(dir):$/;"	f
testFunc	testdocs/sqlite3.c	/^static void testFunc($/;"	f	file:
test_addop_breakpoint	testdocs/sqlite3.c	/^static void test_addop_breakpoint(void){$/;"	f	file:
test_control	testdocs/sqlite3.c	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	file:
test_fts3_node_chunk_threshold	testdocs/sqlite3.c	/^int test_fts3_node_chunk_threshold = (4*1024)*4;$/;"	v
test_fts3_node_chunksize	testdocs/sqlite3.c	/^int test_fts3_node_chunksize = (4*1024);$/;"	v
testcase	testdocs/sqlite3.c	/^# define testcase(/;"	d	file:
testcase	testdocs/sqlite3.c	/^#define testcase(/;"	d	file:
thread_cleanup	testdocs/sqlite3.c	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	file:
threadid	testdocs/sqlite3.c	/^#define threadid /;"	d	file:
tid	testdocs/sqlite3.c	/^  pthread_t tid;                 \/* Thread ID *\/$/;"	m	struct:SQLiteThread	file:
tid	testdocs/sqlite3.c	/^  void *tid;               \/* The thread handle *\/$/;"	m	struct:SQLiteThread	file:
timeFunc	testdocs/sqlite3.c	/^static void timeFunc($/;"	f	file:
tkCREATE	testdocs/sqlite3.c	/^#define tkCREATE /;"	d	file:
tkEND	testdocs/sqlite3.c	/^#define tkEND /;"	d	file:
tkEXPLAIN	testdocs/sqlite3.c	/^#define tkEXPLAIN /;"	d	file:
tkOTHER	testdocs/sqlite3.c	/^#define tkOTHER /;"	d	file:
tkSEMI	testdocs/sqlite3.c	/^#define tkSEMI /;"	d	file:
tkTEMP	testdocs/sqlite3.c	/^#define tkTEMP /;"	d	file:
tkTRIGGER	testdocs/sqlite3.c	/^#define tkTRIGGER /;"	d	file:
tkWS	testdocs/sqlite3.c	/^#define tkWS /;"	d	file:
tmask	testdocs/sqlite3.c	/^ #undef tmask$/;"	d	file:
tnum	testdocs/sqlite3.c	/^  int tnum;                \/* DB Page containing root of this index *\/$/;"	m	struct:Index	file:
tnum	testdocs/sqlite3.c	/^  int tnum;            \/* Root BTree page for this table *\/$/;"	m	struct:Table	file:
token	testdocs/sqlite3.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	file:
token	testdocs/sqlite3.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	file:
tokenizer	testdocs/sqlite3.c	/^  fts5_tokenizer tokenizer;       \/* Parent tokenizer module *\/$/;"	m	struct:PorterTokenizer	file:
totalAlloc	testdocs/sqlite3.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:
totalExcess	testdocs/sqlite3.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
totalFinalize	testdocs/sqlite3.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:
total_changes	testdocs/sqlite3.c	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
total_changes	testdocs/sqlite3.c	/^static void total_changes($/;"	f	file:
tr_tm	testdocs/sqlite3.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	file:
trace	stdc.h	/^#define trace(/;"	d
trace	testdocs/sqlite3.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	testdocs/sqlite3.c	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:
trace	testdocs/sqlite3.c	/^  volatile int trace;        \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace_v2	testdocs/sqlite3.c	/^  int (*trace_v2)(sqlite3*,unsigned,int(*)(unsigned,void*,void*,void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
transCntrChng	testdocs/sqlite3.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:
transferJoinMarkings	testdocs/sqlite3.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:
transferParseError	testdocs/sqlite3.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:
transfer_bindings	testdocs/sqlite3.c	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
transid	edit.h	/^    uint transid;         \/* tracks the last used transaction id for log entries *\/$/;"	m	struct:__anon5
transid	edit.h	/^    uint transid;       \/* transaction id used to group related edits together *\/$/;"	m	struct:Log
translateColumnToCopy	testdocs/sqlite3.c	/^static void translateColumnToCopy($/;"	f	file:
translateP	testdocs/sqlite3.c	/^static int translateP(char c, const Op *pOp){$/;"	f	file:
trigHash	testdocs/sqlite3.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	file:
triggerStepAllocate	testdocs/sqlite3.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:
trimFunc	testdocs/sqlite3.c	/^static void trimFunc($/;"	f	file:
truncateOnCommit	testdocs/sqlite3.c	/^  u8 truncateOnCommit;       \/* True to truncate WAL file on commit *\/$/;"	m	struct:Wal	file:
truthProb	testdocs/sqlite3.c	/^  LogEst truthProb;       \/* Probability of truth for this expression *\/$/;"	m	struct:WhereTerm	file:
ts	testdocs/sqlite3.c	/^  struct Fts5TransactionState ts;$/;"	m	struct:Fts5Table	typeref:struct:Fts5Table::Fts5TransactionState	file:
type	testdocs/sqlite3.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:
typeMask	testdocs/sqlite3.c	/^  u8 typeMask;$/;"	m	struct:VdbeSorter	file:
typeofFunc	testdocs/sqlite3.c	/^static void typeofFunc($/;"	f	file:
tz	testdocs/sqlite3.c	/^  int tz;             \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:
tzSet	testdocs/sqlite3.c	/^  char tzSet;         \/* Timezone was set explicitly *\/$/;"	m	struct:DateTime	file:
u	testdocs/sqlite3.c	/^    } u;$/;"	m	struct:ExprList::ExprList_item	typeref:union:ExprList::ExprList_item::__anon12	file:
u	testdocs/sqlite3.c	/^  u32 u;             \/* Unsigned for byte-order conversions *\/$/;"	m	union:RtreeCoord	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon24	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon10	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:FuncDef	typeref:union:FuncDef::__anon9	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:JsonNode	typeref:union:JsonNode::__anon37	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon21	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:RtreeConstraint	typeref:union:RtreeConstraint::__anon36	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:SorterRecord	typeref:union:SorterRecord::__anon25	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:Stat4Sample	typeref:union:Stat4Sample::__anon26	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon17	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon27	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:WhereLoop	typeref:union:WhereLoop::__anon29	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon32	file:
u	testdocs/sqlite3.c	/^  } u;$/;"	m	struct:sqlite3_value	typeref:union:sqlite3_value::MemValue	file:
u1	testdocs/sqlite3.c	/^    } u1;$/;"	m	struct:SrcList::SrcList_item	typeref:union:SrcList::SrcList_item::__anon15	file:
u1	testdocs/sqlite3.c	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon8	file:
u16	testdocs/sqlite3.c	/^  typedef unsigned short int u16;$/;"	t	file:
u16	testdocs/sqlite3.c	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t	file:
u16	testdocs/sqlite3.c	/^typedef unsigned short u16;$/;"	t	file:
u32	testdocs/sqlite3.c	/^  typedef unsigned int u32;$/;"	t	file:
u32	testdocs/sqlite3.c	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	testdocs/sqlite3.c	/^typedef unsigned int   u32;$/;"	t	file:
u32	testdocs/sqlite3.c	/^typedef unsigned int u32;         \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	testdocs/sqlite3.c	/^typedef unsigned int u32;$/;"	t	file:
u64	testdocs/sqlite3.c	/^  typedef sqlite3_uint64 u64;$/;"	t	file:
u64	testdocs/sqlite3.c	/^typedef sqlite3_uint64 u64;       \/* 8-byte unsigned integer *\/$/;"	t	file:
u64	testdocs/sqlite3.c	/^typedef sqlite3_uint64 u64;$/;"	t	file:
u64	testdocs/sqlite3.c	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t	file:
u8	testdocs/sqlite3.c	/^  typedef unsigned char u8;$/;"	t	file:
u8	testdocs/sqlite3.c	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t	file:
u8	testdocs/sqlite3.c	/^typedef unsigned char  u8;$/;"	t	file:
u8	testdocs/sqlite3.c	/^typedef unsigned char u8;         \/* 1-byte (or larger) unsigned integer *\/$/;"	t	file:
u8	testdocs/sqlite3.c	/^typedef unsigned char u8;$/;"	t	file:
uTemp	testdocs/sqlite3.c	/^  u32 uTemp;          \/* Transient storage for serial_type in OP_MakeRecord *\/$/;"	m	struct:sqlite3_value	file:
uc	testdocs/sqlite3.c	/^  } uc;$/;"	m	struct:VdbeCursor	typeref:union:VdbeCursor::__anon18	file:
uchar	stdc.h	/^typedef unsigned char uchar;$/;"	t
uint	stdc.h	/^typedef unsigned int uint;$/;"	t
uint16	stdc.h	/^typedef uint16_t uint16;$/;"	t
uint32	stdc.h	/^typedef uint32_t uint32;$/;"	t
uint64	stdc.h	/^typedef uint64_t uint64;$/;"	t
uint8	stdc.h	/^typedef uint8_t  uint8;$/;"	t
uintptr	stdc.h	/^typedef uintptr_t uintptr;$/;"	t
ulong	stdc.h	/^typedef unsigned long ulong;$/;"	t
unLockFlag	testdocs/sqlite3.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
undo	edit.h	/^    Log* undo;            \/* undo list *\/$/;"	m	struct:__anon5
unicodeAddExceptions	testdocs/sqlite3.c	/^static int unicodeAddExceptions($/;"	f	file:
unicodeClose	testdocs/sqlite3.c	/^static int unicodeClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
unicodeCreate	testdocs/sqlite3.c	/^static int unicodeCreate($/;"	f	file:
unicodeDestroy	testdocs/sqlite3.c	/^static int unicodeDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
unicodeFunc	testdocs/sqlite3.c	/^static void unicodeFunc($/;"	f	file:
unicodeIsAlnum	testdocs/sqlite3.c	/^static int unicodeIsAlnum(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeIsException	testdocs/sqlite3.c	/^static int unicodeIsException(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeNext	testdocs/sqlite3.c	/^static int unicodeNext($/;"	f	file:
unicodeOpen	testdocs/sqlite3.c	/^static int unicodeOpen($/;"	f	file:
unicode_cursor	testdocs/sqlite3.c	/^struct unicode_cursor {$/;"	s	file:
unicode_cursor	testdocs/sqlite3.c	/^typedef struct unicode_cursor unicode_cursor;$/;"	t	typeref:struct:unicode_cursor	file:
unicode_tokenizer	testdocs/sqlite3.c	/^struct unicode_tokenizer {$/;"	s	file:
unicode_tokenizer	testdocs/sqlite3.c	/^typedef struct unicode_tokenizer unicode_tokenizer;$/;"	t	typeref:struct:unicode_tokenizer	file:
uniqNotNull	testdocs/sqlite3.c	/^  unsigned uniqNotNull:1;  \/* True if UNIQUE and NOT NULL for all columns *\/$/;"	m	struct:Index	file:
unique_id	stdc.h	/^#define unique_id /;"	d
unixAccess	testdocs/sqlite3.c	/^static int unixAccess($/;"	f	file:
unixCheckReservedLock	testdocs/sqlite3.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
unixClose	testdocs/sqlite3.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:
unixCurrentTime	testdocs/sqlite3.c	/^# define unixCurrentTime /;"	d	file:
unixCurrentTime	testdocs/sqlite3.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:
unixCurrentTimeInt64	testdocs/sqlite3.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:
unixDelete	testdocs/sqlite3.c	/^static int unixDelete($/;"	f	file:
unixDeviceCharacteristics	testdocs/sqlite3.c	/^static int unixDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
unixDlClose	testdocs/sqlite3.c	/^  #define unixDlClose /;"	d	file:
unixDlClose	testdocs/sqlite3.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:
unixDlError	testdocs/sqlite3.c	/^  #define unixDlError /;"	d	file:
unixDlError	testdocs/sqlite3.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:
unixDlOpen	testdocs/sqlite3.c	/^  #define unixDlOpen /;"	d	file:
unixDlOpen	testdocs/sqlite3.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:
unixDlSym	testdocs/sqlite3.c	/^  #define unixDlSym /;"	d	file:
unixDlSym	testdocs/sqlite3.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:
unixEnterMutex	testdocs/sqlite3.c	/^static void unixEnterMutex(void){$/;"	f	file:
unixFetch	testdocs/sqlite3.c	/^static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
unixFile	testdocs/sqlite3.c	/^struct unixFile {$/;"	s	file:
unixFile	testdocs/sqlite3.c	/^typedef struct unixFile unixFile;$/;"	t	typeref:struct:unixFile	file:
unixFileControl	testdocs/sqlite3.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
unixFileId	testdocs/sqlite3.c	/^struct unixFileId {$/;"	s	file:
unixFileLock	testdocs/sqlite3.c	/^static int unixFileLock(unixFile *pFile, struct flock *pLock){$/;"	f	file:
unixFileSize	testdocs/sqlite3.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:
unixFullPathname	testdocs/sqlite3.c	/^static int unixFullPathname($/;"	f	file:
unixGetLastError	testdocs/sqlite3.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:
unixGetSystemCall	testdocs/sqlite3.c	/^static sqlite3_syscall_ptr unixGetSystemCall($/;"	f	file:
unixGetTempname	testdocs/sqlite3.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:
unixGetpagesize	testdocs/sqlite3.c	/^static int unixGetpagesize(void){$/;"	f	file:
unixInodeInfo	testdocs/sqlite3.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	testdocs/sqlite3.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	typeref:struct:unixInodeInfo	file:
unixLeaveMutex	testdocs/sqlite3.c	/^static void unixLeaveMutex(void){$/;"	f	file:
unixLock	testdocs/sqlite3.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixLogError	testdocs/sqlite3.c	/^#define unixLogError(/;"	d	file:
unixLogErrorAtLine	testdocs/sqlite3.c	/^static int unixLogErrorAtLine($/;"	f	file:
unixMapfile	testdocs/sqlite3.c	/^static int unixMapfile(unixFile *pFd, i64 nMap){$/;"	f	file:
unixModeBit	testdocs/sqlite3.c	/^static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
unixMutexHeld	testdocs/sqlite3.c	/^static int unixMutexHeld(void) {$/;"	f	file:
unixNextSystemCall	testdocs/sqlite3.c	/^static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
unixOpen	testdocs/sqlite3.c	/^static int unixOpen($/;"	f	file:
unixOpenSharedMemory	testdocs/sqlite3.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:
unixRandomness	testdocs/sqlite3.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:
unixRead	testdocs/sqlite3.c	/^static int unixRead($/;"	f	file:
unixRemapfile	testdocs/sqlite3.c	/^static void unixRemapfile($/;"	f	file:
unixSectorSize	testdocs/sqlite3.c	/^static int unixSectorSize(sqlite3_file *NotUsed){$/;"	f	file:
unixSectorSize	testdocs/sqlite3.c	/^static int unixSectorSize(sqlite3_file *id){$/;"	f	file:
unixSetSystemCall	testdocs/sqlite3.c	/^static int unixSetSystemCall($/;"	f	file:
unixShm	testdocs/sqlite3.c	/^struct unixShm {$/;"	s	file:
unixShm	testdocs/sqlite3.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	typeref:struct:unixShm	file:
unixShmBarrier	testdocs/sqlite3.c	/^# define unixShmBarrier /;"	d	file:
unixShmBarrier	testdocs/sqlite3.c	/^static void unixShmBarrier($/;"	f	file:
unixShmLock	testdocs/sqlite3.c	/^# define unixShmLock /;"	d	file:
unixShmLock	testdocs/sqlite3.c	/^static int unixShmLock($/;"	f	file:
unixShmMap	testdocs/sqlite3.c	/^# define unixShmMap /;"	d	file:
unixShmMap	testdocs/sqlite3.c	/^static int unixShmMap($/;"	f	file:
unixShmNode	testdocs/sqlite3.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	testdocs/sqlite3.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	typeref:struct:unixShmNode	file:
unixShmPurge	testdocs/sqlite3.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:
unixShmRegionPerMap	testdocs/sqlite3.c	/^static int unixShmRegionPerMap(void){$/;"	f	file:
unixShmSystemLock	testdocs/sqlite3.c	/^static int unixShmSystemLock($/;"	f	file:
unixShmUnmap	testdocs/sqlite3.c	/^# define unixShmUnmap /;"	d	file:
unixShmUnmap	testdocs/sqlite3.c	/^static int unixShmUnmap($/;"	f	file:
unixSleep	testdocs/sqlite3.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:
unixSync	testdocs/sqlite3.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:
unixTempFileDir	testdocs/sqlite3.c	/^static const char *unixTempFileDir(void){$/;"	f	file:
unixTruncate	testdocs/sqlite3.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:
unixUnfetch	testdocs/sqlite3.c	/^static int unixUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
unixUnlock	testdocs/sqlite3.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixUnmapfile	testdocs/sqlite3.c	/^static void unixUnmapfile(unixFile *pFd){$/;"	f	file:
unixWrite	testdocs/sqlite3.c	/^static int unixWrite($/;"	f	file:
unix_syscall	testdocs/sqlite3.c	/^static struct unix_syscall {$/;"	s	file:
unknownFunc	testdocs/sqlite3.c	/^static void unknownFunc($/;"	f	file:
unlikely	testdocs/sqlite3.c	/^#define unlikely(/;"	d	file:
unlockBtreeIfUnused	testdocs/sqlite3.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:
unlockBtreeMutex	testdocs/sqlite3.c	/^static void SQLITE_NOINLINE unlockBtreeMutex(Btree *p){$/;"	f	file:
unlock_notify	testdocs/sqlite3.c	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
unpack_wafdir	testdocs/waf	/^def unpack_wafdir(dir, src):$/;"	f
untestedTerms	testdocs/sqlite3.c	/^  u8 untestedTerms;         \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo	file:
unused	testdocs/sqlite3.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:
updateAccumulator	testdocs/sqlite3.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
updateMapping	testdocs/sqlite3.c	/^static int updateMapping($/;"	f	file:
updateMaxBlobsize	testdocs/sqlite3.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:
updateRangeAffinityStr	testdocs/sqlite3.c	/^static void updateRangeAffinityStr($/;"	f	file:
updateVirtualTable	testdocs/sqlite3.c	/^static void updateVirtualTable($/;"	f	file:
update_hook	testdocs/sqlite3.c	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,$/;"	m	struct:sqlite3_api_routines	file:
upperFunc	testdocs/sqlite3.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
uptr	testdocs/sqlite3.c	/^  typedef u32 uptr;$/;"	t	file:
uptr	testdocs/sqlite3.c	/^  typedef u64 uptr;$/;"	t	file:
uptr	testdocs/sqlite3.c	/^  typedef uintptr_t uptr;$/;"	t	file:
uri_boolean	testdocs/sqlite3.c	/^  int (*uri_boolean)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
uri_int64	testdocs/sqlite3.c	/^  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
uri_parameter	testdocs/sqlite3.c	/^  const char *(*uri_parameter)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
usable	testdocs/sqlite3.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
usableSize	testdocs/sqlite3.c	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared	file:
useJournal	testdocs/sqlite3.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:
useRandomRowid	testdocs/sqlite3.c	/^  Bool useRandomRowid:1;  \/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	file:
useSortingIdx	testdocs/sqlite3.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	file:
usedAsColumnCache	testdocs/sqlite3.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:
user_data	testdocs/sqlite3.c	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
usesStmtJournal	testdocs/sqlite3.c	/^  bft usesStmtJournal:1;  \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	file:
ushort	stdc.h	/^typedef unsigned short ushort;$/;"	t
utf8decode	buf.c	/^bool utf8decode(Rune* rune, size_t* length, int byte) {$/;"	f
utf8encode	buf.c	/^size_t utf8encode(char str[UTF_MAX], Rune rune) {$/;"	f
utfseq	buf.c	/^static uint8_t utfseq(uint8_t byte) {$/;"	f	file:
uvlong	stdc.h	/^typedef unsigned long long uvlong;$/;"	t
v	testdocs/sqlite3.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:
v	testdocs/sqlite3.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	file:
v	testdocs/sqlite3.c	/^  Vdbe *v;$/;"	m	struct:PreUpdate	file:
v	testdocs/sqlite3.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:
v1	testdocs/sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:
v2	testdocs/sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:
validHMS	testdocs/sqlite3.c	/^  char validHMS;      \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:
validJD	testdocs/sqlite3.c	/^  char validJD;       \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:
validJulianDay	testdocs/sqlite3.c	/^static int validJulianDay(sqlite3_int64 iJD){$/;"	f	file:
validTZ	testdocs/sqlite3.c	/^  char validTZ;       \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:
validYMD	testdocs/sqlite3.c	/^  char validYMD;      \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:
value	testdocs/sqlite3.c	/^  struct {int value; int mask;} yy497;$/;"	m	struct:__anon33::__anon34	file:
valueBytes	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int valueBytes(sqlite3_value *pVal, u8 enc){$/;"	f	file:
valueFromExpr	testdocs/sqlite3.c	/^static int valueFromExpr($/;"	f	file:
valueFromFunction	testdocs/sqlite3.c	/^# define valueFromFunction(/;"	d	file:
valueFromFunction	testdocs/sqlite3.c	/^static int valueFromFunction($/;"	f	file:
valueNew	testdocs/sqlite3.c	/^static sqlite3_value *valueNew(sqlite3 *db, struct ValueNewStat4Ctx *p){$/;"	f	file:
valueToText	testdocs/sqlite3.c	/^static SQLITE_NOINLINE const void *valueToText(sqlite3_value* pVal, u8 enc){$/;"	f	file:
value_blob	testdocs/sqlite3.c	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes	testdocs/sqlite3.c	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes16	testdocs/sqlite3.c	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_double	testdocs/sqlite3.c	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_dup	testdocs/sqlite3.c	/^  sqlite3_value *(*value_dup)(const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_free	testdocs/sqlite3.c	/^  void (*value_free)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int	testdocs/sqlite3.c	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int64	testdocs/sqlite3.c	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_numeric_type	testdocs/sqlite3.c	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_subtype	testdocs/sqlite3.c	/^  unsigned int (*value_subtype)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text	testdocs/sqlite3.c	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16	testdocs/sqlite3.c	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16be	testdocs/sqlite3.c	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16le	testdocs/sqlite3.c	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_type	testdocs/sqlite3.c	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
vdbeAssertFieldCountWithinLimits	testdocs/sqlite3.c	/^# define vdbeAssertFieldCountWithinLimits(/;"	d	file:
vdbeAssertFieldCountWithinLimits	testdocs/sqlite3.c	/^static void vdbeAssertFieldCountWithinLimits($/;"	f	file:
vdbeChangeP4Full	testdocs/sqlite3.c	/^static void SQLITE_NOINLINE vdbeChangeP4Full($/;"	f	file:
vdbeCloseStatement	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int vdbeCloseStatement(Vdbe *p, int eOp){$/;"	f	file:
vdbeClrCopy	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void vdbeClrCopy(Mem *pTo, const Mem *pFrom, int eType){$/;"	f	file:
vdbeCommit	testdocs/sqlite3.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:
vdbeCompareMemString	testdocs/sqlite3.c	/^static int vdbeCompareMemString($/;"	f	file:
vdbeFreeOpArray	testdocs/sqlite3.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:
vdbeFreeUnpacked	testdocs/sqlite3.c	/^static void vdbeFreeUnpacked(sqlite3 *db, int nField, UnpackedRecord *p){$/;"	f	file:
vdbeIncrBgPopulate	testdocs/sqlite3.c	/^static int vdbeIncrBgPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrFree	testdocs/sqlite3.c	/^static void vdbeIncrFree(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrMergerNew	testdocs/sqlite3.c	/^static int vdbeIncrMergerNew($/;"	f	file:
vdbeIncrMergerSetThreads	testdocs/sqlite3.c	/^static void vdbeIncrMergerSetThreads(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulate	testdocs/sqlite3.c	/^static int vdbeIncrPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulateThread	testdocs/sqlite3.c	/^static void *vdbeIncrPopulateThread(void *pCtx){$/;"	f	file:
vdbeIncrSwap	testdocs/sqlite3.c	/^static int vdbeIncrSwap(IncrMerger *pIncr){$/;"	f	file:
vdbeInvokeSqllog	testdocs/sqlite3.c	/^# define vdbeInvokeSqllog(/;"	d	file:
vdbeInvokeSqllog	testdocs/sqlite3.c	/^static void vdbeInvokeSqllog(Vdbe *v){$/;"	f	file:
vdbeLeave	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void vdbeLeave(Vdbe *p){$/;"	f	file:
vdbeMemAddTerminator	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int vdbeMemAddTerminator(Mem *pMem){$/;"	f	file:
vdbeMemClear	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void vdbeMemClear(Mem *p){$/;"	f	file:
vdbeMemClearExternAndSetNull	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void vdbeMemClearExternAndSetNull(Mem *p){$/;"	f	file:
vdbeMemFromBtreeResize	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int vdbeMemFromBtreeResize($/;"	f	file:
vdbeMergeEngineCompare	testdocs/sqlite3.c	/^static void vdbeMergeEngineCompare($/;"	f	file:
vdbeMergeEngineFree	testdocs/sqlite3.c	/^static void vdbeMergeEngineFree(MergeEngine *pMerger){$/;"	f	file:
vdbeMergeEngineInit	testdocs/sqlite3.c	/^static int vdbeMergeEngineInit($/;"	f	file:
vdbeMergeEngineLevel0	testdocs/sqlite3.c	/^static int vdbeMergeEngineLevel0($/;"	f	file:
vdbeMergeEngineNew	testdocs/sqlite3.c	/^static MergeEngine *vdbeMergeEngineNew(int nReader){$/;"	f	file:
vdbeMergeEngineStep	testdocs/sqlite3.c	/^static int vdbeMergeEngineStep($/;"	f	file:
vdbePmaReadBlob	testdocs/sqlite3.c	/^static int vdbePmaReadBlob($/;"	f	file:
vdbePmaReadVarint	testdocs/sqlite3.c	/^static int vdbePmaReadVarint(PmaReader *p, u64 *pnOut){$/;"	f	file:
vdbePmaReaderBgIncrInit	testdocs/sqlite3.c	/^static void *vdbePmaReaderBgIncrInit(void *pCtx){$/;"	f	file:
vdbePmaReaderClear	testdocs/sqlite3.c	/^static void vdbePmaReaderClear(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderIncrInit	testdocs/sqlite3.c	/^static int vdbePmaReaderIncrInit(PmaReader *pReadr, int eMode){$/;"	f	file:
vdbePmaReaderIncrMergeInit	testdocs/sqlite3.c	/^static int vdbePmaReaderIncrMergeInit(PmaReader *pReadr, int eMode){$/;"	f	file:
vdbePmaReaderInit	testdocs/sqlite3.c	/^static int vdbePmaReaderInit($/;"	f	file:
vdbePmaReaderNext	testdocs/sqlite3.c	/^static int vdbePmaReaderNext(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderSeek	testdocs/sqlite3.c	/^static int vdbePmaReaderSeek($/;"	f	file:
vdbePmaWriteBlob	testdocs/sqlite3.c	/^static void vdbePmaWriteBlob(PmaWriter *p, u8 *pData, int nData){$/;"	f	file:
vdbePmaWriteVarint	testdocs/sqlite3.c	/^static void vdbePmaWriteVarint(PmaWriter *p, u64 iVal){$/;"	f	file:
vdbePmaWriterFinish	testdocs/sqlite3.c	/^static int vdbePmaWriterFinish(PmaWriter *p, i64 *piEof){$/;"	f	file:
vdbePmaWriterInit	testdocs/sqlite3.c	/^static void vdbePmaWriterInit($/;"	f	file:
vdbeRecordCompareDebug	testdocs/sqlite3.c	/^static int vdbeRecordCompareDebug($/;"	f	file:
vdbeRecordCompareInt	testdocs/sqlite3.c	/^static int vdbeRecordCompareInt($/;"	f	file:
vdbeRecordCompareString	testdocs/sqlite3.c	/^static int vdbeRecordCompareString($/;"	f	file:
vdbeRecordDecodeInt	testdocs/sqlite3.c	/^static i64 vdbeRecordDecodeInt(u32 serial_type, const u8 *aKey){$/;"	f	file:
vdbeReleaseAndSetInt64	testdocs/sqlite3.c	/^static SQLITE_NOINLINE void vdbeReleaseAndSetInt64(Mem *pMem, i64 val){$/;"	f	file:
vdbeSafety	testdocs/sqlite3.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:
vdbeSafetyNotNull	testdocs/sqlite3.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:
vdbeSortAllocUnpacked	testdocs/sqlite3.c	/^static int vdbeSortAllocUnpacked(SortSubtask *pTask){$/;"	f	file:
vdbeSortSubtaskCleanup	testdocs/sqlite3.c	/^static void vdbeSortSubtaskCleanup(sqlite3 *db, SortSubtask *pTask){$/;"	f	file:
vdbeSorterAddToTree	testdocs/sqlite3.c	/^static int vdbeSorterAddToTree($/;"	f	file:
vdbeSorterBlockDebug	testdocs/sqlite3.c	/^# define vdbeSorterBlockDebug(/;"	d	file:
vdbeSorterBlockDebug	testdocs/sqlite3.c	/^static void vdbeSorterBlockDebug($/;"	f	file:
vdbeSorterCompare	testdocs/sqlite3.c	/^static int vdbeSorterCompare($/;"	f	file:
vdbeSorterCompareInt	testdocs/sqlite3.c	/^static int vdbeSorterCompareInt($/;"	f	file:
vdbeSorterCompareTail	testdocs/sqlite3.c	/^static int vdbeSorterCompareTail($/;"	f	file:
vdbeSorterCompareText	testdocs/sqlite3.c	/^static int vdbeSorterCompareText($/;"	f	file:
vdbeSorterCreateThread	testdocs/sqlite3.c	/^static int vdbeSorterCreateThread($/;"	f	file:
vdbeSorterExtendFile	testdocs/sqlite3.c	/^# define vdbeSorterExtendFile(/;"	d	file:
vdbeSorterExtendFile	testdocs/sqlite3.c	/^static void vdbeSorterExtendFile(sqlite3 *db, sqlite3_file *pFd, i64 nByte){$/;"	f	file:
vdbeSorterFlushPMA	testdocs/sqlite3.c	/^static int vdbeSorterFlushPMA(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterFlushThread	testdocs/sqlite3.c	/^static void *vdbeSorterFlushThread(void *pCtx){$/;"	f	file:
vdbeSorterGetCompare	testdocs/sqlite3.c	/^static SorterCompare vdbeSorterGetCompare(VdbeSorter *p){$/;"	f	file:
vdbeSorterJoinAll	testdocs/sqlite3.c	/^# define vdbeSorterJoinAll(/;"	d	file:
vdbeSorterJoinAll	testdocs/sqlite3.c	/^static int vdbeSorterJoinAll(VdbeSorter *pSorter, int rcin){$/;"	f	file:
vdbeSorterJoinThread	testdocs/sqlite3.c	/^# define vdbeSorterJoinThread(/;"	d	file:
vdbeSorterJoinThread	testdocs/sqlite3.c	/^static int vdbeSorterJoinThread(SortSubtask *pTask){$/;"	f	file:
vdbeSorterListToPMA	testdocs/sqlite3.c	/^static int vdbeSorterListToPMA(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterMapFile	testdocs/sqlite3.c	/^static int vdbeSorterMapFile(SortSubtask *pTask, SorterFile *pFile, u8 **pp){$/;"	f	file:
vdbeSorterMerge	testdocs/sqlite3.c	/^static SorterRecord *vdbeSorterMerge($/;"	f	file:
vdbeSorterMergeTreeBuild	testdocs/sqlite3.c	/^static int vdbeSorterMergeTreeBuild($/;"	f	file:
vdbeSorterOpenTempFile	testdocs/sqlite3.c	/^static int vdbeSorterOpenTempFile($/;"	f	file:
vdbeSorterPopulateDebug	testdocs/sqlite3.c	/^# define vdbeSorterPopulateDebug(/;"	d	file:
vdbeSorterPopulateDebug	testdocs/sqlite3.c	/^static void vdbeSorterPopulateDebug($/;"	f	file:
vdbeSorterRecordFree	testdocs/sqlite3.c	/^static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){$/;"	f	file:
vdbeSorterRewindDebug	testdocs/sqlite3.c	/^# define vdbeSorterRewindDebug(/;"	d	file:
vdbeSorterRewindDebug	testdocs/sqlite3.c	/^static void vdbeSorterRewindDebug(const char *zEvent){$/;"	f	file:
vdbeSorterRowkey	testdocs/sqlite3.c	/^static void *vdbeSorterRowkey($/;"	f	file:
vdbeSorterSetupMerge	testdocs/sqlite3.c	/^static int vdbeSorterSetupMerge(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterSort	testdocs/sqlite3.c	/^static int vdbeSorterSort(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterTreeDepth	testdocs/sqlite3.c	/^static int vdbeSorterTreeDepth(int nPMA){$/;"	f	file:
vdbeSorterWorkDebug	testdocs/sqlite3.c	/^# define vdbeSorterWorkDebug(/;"	d	file:
vdbeSorterWorkDebug	testdocs/sqlite3.c	/^static void vdbeSorterWorkDebug(SortSubtask *pTask, const char *zEvent){$/;"	f	file:
vdbeTakeBranch	testdocs/sqlite3.c	/^  static void vdbeTakeBranch(int iSrcLine, u8 I, u8 M){$/;"	f	file:
vdbeUnbind	testdocs/sqlite3.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:
vdbeUnpackRecord	testdocs/sqlite3.c	/^static UnpackedRecord *vdbeUnpackRecord($/;"	f	file:
vdbeVComment	testdocs/sqlite3.c	/^static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){$/;"	f	file:
verifyDbFile	testdocs/sqlite3.c	/^static void verifyDbFile(unixFile *pFile){$/;"	f	file:
versionFunc	testdocs/sqlite3.c	/^static void versionFunc($/;"	f	file:
vfsFlags	testdocs/sqlite3.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:
vfsList	testdocs/sqlite3.c	/^#define vfsList /;"	d	file:
vfsList	testdocs/sqlite3.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsUnlink	testdocs/sqlite3.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:
vfs_find	testdocs/sqlite3.c	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
vfs_register	testdocs/sqlite3.c	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	file:
vfs_unregister	testdocs/sqlite3.c	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	file:
viaCoroutine	testdocs/sqlite3.c	/^      unsigned viaCoroutine :1;  \/* Implemented as a co-routine *\/$/;"	m	struct:SrcList::SrcList_item::__anon14	file:
vlong	stdc.h	/^typedef long long vlong;$/;"	t
vmprintf	testdocs/sqlite3.c	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vsnprintf	testdocs/sqlite3.c	/^  char *(*vsnprintf)(int,char*,const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vtab	testdocs/sqlite3.c	/^    } vtab;$/;"	m	union:WhereLoop::__anon29	typeref:struct:WhereLoop::__anon29::__anon31	file:
vtabBestIndex	testdocs/sqlite3.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:
vtabCallConstructor	testdocs/sqlite3.c	/^static int vtabCallConstructor($/;"	f	file:
vtabDisconnectAll	testdocs/sqlite3.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:
vtabOnConflict	testdocs/sqlite3.c	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3	file:
vtab_config	testdocs/sqlite3.c	/^  int (*vtab_config)(sqlite3*,int op,...);$/;"	m	struct:sqlite3_api_routines	file:
vtab_on_conflict	testdocs/sqlite3.c	/^  int (*vtab_on_conflict)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
vxworksFileId	testdocs/sqlite3.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileList	testdocs/sqlite3.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	typeref:struct:vxworksFileId	file:
vxworksFindFileId	testdocs/sqlite3.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:
vxworksIoFinder	testdocs/sqlite3.c	/^  *(*const vxworksIoFinder)(const char*,unixFile*) = vxworksIoFinderImpl;$/;"	v	file:
vxworksIoFinderImpl	testdocs/sqlite3.c	/^static const sqlite3_io_methods *vxworksIoFinderImpl($/;"	f	file:
vxworksReleaseFileId	testdocs/sqlite3.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:
vxworksSimplifyName	testdocs/sqlite3.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:
wafdir	testdocs/waf	/^wafdir = find_lib()$/;"	v
walBusyLock	testdocs/sqlite3.c	/^static int walBusyLock($/;"	f	file:
walCheckpoint	testdocs/sqlite3.c	/^static int walCheckpoint($/;"	f	file:
walChecksumBytes	testdocs/sqlite3.c	/^static void walChecksumBytes($/;"	f	file:
walCkptInfo	testdocs/sqlite3.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:
walCleanupHash	testdocs/sqlite3.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:
walDecodeFrame	testdocs/sqlite3.c	/^static int walDecodeFrame($/;"	f	file:
walEncodeFrame	testdocs/sqlite3.c	/^static void walEncodeFrame($/;"	f	file:
walFrameOffset	testdocs/sqlite3.c	/^#define walFrameOffset(/;"	d	file:
walFramePage	testdocs/sqlite3.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:
walFramePgno	testdocs/sqlite3.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:
walHash	testdocs/sqlite3.c	/^static int walHash(u32 iPage){$/;"	f	file:
walHashGet	testdocs/sqlite3.c	/^static int walHashGet($/;"	f	file:
walIndexAppend	testdocs/sqlite3.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:
walIndexClose	testdocs/sqlite3.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:
walIndexHdr	testdocs/sqlite3.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:
walIndexPage	testdocs/sqlite3.c	/^static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){$/;"	f	file:
walIndexReadHdr	testdocs/sqlite3.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexRecover	testdocs/sqlite3.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:
walIndexTryHdr	testdocs/sqlite3.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexWriteHdr	testdocs/sqlite3.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:
walIteratorFree	testdocs/sqlite3.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:
walIteratorInit	testdocs/sqlite3.c	/^static int walIteratorInit(Wal *pWal, WalIterator **pp){$/;"	f	file:
walIteratorNext	testdocs/sqlite3.c	/^static int walIteratorNext($/;"	f	file:
walLimitSize	testdocs/sqlite3.c	/^static void walLimitSize(Wal *pWal, i64 nMax){$/;"	f	file:
walLockExclusive	testdocs/sqlite3.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walLockName	testdocs/sqlite3.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:
walLockShared	testdocs/sqlite3.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walMerge	testdocs/sqlite3.c	/^static void walMerge($/;"	f	file:
walMergesort	testdocs/sqlite3.c	/^static void walMergesort($/;"	f	file:
walNextHash	testdocs/sqlite3.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:
walPagesize	testdocs/sqlite3.c	/^static int walPagesize(Wal *pWal){$/;"	f	file:
walRestartHdr	testdocs/sqlite3.c	/^static void walRestartHdr(Wal *pWal, u32 salt1){$/;"	f	file:
walRestartLog	testdocs/sqlite3.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:
walRewriteChecksums	testdocs/sqlite3.c	/^static int walRewriteChecksums(Wal *pWal, u32 iLast){$/;"	f	file:
walShmBarrier	testdocs/sqlite3.c	/^static void walShmBarrier(Wal *pWal){$/;"	f	file:
walSyncFlags	testdocs/sqlite3.c	/^  u8 walSyncFlags;            \/* SYNC_NORMAL or SYNC_FULL for wal writes *\/$/;"	m	struct:Pager	file:
walTryBeginRead	testdocs/sqlite3.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:
walUnlockExclusive	testdocs/sqlite3.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walUnlockShared	testdocs/sqlite3.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walWriteOneFrame	testdocs/sqlite3.c	/^static int walWriteOneFrame($/;"	f	file:
walWriteToLog	testdocs/sqlite3.c	/^static int walWriteToLog($/;"	f	file:
wal_autocheckpoint	testdocs/sqlite3.c	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint	testdocs/sqlite3.c	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint_v2	testdocs/sqlite3.c	/^  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);$/;"	m	struct:sqlite3_api_routines	file:
wal_hook	testdocs/sqlite3.c	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
walkExpr	testdocs/sqlite3.c	/^static SQLITE_NOINLINE int walkExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
walkerDepth	testdocs/sqlite3.c	/^  int walkerDepth;                          \/* Number of subqueries *\/$/;"	m	struct:Walker	file:
wantToLock	testdocs/sqlite3.c	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree	file:
wc	testdocs/sqlite3.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:
wc	testdocs/sqlite3.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:
wctrlFlags	testdocs/sqlite3.c	/^  u16 wctrlFlags;           \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo	file:
whereAndInfoDelete	testdocs/sqlite3.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:
whereClauseInsert	testdocs/sqlite3.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u16 wtFlags){$/;"	f	file:
whereCombineDisjuncts	testdocs/sqlite3.c	/^static void whereCombineDisjuncts($/;"	f	file:
whereEqualScanEst	testdocs/sqlite3.c	/^static int whereEqualScanEst($/;"	f	file:
whereForeignKeys	testdocs/sqlite3.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:
whereInScanEst	testdocs/sqlite3.c	/^static int whereInScanEst($/;"	f	file:
whereIndexExprTrans	testdocs/sqlite3.c	/^static void whereIndexExprTrans($/;"	f	file:
whereIndexExprTransNode	testdocs/sqlite3.c	/^static int whereIndexExprTransNode(Walker *p, Expr *pExpr){$/;"	f	file:
whereInfoFree	testdocs/sqlite3.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:
whereKeyStats	testdocs/sqlite3.c	/^static int whereKeyStats($/;"	f	file:
whereLikeOptimizationStringFixup	testdocs/sqlite3.c	/^# define whereLikeOptimizationStringFixup(/;"	d	file:
whereLikeOptimizationStringFixup	testdocs/sqlite3.c	/^static void whereLikeOptimizationStringFixup($/;"	f	file:
whereLoopAddAll	testdocs/sqlite3.c	/^static int whereLoopAddAll(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereLoopAddBtree	testdocs/sqlite3.c	/^static int whereLoopAddBtree($/;"	f	file:
whereLoopAddBtreeIndex	testdocs/sqlite3.c	/^static int whereLoopAddBtreeIndex($/;"	f	file:
whereLoopAddOr	testdocs/sqlite3.c	/^static int whereLoopAddOr($/;"	f	file:
whereLoopAddVirtual	testdocs/sqlite3.c	/^static int whereLoopAddVirtual($/;"	f	file:
whereLoopAddVirtualOne	testdocs/sqlite3.c	/^static int whereLoopAddVirtualOne($/;"	f	file:
whereLoopAdjustCost	testdocs/sqlite3.c	/^static void whereLoopAdjustCost(const WhereLoop *p, WhereLoop *pTemplate){$/;"	f	file:
whereLoopCheaperProperSubset	testdocs/sqlite3.c	/^static int whereLoopCheaperProperSubset($/;"	f	file:
whereLoopClear	testdocs/sqlite3.c	/^static void whereLoopClear(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopClearUnion	testdocs/sqlite3.c	/^static void whereLoopClearUnion(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopDelete	testdocs/sqlite3.c	/^static void whereLoopDelete(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopFindLesser	testdocs/sqlite3.c	/^static WhereLoop **whereLoopFindLesser($/;"	f	file:
whereLoopInit	testdocs/sqlite3.c	/^static void whereLoopInit(WhereLoop *p){$/;"	f	file:
whereLoopInsert	testdocs/sqlite3.c	/^static int whereLoopInsert(WhereLoopBuilder *pBuilder, WhereLoop *pTemplate){$/;"	f	file:
whereLoopOutputAdjust	testdocs/sqlite3.c	/^static void whereLoopOutputAdjust($/;"	f	file:
whereLoopPrint	testdocs/sqlite3.c	/^static void whereLoopPrint(WhereLoop *p, WhereClause *pWC){$/;"	f	file:
whereLoopResize	testdocs/sqlite3.c	/^static int whereLoopResize(sqlite3 *db, WhereLoop *p, int n){$/;"	f	file:
whereLoopXfer	testdocs/sqlite3.c	/^static int whereLoopXfer(sqlite3 *db, WhereLoop *pTo, WhereLoop *pFrom){$/;"	f	file:
whereNthSubterm	testdocs/sqlite3.c	/^static WhereTerm *whereNthSubterm(WhereTerm *pTerm, int N){$/;"	f	file:
whereOrInfoDelete	testdocs/sqlite3.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:
whereOrInsert	testdocs/sqlite3.c	/^static int whereOrInsert($/;"	f	file:
whereOrMove	testdocs/sqlite3.c	/^static void whereOrMove(WhereOrSet *pDest, WhereOrSet *pSrc){$/;"	f	file:
whereOrName	testdocs/sqlite3.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:
wherePathName	testdocs/sqlite3.c	/^static const char *wherePathName(WherePath *pPath, int nLoop, WhereLoop *pLast){$/;"	f	file:
wherePathSatisfiesOrderBy	testdocs/sqlite3.c	/^static i8 wherePathSatisfiesOrderBy($/;"	f	file:
wherePathSolver	testdocs/sqlite3.c	/^static int wherePathSolver(WhereInfo *pWInfo, LogEst nRowEst){$/;"	f	file:
whereRangeAdjust	testdocs/sqlite3.c	/^static LogEst whereRangeAdjust(WhereTerm *pTerm, LogEst nNew){$/;"	f	file:
whereRangeScanEst	testdocs/sqlite3.c	/^static int whereRangeScanEst($/;"	f	file:
whereRangeSkipScanEst	testdocs/sqlite3.c	/^static int whereRangeSkipScanEst($/;"	f	file:
whereRangeVectorLen	testdocs/sqlite3.c	/^static int whereRangeVectorLen($/;"	f	file:
whereScanInit	testdocs/sqlite3.c	/^static WhereTerm *whereScanInit($/;"	f	file:
whereScanNext	testdocs/sqlite3.c	/^static WhereTerm *whereScanNext(WhereScan *pScan){$/;"	f	file:
whereShortCut	testdocs/sqlite3.c	/^static int whereShortCut(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereSortingCost	testdocs/sqlite3.c	/^static LogEst whereSortingCost($/;"	f	file:
whereTempTriggers	testdocs/sqlite3.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:
whereTermPrint	testdocs/sqlite3.c	/^static void whereTermPrint(WhereTerm *pTerm, int iTerm){$/;"	f	file:
whereUsablePartialIndex	testdocs/sqlite3.c	/^static int whereUsablePartialIndex(int iTab, WhereClause *pWC, Expr *pWhere){$/;"	f	file:
winAccess	testdocs/sqlite3.c	/^static int winAccess($/;"	f	file:
winAppData	testdocs/sqlite3.c	/^static winVfsAppData winAppData = {$/;"	v	file:
winCheckReservedLock	testdocs/sqlite3.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winClose	testdocs/sqlite3.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:
winConvertFromUtf8Filename	testdocs/sqlite3.c	/^static void *winConvertFromUtf8Filename(const char *zFilename){$/;"	f	file:
winConvertToUtf8Filename	testdocs/sqlite3.c	/^static char *winConvertToUtf8Filename(const void *zFilename){$/;"	f	file:
winCurrentTime	testdocs/sqlite3.c	/^static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f	file:
winCurrentTimeInt64	testdocs/sqlite3.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
winDelete	testdocs/sqlite3.c	/^static int winDelete($/;"	f	file:
winDeviceCharacteristics	testdocs/sqlite3.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
winDlClose	testdocs/sqlite3.c	/^  #define winDlClose /;"	d	file:
winDlClose	testdocs/sqlite3.c	/^static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
winDlError	testdocs/sqlite3.c	/^  #define winDlError /;"	d	file:
winDlError	testdocs/sqlite3.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
winDlOpen	testdocs/sqlite3.c	/^  #define winDlOpen /;"	d	file:
winDlOpen	testdocs/sqlite3.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
winDlSym	testdocs/sqlite3.c	/^  #define winDlSym /;"	d	file:
winDlSym	testdocs/sqlite3.c	/^static void (*winDlSym(sqlite3_vfs *pVfs,void *pH,const char *zSym))(void){$/;"	f	file:
winFetch	testdocs/sqlite3.c	/^static int winFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
winFile	testdocs/sqlite3.c	/^struct winFile {$/;"	s	file:
winFile	testdocs/sqlite3.c	/^typedef struct winFile winFile;$/;"	t	typeref:struct:winFile	file:
winFileControl	testdocs/sqlite3.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
winFileSize	testdocs/sqlite3.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:
winFullPathname	testdocs/sqlite3.c	/^static int winFullPathname($/;"	f	file:
winGetDirSep	testdocs/sqlite3.c	/^#  define winGetDirSep(/;"	d	file:
winGetLastError	testdocs/sqlite3.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winGetLastErrorMsg	testdocs/sqlite3.c	/^static int winGetLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){$/;"	f	file:
winGetReadLock	testdocs/sqlite3.c	/^static int winGetReadLock(winFile *pFile){$/;"	f	file:
winGetSystemCall	testdocs/sqlite3.c	/^static sqlite3_syscall_ptr winGetSystemCall($/;"	f	file:
winGetTempname	testdocs/sqlite3.c	/^static int winGetTempname(sqlite3_vfs *pVfs, char **pzBuf){$/;"	f	file:
winIoMethod	testdocs/sqlite3.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winIoNolockMethod	testdocs/sqlite3.c	/^static const sqlite3_io_methods winIoNolockMethod = {$/;"	v	file:
winIoerrCanRetry1	testdocs/sqlite3.c	/^#define winIoerrCanRetry1(/;"	d	file:
winIoerrRetry	testdocs/sqlite3.c	/^static int winIoerrRetry = SQLITE_WIN32_IOERR_RETRY;$/;"	v	file:
winIoerrRetryDelay	testdocs/sqlite3.c	/^static int winIoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;$/;"	v	file:
winIsDir	testdocs/sqlite3.c	/^static int winIsDir(const void *zConverted){$/;"	f	file:
winIsDirSep	testdocs/sqlite3.c	/^#  define winIsDirSep(/;"	d	file:
winIsDriveLetterAndColon	testdocs/sqlite3.c	/^static BOOL winIsDriveLetterAndColon($/;"	f	file:
winIsVerbatimPathname	testdocs/sqlite3.c	/^static BOOL winIsVerbatimPathname($/;"	f	file:
winLock	testdocs/sqlite3.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:
winLockFile	testdocs/sqlite3.c	/^static BOOL winLockFile($/;"	f	file:
winLogError	testdocs/sqlite3.c	/^#define winLogError(/;"	d	file:
winLogErrorAtLine	testdocs/sqlite3.c	/^static int winLogErrorAtLine($/;"	f	file:
winLogIoerr	testdocs/sqlite3.c	/^static void winLogIoerr(int nRetry, int lineno){$/;"	f	file:
winMakeEndInDirSep	testdocs/sqlite3.c	/^static int winMakeEndInDirSep(int nBuf, char *zBuf){$/;"	f	file:
winMapfile	testdocs/sqlite3.c	/^static int winMapfile(winFile *pFd, sqlite3_int64 nByte){$/;"	f	file:
winMbcsToUnicode	testdocs/sqlite3.c	/^static LPWSTR winMbcsToUnicode(const char *zText, int useAnsi){$/;"	f	file:
winMbcsToUtf8	testdocs/sqlite3.c	/^static char *winMbcsToUtf8(const char *zText, int useAnsi){$/;"	f	file:
winMemAssertMagic	testdocs/sqlite3.c	/^#define winMemAssertMagic(/;"	d	file:
winMemAssertMagic1	testdocs/sqlite3.c	/^#define winMemAssertMagic1(/;"	d	file:
winMemAssertMagic2	testdocs/sqlite3.c	/^#define winMemAssertMagic2(/;"	d	file:
winMemData	testdocs/sqlite3.c	/^struct winMemData {$/;"	s	file:
winMemData	testdocs/sqlite3.c	/^typedef struct winMemData winMemData;$/;"	t	typeref:struct:winMemData	file:
winMemFree	testdocs/sqlite3.c	/^static void winMemFree(void *pPrior){$/;"	f	file:
winMemGetDataPtr	testdocs/sqlite3.c	/^#define winMemGetDataPtr(/;"	d	file:
winMemGetHeap	testdocs/sqlite3.c	/^#define winMemGetHeap(/;"	d	file:
winMemGetOwned	testdocs/sqlite3.c	/^#define winMemGetOwned(/;"	d	file:
winMemInit	testdocs/sqlite3.c	/^static int winMemInit(void *pAppData){$/;"	f	file:
winMemMalloc	testdocs/sqlite3.c	/^static void *winMemMalloc(int nBytes){$/;"	f	file:
winMemRealloc	testdocs/sqlite3.c	/^static void *winMemRealloc(void *pPrior, int nBytes){$/;"	f	file:
winMemRoundup	testdocs/sqlite3.c	/^static int winMemRoundup(int n){$/;"	f	file:
winMemShutdown	testdocs/sqlite3.c	/^static void winMemShutdown(void *pAppData){$/;"	f	file:
winMemSize	testdocs/sqlite3.c	/^static int winMemSize(void *p){$/;"	f	file:
winModeBit	testdocs/sqlite3.c	/^static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
winMutexAlloc	testdocs/sqlite3.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:
winMutexEnd	testdocs/sqlite3.c	/^static int winMutexEnd(void){$/;"	f	file:
winMutexEnter	testdocs/sqlite3.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:
winMutexFree	testdocs/sqlite3.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:
winMutexHeld	testdocs/sqlite3.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:
winMutexInit	testdocs/sqlite3.c	/^static int winMutexInit(void){$/;"	f	file:
winMutexLeave	testdocs/sqlite3.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld	testdocs/sqlite3.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld2	testdocs/sqlite3.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:
winMutexTry	testdocs/sqlite3.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:
winMutex_isInit	testdocs/sqlite3.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_isNt	testdocs/sqlite3.c	/^static int winMutex_isNt = -1; \/* <0 means "need to query" *\/$/;"	v	file:
winMutex_lock	testdocs/sqlite3.c	/^static LONG SQLITE_WIN32_VOLATILE winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	testdocs/sqlite3.c	/^static sqlite3_mutex winMutex_staticMutexes[] = {$/;"	v	file:
winNextSystemCall	testdocs/sqlite3.c	/^static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
winNolockAppData	testdocs/sqlite3.c	/^static winVfsAppData winNolockAppData = {$/;"	v	file:
winNolockCheckReservedLock	testdocs/sqlite3.c	/^static int winNolockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winNolockLock	testdocs/sqlite3.c	/^static int winNolockLock(sqlite3_file *id, int locktype){$/;"	f	file:
winNolockUnlock	testdocs/sqlite3.c	/^static int winNolockUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winOpen	testdocs/sqlite3.c	/^static int winOpen($/;"	f	file:
winOpenSharedMemory	testdocs/sqlite3.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:
winRandomness	testdocs/sqlite3.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winRead	testdocs/sqlite3.c	/^static int winRead($/;"	f	file:
winRetryIoerr	testdocs/sqlite3.c	/^static int winRetryIoerr(int *pnRetry, DWORD *pError){$/;"	f	file:
winSectorSize	testdocs/sqlite3.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:
winSeekFile	testdocs/sqlite3.c	/^static int winSeekFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:
winSetSystemCall	testdocs/sqlite3.c	/^static int winSetSystemCall($/;"	f	file:
winShm	testdocs/sqlite3.c	/^struct winShm {$/;"	s	file:
winShm	testdocs/sqlite3.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	typeref:struct:winShm	file:
winShmBarrier	testdocs/sqlite3.c	/^# define winShmBarrier /;"	d	file:
winShmBarrier	testdocs/sqlite3.c	/^static void winShmBarrier($/;"	f	file:
winShmEnterMutex	testdocs/sqlite3.c	/^static void winShmEnterMutex(void){$/;"	f	file:
winShmLeaveMutex	testdocs/sqlite3.c	/^static void winShmLeaveMutex(void){$/;"	f	file:
winShmLock	testdocs/sqlite3.c	/^# define winShmLock /;"	d	file:
winShmLock	testdocs/sqlite3.c	/^static int winShmLock($/;"	f	file:
winShmMap	testdocs/sqlite3.c	/^# define winShmMap /;"	d	file:
winShmMap	testdocs/sqlite3.c	/^static int winShmMap($/;"	f	file:
winShmMutexHeld	testdocs/sqlite3.c	/^static int winShmMutexHeld(void) {$/;"	f	file:
winShmNode	testdocs/sqlite3.c	/^struct winShmNode {$/;"	s	file:
winShmNode	testdocs/sqlite3.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	typeref:struct:winShmNode	file:
winShmNodeList	testdocs/sqlite3.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	testdocs/sqlite3.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:
winShmSystemLock	testdocs/sqlite3.c	/^static int winShmSystemLock($/;"	f	file:
winShmUnmap	testdocs/sqlite3.c	/^# define winShmUnmap /;"	d	file:
winShmUnmap	testdocs/sqlite3.c	/^static int winShmUnmap($/;"	f	file:
winSleep	testdocs/sqlite3.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:
winSync	testdocs/sqlite3.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:
winSysInfo	testdocs/sqlite3.c	/^static SYSTEM_INFO winSysInfo;$/;"	v	file:
winTruncate	testdocs/sqlite3.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:
winUnfetch	testdocs/sqlite3.c	/^static int winUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
winUnicodeToMbcs	testdocs/sqlite3.c	/^static char *winUnicodeToMbcs(LPCWSTR zWideText, int useAnsi){$/;"	f	file:
winUnicodeToUtf8	testdocs/sqlite3.c	/^static char *winUnicodeToUtf8(LPCWSTR zWideText){$/;"	f	file:
winUnlock	testdocs/sqlite3.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winUnlockFile	testdocs/sqlite3.c	/^static BOOL winUnlockFile($/;"	f	file:
winUnlockReadLock	testdocs/sqlite3.c	/^static int winUnlockReadLock(winFile *pFile){$/;"	f	file:
winUnmapfile	testdocs/sqlite3.c	/^static int winUnmapfile(winFile *pFile){$/;"	f	file:
winUtf8ToMbcs	testdocs/sqlite3.c	/^static char *winUtf8ToMbcs(const char *zText, int useAnsi){$/;"	f	file:
winUtf8ToUnicode	testdocs/sqlite3.c	/^static LPWSTR winUtf8ToUnicode(const char *zText){$/;"	f	file:
winVfsAppData	testdocs/sqlite3.c	/^struct winVfsAppData {$/;"	s	file:
winVfsAppData	testdocs/sqlite3.c	/^typedef struct winVfsAppData winVfsAppData;$/;"	t	typeref:struct:winVfsAppData	file:
winWrite	testdocs/sqlite3.c	/^static int winWrite($/;"	f	file:
win_mem_data	testdocs/sqlite3.c	/^static struct winMemData win_mem_data = {$/;"	v	typeref:struct:winMemData	file:
win_syscall	testdocs/sqlite3.c	/^static struct win_syscall {$/;"	s	file:
winceCreateLock	testdocs/sqlite3.c	/^static int winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:
winceDestroyLock	testdocs/sqlite3.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:
winceLock	testdocs/sqlite3.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	testdocs/sqlite3.c	/^} winceLock;$/;"	t	typeref:struct:winceLock	file:
winceLockFile	testdocs/sqlite3.c	/^static BOOL winceLockFile($/;"	f	file:
winceMutexAcquire	testdocs/sqlite3.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:
winceMutexRelease	testdocs/sqlite3.c	/^#define winceMutexRelease(/;"	d	file:
winceUnlockFile	testdocs/sqlite3.c	/^static BOOL winceUnlockFile($/;"	f	file:
windll	testdocs/waf	/^		from ctypes import windll$/;"	i
withDup	testdocs/sqlite3.c	/^# define withDup(/;"	d	file:
withDup	testdocs/sqlite3.c	/^static With *withDup(sqlite3 *db, With *p){$/;"	f	file:
withExpand	testdocs/sqlite3.c	/^static int withExpand($/;"	f	file:
wrFlag	testdocs/sqlite3.c	/^  u8 wrFlag;              \/* The wrFlag argument to sqlite3BtreeCursor() *\/$/;"	m	struct:VdbeCursor	file:
write32bits	testdocs/sqlite3.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:
writeCoord	testdocs/sqlite3.c	/^static int writeCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
writeInt16	testdocs/sqlite3.c	/^static void writeInt16(u8 *p, int i){$/;"	f	file:
writeInt64	testdocs/sqlite3.c	/^static int writeInt64(u8 *p, i64 i){$/;"	f	file:
writeJournalHdr	testdocs/sqlite3.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:
writeLock	testdocs/sqlite3.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:
writeMask	testdocs/sqlite3.c	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	file:
writeMasterJournal	testdocs/sqlite3.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:
writer	testdocs/sqlite3.c	/^  Fts5PageWriter writer;          \/* PageWriter object *\/$/;"	m	struct:Fts5SegWriter	file:
writer	testdocs/sqlite3.c	/^  Fts5PoslistWriter writer;       \/* Writer context *\/$/;"	m	struct:Fts5NearTrimmer	file:
writer	testdocs/sqlite3.c	/^  Fts5PoslistWriter writer;$/;"	m	struct:Fts5PoslistPopulator	file:
writer	testdocs/sqlite3.c	/^  Fts5SegWriter writer;$/;"	m	struct:Fts5FlushCtx	file:
wsFlags	testdocs/sqlite3.c	/^  u32 wsFlags;          \/* WHERE_* flags describing the plan *\/$/;"	m	struct:WhereLoop	file:
wsdAutoext	testdocs/sqlite3.c	/^# define wsdAutoext /;"	d	file:
wsdAutoextInit	testdocs/sqlite3.c	/^# define wsdAutoextInit /;"	d	file:
wsdAutoextInit	testdocs/sqlite3.c	/^# define wsdAutoextInit$/;"	d	file:
wsdHooks	testdocs/sqlite3.c	/^# define wsdHooks /;"	d	file:
wsdHooksInit	testdocs/sqlite3.c	/^# define wsdHooksInit /;"	d	file:
wsdHooksInit	testdocs/sqlite3.c	/^# define wsdHooksInit$/;"	d	file:
wsdPrng	testdocs/sqlite3.c	/^# define wsdPrng /;"	d	file:
wsdStat	testdocs/sqlite3.c	/^# define wsdStat /;"	d	file:
wsdStatInit	testdocs/sqlite3.c	/^# define wsdStatInit /;"	d	file:
wsdStatInit	testdocs/sqlite3.c	/^# define wsdStatInit$/;"	d	file:
wtFlags	testdocs/sqlite3.c	/^  u16 wtFlags;            \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:
x	testdocs/sqlite3.c	/^      } x;$/;"	m	union:ExprList::ExprList_item::__anon12	typeref:struct:ExprList::ExprList_item::__anon12::__anon13	file:
x	testdocs/sqlite3.c	/^  fts5_tokenizer x;               \/* Tokenizer functions *\/$/;"	m	struct:Fts5TokenizerModule	file:
x	testdocs/sqlite3.c	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon11	file:
xAccess	testdocs/sqlite3.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	file:
xAdvance	testdocs/sqlite3.c	/^    int (*xAdvance)(BtCursor *, int *);$/;"	m	union:VdbeOp::p4union	file:
xAuth	testdocs/sqlite3.c	/^  sqlite3_xauth xAuth;          \/* Access authorization function *\/$/;"	m	struct:sqlite3	file:
xBacktrace	testdocs/sqlite3.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon20	file:
xBegin	testdocs/sqlite3.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xBenignBegin	testdocs/sqlite3.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:
xBenignEnd	testdocs/sqlite3.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:
xBestIndex	testdocs/sqlite3.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	file:
xBusyHandler	testdocs/sqlite3.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:
xCachesize	testdocs/sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	file:
xCachesize	testdocs/sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCellSize	testdocs/sqlite3.c	/^  u16 (*xCellSize)(MemPage*,u8*);             \/* cellSizePtr method *\/$/;"	m	struct:MemPage	file:
xCheckReservedLock	testdocs/sqlite3.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	file:
xClose	testdocs/sqlite3.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xClose	testdocs/sqlite3.c	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module	file:
xClose	testdocs/sqlite3.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xCmp	testdocs/sqlite3.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	file:
xCodec	testdocs/sqlite3.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:
xCodecFree	testdocs/sqlite3.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:
xCodecSizeChng	testdocs/sqlite3.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:
xCollNeeded	testdocs/sqlite3.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	file:
xCollNeeded16	testdocs/sqlite3.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	file:
xColumn	testdocs/sqlite3.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	file:
xColumnCount	testdocs/sqlite3.c	/^  int (*xColumnCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	file:
xColumnSize	testdocs/sqlite3.c	/^  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);$/;"	m	struct:Fts5ExtensionApi	file:
xColumnText	testdocs/sqlite3.c	/^  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);$/;"	m	struct:Fts5ExtensionApi	file:
xColumnTotalSize	testdocs/sqlite3.c	/^  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);$/;"	m	struct:Fts5ExtensionApi	file:
xCommit	testdocs/sqlite3.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xCommitCallback	testdocs/sqlite3.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xCompare	testdocs/sqlite3.c	/^  SorterCompare xCompare;         \/* Compare function to use *\/$/;"	m	struct:SortSubtask	file:
xCond	testdocs/sqlite3.c	/^  int (*xCond)(char *zStem, int nStem);$/;"	m	struct:PorterRule	file:
xConnect	testdocs/sqlite3.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCount	testdocs/sqlite3.c	/^  int (*xCount)(void*);$/;"	m	struct:SessionHook	file:
xCreate	testdocs/sqlite3.c	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module	file:
xCreate	testdocs/sqlite3.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	testdocs/sqlite3.c	/^  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);$/;"	m	struct:fts5_tokenizer	file:
xCreate	testdocs/sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	file:
xCreate	testdocs/sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCreateFunction	testdocs/sqlite3.c	/^  int (*xCreateFunction)($/;"	m	struct:fts5_api	file:
xCreateTokenizer	testdocs/sqlite3.c	/^  int (*xCreateTokenizer)($/;"	m	struct:fts5_api	file:
xCurrentTime	testdocs/sqlite3.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTimeInt64	testdocs/sqlite3.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	file:
xDel	testdocs/sqlite3.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	file:
xDel	testdocs/sqlite3.c	/^  void (*xDel)(void*);\/* Destructor for Mem.z - only valid if MEM_Dyn *\/$/;"	m	struct:sqlite3_value	file:
xDelUser	testdocs/sqlite3.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
xDelUser	testdocs/sqlite3.c	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
xDelete	testdocs/sqlite3.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	file:
xDelete	testdocs/sqlite3.c	/^  void (*xDelete)(Fts5Tokenizer*);$/;"	m	struct:fts5_tokenizer	file:
xDelete	testdocs/sqlite3.c	/^  void(*xDelete)(void*);          \/* Destructor *\/$/;"	m	struct:Fts5Auxdata	file:
xDeleteAux	testdocs/sqlite3.c	/^  void (*xDeleteAux)(void*);      \/* Destructor for the aux data *\/$/;"	m	struct:AuxData	file:
xDepth	testdocs/sqlite3.c	/^  int (*xDepth)(void*);$/;"	m	struct:SessionHook	file:
xDestroy	testdocs/sqlite3.c	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module	file:
xDestroy	testdocs/sqlite3.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDestroy	testdocs/sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xDestroy	testdocs/sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xDestroy	testdocs/sqlite3.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	file:
xDestroy	testdocs/sqlite3.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	file:
xDestroy	testdocs/sqlite3.c	/^  void (*xDestroy)(void*);        \/* Destructor function *\/$/;"	m	struct:Fts5Auxiliary	file:
xDestroy	testdocs/sqlite3.c	/^  void (*xDestroy)(void*);        \/* Destructor function *\/$/;"	m	struct:Fts5TokenizerModule	file:
xDestructor	testdocs/sqlite3.c	/^  void (*xDestructor)(void*);$/;"	m	struct:RtreeGeomCallback	file:
xDeviceCharacteristics	testdocs/sqlite3.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xDisconnect	testdocs/sqlite3.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDlClose	testdocs/sqlite3.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	file:
xDlError	testdocs/sqlite3.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	file:
xDlOpen	testdocs/sqlite3.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	file:
xEof	testdocs/sqlite3.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xExprCallback	testdocs/sqlite3.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	file:
xFetch	testdocs/sqlite3.c	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	file:
xFetch	testdocs/sqlite3.c	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	file:
xFetch	testdocs/sqlite3.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	file:
xFileControl	testdocs/sqlite3.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	file:
xFileSize	testdocs/sqlite3.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	file:
xFilter	testdocs/sqlite3.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	file:
xFinalize	testdocs/sqlite3.c	/^  void (*xFinalize)(sqlite3_context*);                  \/* Agg finalizer *\/$/;"	m	struct:FuncDef	file:
xFindFunction	testdocs/sqlite3.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	file:
xFindTokenizer	testdocs/sqlite3.c	/^  int (*xFindTokenizer)($/;"	m	struct:fts5_api	file:
xFree	testdocs/sqlite3.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xFree	testdocs/sqlite3.c	/^static void xFree(void *p){$/;"	f	file:
xFreeSchema	testdocs/sqlite3.c	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared	file:
xFullPathname	testdocs/sqlite3.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xFunc	testdocs/sqlite3.c	/^  fts5_extension_function xFunc;  \/* Callback function *\/$/;"	m	struct:Fts5Auxiliary	file:
xFunc	testdocs/sqlite3.c	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	file:
xGeom	testdocs/sqlite3.c	/^    int (*xGeom)(sqlite3_rtree_geometry*,int,RtreeDValue*,int*);$/;"	m	union:RtreeConstraint::__anon36	file:
xGeom	testdocs/sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);$/;"	m	struct:RtreeGeomCallback	file:
xGet	testdocs/sqlite3.c	/^  int (*xGet)(Pager*,Pgno,DbPage**,int); \/* Routine to fetch a patch *\/$/;"	m	struct:Pager	file:
xGetAuxdata	testdocs/sqlite3.c	/^  void *(*xGetAuxdata)(Fts5Context*, int bClear);$/;"	m	struct:Fts5ExtensionApi	file:
xGetLastError	testdocs/sqlite3.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	file:
xGetSystemCall	testdocs/sqlite3.c	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xInit	testdocs/sqlite3.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xInit	testdocs/sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xInit	testdocs/sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xInput	testdocs/sqlite3.c	/^  int (*xInput)(void*, void*, int*);        \/* Input stream call (or NULL) *\/$/;"	m	struct:SessionInput	file:
xInst	testdocs/sqlite3.c	/^  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi	file:
xInstCount	testdocs/sqlite3.c	/^  int (*xInstCount)(Fts5Context*, int *pnInst);$/;"	m	struct:Fts5ExtensionApi	file:
xLanguageid	testdocs/sqlite3.c	/^  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);$/;"	m	struct:sqlite3_tokenizer_module	file:
xLock	testdocs/sqlite3.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xLog	testdocs/sqlite3.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	file:
xMalloc	testdocs/sqlite3.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	file:
xMutexAlloc	testdocs/sqlite3.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnd	testdocs/sqlite3.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnter	testdocs/sqlite3.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexFree	testdocs/sqlite3.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexHeld	testdocs/sqlite3.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexInit	testdocs/sqlite3.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexLeave	testdocs/sqlite3.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexNotheld	testdocs/sqlite3.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexTry	testdocs/sqlite3.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xNew	testdocs/sqlite3.c	/^  int (*xNew)(void*,int,sqlite3_value**);$/;"	m	struct:SessionHook	file:
xNext	testdocs/sqlite3.c	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module	file:
xNext	testdocs/sqlite3.c	/^  int (*xNext)(Fts5Expr*, Fts5ExprNode*, int, i64);$/;"	m	struct:Fts5ExprNode	file:
xNext	testdocs/sqlite3.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xNext	testdocs/sqlite3.c	/^  void (*xNext)(Fts5Index*, Fts5SegIter*, int*);$/;"	m	struct:Fts5SegIter	file:
xNextSystemCall	testdocs/sqlite3.c	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xOld	testdocs/sqlite3.c	/^  int (*xOld)(void*,int,sqlite3_value**);$/;"	m	struct:SessionHook	file:
xOpen	testdocs/sqlite3.c	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module	file:
xOpen	testdocs/sqlite3.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	file:
xOpen	testdocs/sqlite3.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	file:
xPagecount	testdocs/sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xPagecount	testdocs/sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xParseCell	testdocs/sqlite3.c	/^  void (*xParseCell)(MemPage*,u8*,CellInfo*); \/* btreeParseCell method *\/$/;"	m	struct:MemPage	file:
xPhraseCount	testdocs/sqlite3.c	/^  int (*xPhraseCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	file:
xPhraseFirst	testdocs/sqlite3.c	/^  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);$/;"	m	struct:Fts5ExtensionApi	file:
xPhraseFirstColumn	testdocs/sqlite3.c	/^  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);$/;"	m	struct:Fts5ExtensionApi	file:
xPhraseNext	testdocs/sqlite3.c	/^  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi	file:
xPhraseNextColumn	testdocs/sqlite3.c	/^  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);$/;"	m	struct:Fts5ExtensionApi	file:
xPhraseSize	testdocs/sqlite3.c	/^  int (*xPhraseSize)(Fts5Context*, int iPhrase);$/;"	m	struct:Fts5ExtensionApi	file:
xPreUpdate	testdocs/sqlite3.c	/^static void xPreUpdate($/;"	f	file:
xPreUpdateCallback	testdocs/sqlite3.c	/^  void (*xPreUpdateCallback)(   \/* Registered using sqlite3_preupdate_hook() *\/$/;"	m	struct:sqlite3	file:
xProfile	testdocs/sqlite3.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	file:
xProgress	testdocs/sqlite3.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	file:
xQueryFunc	testdocs/sqlite3.c	/^    int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	union:RtreeConstraint::__anon36	file:
xQueryFunc	testdocs/sqlite3.c	/^  int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	struct:RtreeGeomCallback	file:
xQueryPhrase	testdocs/sqlite3.c	/^  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,$/;"	m	struct:Fts5ExtensionApi	file:
xRandomness	testdocs/sqlite3.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xRead	testdocs/sqlite3.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xRealloc	testdocs/sqlite3.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xReiniter	testdocs/sqlite3.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:
xRekey	testdocs/sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*,$/;"	m	struct:sqlite3_pcache_methods2	file:
xRekey	testdocs/sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	file:
xRelease	testdocs/sqlite3.c	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRename	testdocs/sqlite3.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	file:
xRollback	testdocs/sqlite3.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xRollbackCallback	testdocs/sqlite3.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xRollbackTo	testdocs/sqlite3.c	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRoundup	testdocs/sqlite3.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRowCount	testdocs/sqlite3.c	/^  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);$/;"	m	struct:Fts5ExtensionApi	file:
xRowid	testdocs/sqlite3.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	file:
xRowid	testdocs/sqlite3.c	/^  sqlite3_int64 (*xRowid)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	file:
xSFunc	testdocs/sqlite3.c	/^  void (*xSFunc)(sqlite3_context*,int,sqlite3_value**); \/* func or agg-step *\/$/;"	m	struct:FuncDef	file:
xSavepoint	testdocs/sqlite3.c	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xSectorSize	testdocs/sqlite3.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xSelectCallback	testdocs/sqlite3.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSelectCallback2	testdocs/sqlite3.c	/^  void (*xSelectCallback2)(Walker*,Select*);\/* Second callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSetAuxdata	testdocs/sqlite3.c	/^  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));$/;"	m	struct:Fts5ExtensionApi	file:
xSetOutputs	testdocs/sqlite3.c	/^  void (*xSetOutputs)(Fts5Iter*, Fts5SegIter*);$/;"	m	struct:Fts5Iter	file:
xSetSystemCall	testdocs/sqlite3.c	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	file:
xShmBarrier	testdocs/sqlite3.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xShmLock	testdocs/sqlite3.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xShmMap	testdocs/sqlite3.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	file:
xShmUnmap	testdocs/sqlite3.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	file:
xShrink	testdocs/sqlite3.c	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xShutdown	testdocs/sqlite3.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xShutdown	testdocs/sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xShutdown	testdocs/sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xSize	testdocs/sqlite3.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xSleep	testdocs/sqlite3.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	file:
xSqllog	testdocs/sqlite3.c	/^  void(*xSqllog)(void*,sqlite3*,const char*, int);$/;"	m	struct:Sqlite3Config	file:
xStress	testdocs/sqlite3.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:
xSync	testdocs/sqlite3.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xSync	testdocs/sqlite3.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xTableFilter	testdocs/sqlite3.c	/^  int (*xTableFilter)(void *pCtx, const char *zTab);$/;"	m	struct:sqlite3_session	file:
xTask	testdocs/sqlite3.c	/^  void *(*xTask)(void*);         \/* The thread routine *\/$/;"	m	struct:SQLiteThread	file:
xTask	testdocs/sqlite3.c	/^  void *(*xTask)(void*);   \/* The routine to run as a thread *\/$/;"	m	struct:SQLiteThread	file:
xTestCallback	testdocs/sqlite3.c	/^  int (*xTestCallback)(int);        \/* Invoked by sqlite3FaultSim() *\/$/;"	m	struct:Sqlite3Config	file:
xToken	testdocs/sqlite3.c	/^  int (*xToken)(void*, int, const char*, int, int, int);$/;"	m	struct:PorterContext	file:
xTokenize	testdocs/sqlite3.c	/^  int (*xTokenize)(Fts5Context*,$/;"	m	struct:Fts5ExtensionApi	file:
xTokenize	testdocs/sqlite3.c	/^  int (*xTokenize)(Fts5Tokenizer*,$/;"	m	struct:fts5_tokenizer	file:
xTrace	testdocs/sqlite3.c	/^  int (*xTrace)(u32,void*,void*,void*);     \/* Trace function *\/$/;"	m	struct:sqlite3	file:
xTruncate	testdocs/sqlite3.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	file:
xTruncate	testdocs/sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	file:
xTruncate	testdocs/sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	file:
xUnfetch	testdocs/sqlite3.c	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	file:
xUnlock	testdocs/sqlite3.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xUnlockNotify	testdocs/sqlite3.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	file:
xUnpin	testdocs/sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	file:
xUnpin	testdocs/sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	file:
xUpdate	testdocs/sqlite3.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	file:
xUpdateCallback	testdocs/sqlite3.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	file:
xUserData	testdocs/sqlite3.c	/^  void *(*xUserData)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	file:
xVdbeBranch	testdocs/sqlite3.c	/^  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  \/* Callback *\/$/;"	m	struct:Sqlite3Config	file:
xWalCallback	testdocs/sqlite3.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	file:
xWrite	testdocs/sqlite3.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xferCompatibleIndex	testdocs/sqlite3.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:
xferOptimization	testdocs/sqlite3.c	/^static int xferOptimization($/;"	f	file:
xorMemory	testdocs/sqlite3.c	/^static void xorMemory(EntropyGatherer *p, unsigned char *x, int sz){$/;"	f	file:
xthreadsafe	testdocs/sqlite3.c	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	file:
yColCache	testdocs/sqlite3.c	/^  struct yColCache {$/;"	s	struct:Parse	file:
yDbMask	testdocs/sqlite3.c	/^  typedef unsigned char yDbMask[(SQLITE_MAX_ATTACHED+9)\/8];$/;"	t	file:
yDbMask	testdocs/sqlite3.c	/^  typedef unsigned int yDbMask;$/;"	t	file:
ynVar	testdocs/sqlite3.c	/^typedef i16 ynVar;$/;"	t	file:
ynVar	testdocs/sqlite3.c	/^typedef int ynVar;$/;"	t	file:
yy0	testdocs/sqlite3.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:__anon33	file:
yy145	testdocs/sqlite3.c	/^  TriggerStep* yy145;$/;"	m	union:__anon33	file:
yy148	testdocs/sqlite3.c	/^  ExprList* yy148;$/;"	m	union:__anon33	file:
yy185	testdocs/sqlite3.c	/^  SrcList* yy185;$/;"	m	union:__anon33	file:
yy190	testdocs/sqlite3.c	/^  ExprSpan yy190;$/;"	m	union:__anon33	file:
yy194	testdocs/sqlite3.c	/^  int yy194;$/;"	m	union:__anon33	file:
yy243	testdocs/sqlite3.c	/^  Select* yy243;$/;"	m	union:__anon33	file:
yy254	testdocs/sqlite3.c	/^  IdList* yy254;$/;"	m	union:__anon33	file:
yy285	testdocs/sqlite3.c	/^  With* yy285;$/;"	m	union:__anon33	file:
yy332	testdocs/sqlite3.c	/^  struct TrigEvent yy332;$/;"	m	union:__anon33	typeref:struct:__anon33::TrigEvent	file:
yy354	testdocs/sqlite3.c	/^  struct LimitVal yy354;$/;"	m	union:__anon33	typeref:struct:__anon33::LimitVal	file:
yy497	testdocs/sqlite3.c	/^  struct {int value; int mask;} yy497;$/;"	m	union:__anon33	typeref:struct:__anon33::__anon34	file:
yy72	testdocs/sqlite3.c	/^  Expr* yy72;$/;"	m	union:__anon33	file:
yyFallback	testdocs/sqlite3.c	/^static const YYCODETYPE yyFallback[] = {$/;"	v	file:
yyGrowStack	testdocs/sqlite3.c	/^static int yyGrowStack(yyParser *p){$/;"	f	file:
yyParser	testdocs/sqlite3.c	/^struct yyParser {$/;"	s	file:
yyParser	testdocs/sqlite3.c	/^typedef struct yyParser yyParser;$/;"	t	typeref:struct:yyParser	file:
yyRuleInfo	testdocs/sqlite3.c	/^} yyRuleInfo[] = {$/;"	v	typeref:struct:__anon35	file:
yyRuleName	testdocs/sqlite3.c	/^static const char *const yyRuleName[] = {$/;"	v	file:
yyStackEntry	testdocs/sqlite3.c	/^struct yyStackEntry {$/;"	s	file:
yyStackEntry	testdocs/sqlite3.c	/^typedef struct yyStackEntry yyStackEntry;$/;"	t	typeref:struct:yyStackEntry	file:
yyStackOverflow	testdocs/sqlite3.c	/^static void yyStackOverflow(yyParser *yypParser){$/;"	f	file:
yyTokenName	testdocs/sqlite3.c	/^static const char *const yyTokenName[] = {$/;"	v	file:
yyTraceFILE	testdocs/sqlite3.c	/^static FILE *yyTraceFILE = 0;$/;"	v	file:
yyTracePrompt	testdocs/sqlite3.c	/^static char *yyTracePrompt = 0;$/;"	v	file:
yyTraceShift	testdocs/sqlite3.c	/^# define yyTraceShift(/;"	d	file:
yyTraceShift	testdocs/sqlite3.c	/^static void yyTraceShift(yyParser *yypParser, int yyNewState){$/;"	f	file:
yy_accept	testdocs/sqlite3.c	/^static void yy_accept($/;"	f	file:
yy_action	testdocs/sqlite3.c	/^static const YYACTIONTYPE yy_action[] = {$/;"	v	file:
yy_default	testdocs/sqlite3.c	/^static const YYACTIONTYPE yy_default[] = {$/;"	v	file:
yy_destructor	testdocs/sqlite3.c	/^static void yy_destructor($/;"	f	file:
yy_find_reduce_action	testdocs/sqlite3.c	/^static int yy_find_reduce_action($/;"	f	file:
yy_find_shift_action	testdocs/sqlite3.c	/^static unsigned int yy_find_shift_action($/;"	f	file:
yy_lookahead	testdocs/sqlite3.c	/^static const YYCODETYPE yy_lookahead[] = {$/;"	v	file:
yy_parse_failed	testdocs/sqlite3.c	/^static void yy_parse_failed($/;"	f	file:
yy_pop_parser_stack	testdocs/sqlite3.c	/^static void yy_pop_parser_stack(yyParser *pParser){$/;"	f	file:
yy_reduce	testdocs/sqlite3.c	/^static void yy_reduce($/;"	f	file:
yy_reduce_ofst	testdocs/sqlite3.c	/^static const short yy_reduce_ofst[] = {$/;"	v	file:
yy_shift	testdocs/sqlite3.c	/^static void yy_shift($/;"	f	file:
yy_shift_ofst	testdocs/sqlite3.c	/^static const short yy_shift_ofst[] = {$/;"	v	file:
yy_syntax_error	testdocs/sqlite3.c	/^static void yy_syntax_error($/;"	f	file:
yyerrcnt	testdocs/sqlite3.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:
yyhwm	testdocs/sqlite3.c	/^  int yyhwm;                    \/* High-water mark of the stack *\/$/;"	m	struct:yyParser	file:
yyinit	testdocs/sqlite3.c	/^  int yyinit;$/;"	m	union:__anon33	file:
yystack	testdocs/sqlite3.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:
yystk0	testdocs/sqlite3.c	/^  yyStackEntry yystk0;          \/* First stack entry *\/$/;"	m	struct:yyParser	file:
yystksz	testdocs/sqlite3.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:
yytestcase	testdocs/sqlite3.c	/^# define yytestcase(/;"	d	file:
yytestcase	testdocs/sqlite3.c	/^#define yytestcase(/;"	d	file:
yytos	testdocs/sqlite3.c	/^  yyStackEntry *yytos;          \/* Pointer to top element of the stack *\/$/;"	m	struct:yyParser	file:
z	testdocs/sqlite3.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::p4union	file:
z	testdocs/sqlite3.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:
z	testdocs/sqlite3.c	/^  char *z;                        \/* Text of the token *\/$/;"	m	struct:Fts3PhraseToken	file:
z	testdocs/sqlite3.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:sqlite3_value	file:
z	testdocs/sqlite3.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	file:
zAffSdst	testdocs/sqlite3.c	/^  char *zAffSdst;      \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	file:
zAlias	testdocs/sqlite3.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	file:
zAuthContext	testdocs/sqlite3.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	file:
zAuthContext	testdocs/sqlite3.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	file:
zAuthPW	testdocs/sqlite3.c	/^  char *zAuthPW;                \/* Password used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:
zAuthUser	testdocs/sqlite3.c	/^  char *zAuthUser;              \/* User name used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:
zBase	testdocs/sqlite3.c	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum	file:
zBuf	testdocs/sqlite3.c	/^  char *zBuf;              \/* Append JSON content here *\/$/;"	m	struct:JsonString	file:
zBuffer	testdocs/sqlite3.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:
zCanonicalName	testdocs/sqlite3.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:
zChunk	testdocs/sqlite3.c	/^  u8 zChunk[8];                   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:
zClose	testdocs/sqlite3.c	/^  const char *zClose;             \/* Closing highlight *\/$/;"	m	struct:HighlightContext	file:
zCol	testdocs/sqlite3.c	/^    char *zCol;           \/* Name of column in zTo.  If NULL use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	file:
zColAff	testdocs/sqlite3.c	/^  char *zColAff;           \/* String defining the affinity of each column *\/$/;"	m	struct:Index	file:
zColAff	testdocs/sqlite3.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	file:
zColl	testdocs/sqlite3.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	file:
zCollName	testdocs/sqlite3.c	/^  const char *zCollName;     \/* Required collating sequence, if not NULL *\/$/;"	m	struct:WhereScan	file:
zComment	testdocs/sqlite3.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	file:
zContent	testdocs/sqlite3.c	/^  char *zContent;                 \/* content table *\/$/;"	m	struct:Fts5Config	file:
zContentExprlist	testdocs/sqlite3.c	/^  char *zContentExprlist;$/;"	m	struct:Fts5Config	file:
zContentRowid	testdocs/sqlite3.c	/^  char *zContentRowid;            \/* "content_rowid=" option value *\/$/;"	m	struct:Fts5Config	file:
zContentTbl	testdocs/sqlite3.c	/^  char *zContentTbl;              \/* content=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zCteErr	testdocs/sqlite3.c	/^    const char *zCteErr;            \/* Error message for circular references *\/$/;"	m	struct:With::Cte	file:
zData	testdocs/sqlite3.c	/^  u8 *zData;                  \/* Content of the node, as should be on disk *\/$/;"	m	struct:RtreeNode	file:
zDataTbl	testdocs/sqlite3.c	/^  char *zDataTbl;                 \/* Name of %_data table *\/$/;"	m	struct:Fts5Index	file:
zDataTbl	testdocs/sqlite3.c	/^  const char *zDataTbl;           \/* Name of rbu db table (or null) *\/$/;"	m	struct:RbuObjIter	file:
zDatabase	testdocs/sqlite3.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zDatabase	testdocs/sqlite3.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:
zDb	testdocs/sqlite3.c	/^  char *zDb;                      \/* Database holding FTS index (e.g. "main") *\/$/;"	m	struct:Fts5Config	file:
zDb	testdocs/sqlite3.c	/^  char *zDb;                      \/* Name of database session is attached to *\/$/;"	m	struct:sqlite3_session	file:
zDb	testdocs/sqlite3.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:
zDb	testdocs/sqlite3.c	/^  char *zDb;              \/* Database name *\/$/;"	m	struct:Incrblob	file:
zDb	testdocs/sqlite3.c	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table	file:
zDb	testdocs/sqlite3.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	file:
zDbSName	testdocs/sqlite3.c	/^  char *zDbSName;      \/* Name of this database. (schema name, not filename) *\/$/;"	m	struct:Db	file:
zDel	testdocs/sqlite3.c	/^  char *zDel;                     \/* Delete this when closing file *\/$/;"	m	struct:rbu_file	file:
zDeleteOnClose	testdocs/sqlite3.c	/^  LPWSTR zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:
zDoc	testdocs/sqlite3.c	/^  const char *zDoc;               \/* Document being tokenized *\/$/;"	m	struct:Fts5SFinder	file:
zEnd	testdocs/sqlite3.c	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan	file:
zErr	testdocs/sqlite3.c	/^  char *zErr;$/;"	m	struct:Fts5Parse	file:
zErrMsg	testdocs/sqlite3.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	file:
zErrMsg	testdocs/sqlite3.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	file:
zErrMsg	testdocs/sqlite3.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	file:
zErrMsg	testdocs/sqlite3.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:
zErrmsg	testdocs/sqlite3.c	/^  char *zErrmsg;                  \/* Error message if rc!=SQLITE_OK *\/$/;"	m	struct:sqlite3rbu	file:
zFilename	testdocs/sqlite3.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:
zFilename	testdocs/sqlite3.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:
zFilename	testdocs/sqlite3.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:
zFts5Db	testdocs/sqlite3.c	/^  char *zFts5Db;                  \/* Db containing fts5 table *\/$/;"	m	struct:Fts5VocabTable	file:
zFts5Tbl	testdocs/sqlite3.c	/^  char *zFts5Tbl;                 \/* Name of fts5 table *\/$/;"	m	struct:Fts5VocabTable	file:
zFunc	testdocs/sqlite3.c	/^  char *zFunc;                    \/* Function name (nul-terminated) *\/$/;"	m	struct:Fts5Auxiliary	file:
zIdx	testdocs/sqlite3.c	/^  char *zIdx;$/;"	m	struct:RbuState	file:
zIdx	testdocs/sqlite3.c	/^  const char *zIdx;               \/* Name of target db index (or null) *\/$/;"	m	struct:RbuObjIter	file:
zIn	testdocs/sqlite3.c	/^  const char *zIn;                \/* Input text *\/$/;"	m	struct:HighlightContext	file:
zIndexedBy	testdocs/sqlite3.c	/^      char *zIndexedBy;    \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	union:SrcList::SrcList_item::__anon15	file:
zInput	testdocs/sqlite3.c	/^  char *zInput;                   \/* Input string *\/$/;"	m	struct:Fts3tokCursor	file:
zInput	testdocs/sqlite3.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zJContent	testdocs/sqlite3.c	/^    const char *zJContent; \/* Content for INT, REAL, and STRING *\/$/;"	m	union:JsonNode::__anon37	file:
zJournal	testdocs/sqlite3.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:
zJournal	testdocs/sqlite3.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:MemJournal	file:
zJson	testdocs/sqlite3.c	/^  char *zJson;               \/* Input JSON *\/$/;"	m	struct:JsonEachCursor	file:
zJson	testdocs/sqlite3.c	/^  const char *zJson; \/* Original JSON string *\/$/;"	m	struct:JsonParse	file:
zLanguageid	testdocs/sqlite3.c	/^  char *zLanguageid;              \/* languageid=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zLeTerm	testdocs/sqlite3.c	/^  char *zLeTerm;                  \/* (term <= $zLeTerm) paramater, or NULL *\/$/;"	m	struct:Fts5VocabCursor	file:
zLocale	testdocs/sqlite3.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:
zLockName	testdocs/sqlite3.c	/^  const char *zLockName; \/* Name of the table *\/$/;"	m	struct:TableLock	file:
zMagicHeader	testdocs/sqlite3.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMalloc	testdocs/sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:
zMalloc	testdocs/sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:
zMalloc	testdocs/sqlite3.c	/^  char *zMalloc;      \/* Space to hold MEM_Str or MEM_Blob if szMalloc>0 *\/$/;"	m	struct:sqlite3_value	file:
zMask	testdocs/sqlite3.c	/^  char *zMask;                    \/* Copy of update mask used with pUpdate *\/$/;"	m	struct:RbuUpdateStmt	file:
zMatchinfo	testdocs/sqlite3.c	/^  char *zMatchinfo;$/;"	m	struct:MatchinfoBuffer	file:
zName	testdocs/sqlite3.c	/^    char *zName;                    \/* Name of this CTE *\/$/;"	m	struct:With::Cte	file:
zName	testdocs/sqlite3.c	/^    char *zName;            \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zName	testdocs/sqlite3.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	file:
zName	testdocs/sqlite3.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zName	testdocs/sqlite3.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	file:
zName	testdocs/sqlite3.c	/^  char *zName;                    \/* Local name of table *\/$/;"	m	struct:SessionTable	file:
zName	testdocs/sqlite3.c	/^  char *zName;                    \/* Name of FTS index *\/$/;"	m	struct:Fts5Config	file:
zName	testdocs/sqlite3.c	/^  char *zName;                    \/* Name of table or index *\/$/;"	m	struct:ScanStatus	file:
zName	testdocs/sqlite3.c	/^  char *zName;                    \/* Name of tokenizer *\/$/;"	m	struct:Fts5TokenizerModule	file:
zName	testdocs/sqlite3.c	/^  char *zName;                    \/* Value of 'name' column *\/$/;"	m	struct:StatCursor	file:
zName	testdocs/sqlite3.c	/^  char *zName;                \/* Name of r-tree table *\/$/;"	m	struct:Rtree	file:
zName	testdocs/sqlite3.c	/^  char *zName;             \/* Name of this index *\/$/;"	m	struct:Index	file:
zName	testdocs/sqlite3.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	file:
zName	testdocs/sqlite3.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	file:
zName	testdocs/sqlite3.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	file:
zName	testdocs/sqlite3.c	/^  char *zName;        \/* Name of the transformation *\/$/;"	m	struct:__anon19	file:
zName	testdocs/sqlite3.c	/^  char *zName;     \/* Name of this column, \\000, then the type *\/$/;"	m	struct:Column	file:
zName	testdocs/sqlite3.c	/^  const char *const zName; \/* Name of pragma *\/$/;"	m	struct:PragmaName	file:
zName	testdocs/sqlite3.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	file:
zName	testdocs/sqlite3.c	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table	file:
zName	testdocs/sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:unix_syscall	file:
zName	testdocs/sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:win_syscall	file:
zName	testdocs/sqlite3.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	file:
zName	testdocs/sqlite3.c	/^  const char *zName;   \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	file:
zName	testdocs/sqlite3.c	/^  const char *zName;$/;"	m	struct:Fts5Enum	file:
zOpen	testdocs/sqlite3.c	/^  const char *zOpen;              \/* Opening highlight *\/$/;"	m	struct:HighlightContext	file:
zOut	testdocs/sqlite3.c	/^  char *zOut;                     \/* Output value *\/$/;"	m	struct:HighlightContext	file:
zOutput	testdocs/sqlite3.c	/^  const char *zOutput;$/;"	m	struct:PorterRule	file:
zPagetype	testdocs/sqlite3.c	/^  char *zPagetype;                \/* Value of 'pagetype' column *\/$/;"	m	struct:StatCursor	file:
zPath	testdocs/sqlite3.c	/^  char *zPath;                    \/* Path to this page *\/$/;"	m	struct:StatPage	file:
zPath	testdocs/sqlite3.c	/^  char *zPath;                    \/* Value of 'path' column *\/$/;"	m	struct:StatCursor	file:
zPath	testdocs/sqlite3.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:
zPath	testdocs/sqlite3.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:
zPfx	testdocs/sqlite3.c	/^  const char *zPfx; \/* Error message prefix *\/$/;"	m	struct:IntegrityCk	file:
zPool	testdocs/sqlite3.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:
zRank	testdocs/sqlite3.c	/^  char *zRank;                    \/* Custom rank function *\/$/;"	m	struct:Fts5Cursor	file:
zRank	testdocs/sqlite3.c	/^  char *zRank;                    \/* Name of rank function *\/$/;"	m	struct:Fts5Config	file:
zRankArgs	testdocs/sqlite3.c	/^  char *zRankArgs;                \/* Arguments to rank function *\/$/;"	m	struct:Fts5Config	file:
zRankArgs	testdocs/sqlite3.c	/^  char *zRankArgs;                \/* Custom rank function args *\/$/;"	m	struct:Fts5Cursor	file:
zRbu	testdocs/sqlite3.c	/^  char *zRbu;                     \/* Path to rbu db *\/$/;"	m	struct:sqlite3rbu	file:
zReadExprlist	testdocs/sqlite3.c	/^  char *zReadExprlist;$/;"	m	struct:Fts3Table	file:
zRoot	testdocs/sqlite3.c	/^  char *zRoot;               \/* Path by which to filter zJson *\/$/;"	m	struct:JsonEachCursor	file:
zSegmentsTbl	testdocs/sqlite3.c	/^  char *zSegmentsTbl;             \/* Name of %_segments table *\/$/;"	m	struct:Fts3Table	file:
zSelName	testdocs/sqlite3.c	/^  char zSelName[12];     \/* Symbolic name of this SELECT use for debugging *\/$/;"	m	struct:Select	file:
zSpace	testdocs/sqlite3.c	/^  char zSpace[100];        \/* Initial static space *\/$/;"	m	struct:JsonString	file:
zSpan	testdocs/sqlite3.c	/^    char *zSpan;            \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zSql	testdocs/sqlite3.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	file:
zStart	testdocs/sqlite3.c	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan	file:
zState	testdocs/sqlite3.c	/^  char *zState;                   \/* Path to state db (or NULL if zRbu) *\/$/;"	m	struct:sqlite3rbu	file:
zStateDb	testdocs/sqlite3.c	/^  char zStateDb[5];               \/* Db name for state ("stat" or "main") *\/$/;"	m	struct:sqlite3rbu	file:
zStop	testdocs/sqlite3.c	/^  char *zStop;$/;"	m	struct:Fts3auxCursor	file:
zSuffix	testdocs/sqlite3.c	/^  const char *zSuffix;$/;"	m	struct:PorterRule	file:
zTab	testdocs/sqlite3.c	/^  char *zTab;                     \/* Current table *\/$/;"	m	struct:sqlite3_changeset_iter	file:
zTail	testdocs/sqlite3.c	/^  const char *zTail;        \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	file:
zTarget	testdocs/sqlite3.c	/^  char *zTarget;                  \/* Path to target db *\/$/;"	m	struct:sqlite3rbu	file:
zTarget	testdocs/sqlite3.c	/^  char *zTarget;       \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	file:
zTbl	testdocs/sqlite3.c	/^  char *zTbl;$/;"	m	struct:RbuState	file:
zTbl	testdocs/sqlite3.c	/^  const char *zTbl;               \/* Name of target db table *\/$/;"	m	struct:RbuObjIter	file:
zTerm	testdocs/sqlite3.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:
zTerm	testdocs/sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:
zTerm	testdocs/sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:
zTerm	testdocs/sqlite3.c	/^  char *zTerm;                    \/* Pointer to term buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
zTerm	testdocs/sqlite3.c	/^  char *zTerm;                    \/* nul-terminated term *\/$/;"	m	struct:Fts5ExprTerm	file:
zTerm	testdocs/sqlite3.c	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter	file:
zText	testdocs/sqlite3.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	file:
zTitle	testdocs/sqlite3.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon20	file:
zTo	testdocs/sqlite3.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	file:
zToken	testdocs/sqlite3.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon10	file:
zToken	testdocs/sqlite3.c	/^  char *zToken;                   \/* storage for current token *\/$/;"	m	struct:unicode_cursor	file:
zToken	testdocs/sqlite3.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zToken	testdocs/sqlite3.c	/^  const char *zToken;             \/* Current 'token' value *\/$/;"	m	struct:Fts3tokCursor	file:
zType	testdocs/sqlite3.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
zVfsName	testdocs/sqlite3.c	/^  const char *zVfsName;           \/* Name of automatically created rbu vfs *\/$/;"	m	struct:sqlite3rbu	file:
zWal	testdocs/sqlite3.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:
zWal	testdocs/sqlite3.c	/^  const char *zWal;               \/* Wal filename for this main db file *\/$/;"	m	struct:rbu_file	file:
zWalName	testdocs/sqlite3.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:
zWriteExprlist	testdocs/sqlite3.c	/^  char *zWriteExprlist;$/;"	m	struct:Fts3Table	file:
zeroJournalHdr	testdocs/sqlite3.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:
zeroPage	testdocs/sqlite3.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:
zeroblobFunc	testdocs/sqlite3.c	/^static void zeroblobFunc($/;"	f	file:
